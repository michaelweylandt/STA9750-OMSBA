---
topic: "Groupwise Operations"
---

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
library(palmerpenguins)
```

# {{< meta topic >}}

## Where are We?

::: {style="font-size: 85%;"}
- `R` Basics
- Data Visualization
- `R` Programming
- [Tidy Data Manipulation]{color="blue"}
  - Selecting Rows and Columns
  - [Computing Groupwise Summaries]{color="blue"}
  - Joining Tables
  - Reshaping Tables
- `python` Basics
- Web Scraping with `python`

:::


## Goals for this Video

In this video: 

::: incremental

- Understand "grouped" `dplyr` operations
- Use nested/compound group structures
- Apply `rowwise()` operations

:::

## group_by 

So far, we have applied _vectorized_ operations to `data.frame`s:

- `select`: Keep and drop columns
- `mutate`: Create new columns
- `filter`: Keep and drop rows

. . . 

For each of these, we have operated on the _whole_ data set

Often, we instead want to operate on _chunks_ of the data at a time

## group_by

Recall our penguins: 

```{r}
#| echo: true
#| eval: false
penguins
```

```{r}
#| echo: false
#| eval: true
penguins |> select(species, bill_length_mm, body_mass_g) |>print(n=3)
```

. . . 

Heaviest penguin: 

```{r}
#| echo: true
#| eval: false
penguins |> slice_max(body_mass_g)
```

```{r}
#| echo: false
penguins |> 
    select(species, bill_length_mm, body_mass_g) |>
    slice_max(body_mass_g)
```


## group_by

How can we get the _heaviest_ penguin _of each species_?

. . . 

Conceptually: 

- Split the data into three groups
- Apply `slice_max` to each group separately
- Combine the three rows back together

. . . 

Sometimes called the *split-apply-combine* paradigm

## group_by

Implemented using the `group_by` _adverb_

- Doesn't do anything on its own
- Changes the behavior of other functions

. . . 

```{r}
#| echo: true
penguins |> group_by(species) |> slice_max(body_mass_g)
```

## Looking Closer

Let's take this step-by-step

```{r}
#| echo: true
penguins |> group_by(species)
```

Same data as before, but here `# Groups: species[3]`

## Effects of group_by

`group_by` changes behavior of _aggregating_ functions: 

- `min()`, `max()`, `n()`, `sum()`, `prod()`, *etc.*

Many other operations use these internally

## Effects of group_by

Recall

```{r}
#| eval: false
#| echo: true
penguins |> slice_max(body_mass_g)
```

is equivalent to: 

```{r}
#| eval: false
#| echo: true
penguins |> filter(body_mass_g == max(body_mass_g, na.rm=TRUE))
```

or even

```{r}
#| eval: false
#| echo: true
penguins |> 
    mutate(mass_max = max(body_mass_g, na.rm=TRUE))
    filter(body_mass_g == mass_max)
```

## Effects of group_by

Looking at the first step

```{r}
#| eval: false
#| echo: true
penguins |> 
    mutate(mass_max = max(body_mass_g, na.rm=TRUE))
```

```{r}
#| eval: true
#| echo: false
penguins |> 
    mutate(mass_max = max(body_mass_g, na.rm=TRUE)) |>
    select(species, body_mass_g, mass_max) |>
    print(n=3)
```

. . . 

With `group_by`, a different `max` for each group

```{r}
#| eval: false
#| echo: true
penguins |> 
    group_by(species) |>
    mutate(mass_max = max(body_mass_g, na.rm=TRUE))
```

```{r}
#| eval: true
#| echo: false
penguins |> 
    group_by(species) |>
    mutate(mass_max = max(body_mass_g, na.rm=TRUE)) |>
    select(species, body_mass_g, mass_max) |>
    print(n=3)
```

## Effects of group_by

Hence, 

```{r}
#| eval: false
#| echo: true
penguins |> 
    group_by(species) |>
    mutate(mass_max = max(body_mass_g, na.rm=TRUE))
    filter(body_mass_g == mass_max)
```

```{r}
#| eval: true
#| echo: true
penguins |> group_by(species) |> slice_max(body_mass_g)
```

gives a 3 row answer (one per group)

## Effects of group_by

Operations do not have to select only a single row like `slice_max`

. . . 

To get "above average" penguins for each species

```{r}
#| eval: false
penguins |> 
    group_by(species) |> 
    filter(body_mass_g > mean(body_mass_g, na.rm=TRUE))
```

## Compound Grouping

Can apply `group_by` to create "compound" groups

```{r}
#| echo: true
penguins |> group_by(species, year)
```

$9 = 3 \times 3$ groups

## Compound Grouping

Grouped operations apply as before: 

```{r}
#| echo: true
penguins |> 
    group_by(species, year) |> 
    slice_max(body_mass_g)
```

## Compound Grouping

Missing 'combinations' automatically dropped: 

```{r}
#| echo: true
#| eval: false
penguins |> 
    group_by(species, island) 
```

```{r}
#| echo: false
#| eval: true
penguins |> 
    select(species, island, body_mass_g, sex) |>
    group_by(species, island) 
```

## Stopping grouped operations

Once you are done with grouped operations, `ungroup`

```{r}
#| echo: true
penguins |> 
    group_by(species, island) |>
    slice_max(body_mass_g) |>
    ungroup()
```

## Grouping on Numeric Variables

In general, grouping on continuous variables is a bad
choice: 

```{r}
penguins |> group_by(body_mass_g)
```

(Analogy: Checking _exact equality_ of continuous random variables)

## Grouping on Numeric Variables

Better choices: 

- Group on quantiles (`ntile`) or cut points (`cut`)

```{r}
#| eval: false
penguins |>
    mutate(mass_5ile = ntile(body_mass_g, 5)) |>
    group_by(mass_5ile) |>
    ...
```

## rowwise Operations

_Rarely_, you may need to apply an operation to each row
separately without vectorization

`rowwise` lets you do so - makes each row its own group

```{r}
#| eval: false
penguins |> rowwise()
```

```{r}
#| echo: false
#| eval: true
penguins |> rowwise() |> select(sex, island, flipper_length_mm, body_mass_g) |> print(n=2)
```

. . . 

Note: This is a bit dangerous - vectorization is important for data integrity

## Looking Ahead

- Apply Grouped Operations âœ… 
- Summarize Across Multiple Rows
- Join Multiple Tables
- Reshape Tables with `pivot` Operations

## Learning More


For more, check out 
[Sections 3.5-3.6 - "Groups"](https://r4ds.hadley.nz/data-transform.html#groups) 
of *`R` for Data Science*
