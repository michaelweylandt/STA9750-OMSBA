---
topic: "`python` Basics: Syntax"
---

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
library(palmerpenguins)
```

# {{< meta topic >}}

## Where are We?

::: {style="font-size: 85%;"}
- `R` Basics
- Data Visualization
- `R` Programming
- Tidy Data Manipulation
- [`python` Basics]{color="blue"}
  - Installing `python`
  - [Basic Syntax and Control Flow]{color="blue"}
  - `python` Objects
  - Using Packages
- Web Scraping with `python`

:::


## Goals for this Video

In this video: 

::: incremental

- Basic Syntax of `python`
- `python` Containers
- Function Calls in `python`

:::

## Syntax: Literals

Like `R`, `python` has _literal_ syntax for basic types

- integers
- real numbers
- strings

```{python}
#| eval: false
3
3.5
"abc"
```

For basic types, essentially unchanged

## Syntax: Assignment

`python` only assigns with the `=` operator (no `<-`)

```{python}
x = "abc"
y = 3.5 + 200
z = 200
x
```

Functions are defined differently (later)

## Syntax: Names

`python` variable names are similar to `R`:

- Any lower/upper letters
- Numbers and underscores not at start

. . . 

Python *convention* is to name variables and functions in 

`snake_case`

with `CamelCase` for types (later)

. . . 

No analogy to `R` backticks (non-syntactic names)

## Syntax: Arithmetic

Basic arithmetic looks like `R`: `+`, `-`, `*`, `/`

Differences: 

- `^` is bitwise `XOR`: use `**` instead
- `//` integer division (in `R`, `%/%`)
- `%` division remainder (in `R`, `%%`)

```{python}
interest_rate = 0.03 # 3% Annual rate
monthly_rate = (1 + interest_rate) ** (1/12) - 1
```

## Containers

In `python`, scalars are real (not just length-1 vectors)

```{python}
#| error: true
len(5)
```

*vs* equivalent `R`: 

```{r}
length(5)
```

. . . 

Three primary _containers_ in `python`

- `list`
- `set`
- `dict`

## list Objects

A `python` `list` is (like `R`):

- an _ordered_ container 
- of arbitrary types

```{python}
x = [1, 3.5, "fish", ["a", "different", "list"]]
```

. . . 

Unlike `R`, `python` is *zero-based*!

```{python}
x[2] # Third item!
```

## list Objects

```{python}
x = [1, 3.5, "fish", ["a", "different", "list"]]

1 in x
2 in x

"list" in x 

del x[2] # Remove _third_ item!
x
```

## set Objects

A `python` `set` is:

- an _unordered_ container 
- of arbitrary types
- without duplicates

```{python}
x = {1, 3.5, "fish", 3.5}
x
```

Note no repeat in `x` (3.5)

Can't put `list`s inside `set`s

## set Objects

To check if item is in set, use `in` operator:

```{python}
x
2 in x
1 in x
```

Set operations: 

```{python}
x = {1, 2, 3}
y = {3, 4, 5}
x & y # Intersection
x | y # Union
x - y # Set difference
```

## dict Objects

A `python` `dict` is:

- An _unordered_ mapping
- key => value pairs

_Incredibly_ useful for 'look-ups'

```{python}
x = {"Zicklin": "Business", "Weissman": "A&S", "Marxe": "Public Affairs"}
x["Zicklin"]
```

. . . 

Some rules about what the _keys_ can be - strings are a good baseline

## dict Objects

```{python}
x
x["Zicklin"]
"Zicklin" in x
"Baruch" in x
del x["Zicklin"] # Remove (delete) a pair
x
x["Baruch"] = "Awesome" # Set value
x["Baruch"]
```

## tuple

A tuple is a 'frozen' list

```{python}
#| error: true
x = [1, 2, 3]
y = (1, 2, 3)

del x[0]
del y[0]
```

Very common behind the scenes

## Looking Ahead

- Use Basic Syntax ✅
- Manipulate Containers ✅
- Iterate on Containers 
- Call Functions
- Control Flow

## Learning More

See [Section 3.1](https://wesmckinney.com/book/python-builtin#tut_data_structures) of *Python for Data Science*
