[
  {
    "objectID": "slides/2025-05-13/13_python_basics_objects.html#where-are-we",
    "href": "slides/2025-05-13/13_python_basics_objects.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-05-13/13_python_basics_objects.html#goals-for-this-video",
    "href": "slides/2025-05-13/13_python_basics_objects.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "In this video:\n\n\nThe python object model\nMethods vs Functions\nMutating vs Non-Mutating Methods"
  },
  {
    "objectID": "slides/2025-05-13/13_python_basics_objects.html#looking-ahead",
    "href": "slides/2025-05-13/13_python_basics_objects.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead"
  },
  {
    "objectID": "slides/2025-05-13/13_python_basics_objects.html#learning-more",
    "href": "slides/2025-05-13/13_python_basics_objects.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#where-are-we",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#goals-for-this-video",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nBasic Syntax of python\npython Containers\nFunction Calls in python"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#looking-ahead",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nUse Basic Syntax ✅\nManipulate Containers ✅\nIterate on Containers\nCall Functions\nControl Flow"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#learning-more",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nSee Section 3.1 of Python for Data Science"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#where-are-we",
    "href": "slides/2025-04-29/09_modeling.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\n\nStatistical Analysis\n\nTidy Data Manipulation\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#goals-for-this-video",
    "href": "slides/2025-04-29/09_modeling.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nFormula Syntax\nClassical Statistical Models with R\nKey Accessor Functions\nPredictive Modeling in R"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#looking-ahead",
    "href": "slides/2025-04-29/09_modeling.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\nApplications to course project:\n\n\nTwo variables are statistically independent if one cannot be used to predict the other\nMany questions take the form “Is \\(X\\) related to \\(Y\\)?”\nBuild a model to predict \\(Y\\) from \\(X\\)\n\nIf model doesn’t use \\(X\\) (small coefficient or importance), unlikely to be related\nMove beyond simple linear correlation\n\nAlso consider occlusion studies"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#learning-more",
    "href": "slides/2025-04-29/09_modeling.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more:\n\nModeling - future STA and CIS classes\ntidymodels - Case Study\n\n\nTo see more worked examples of predictive models, check out the tidymodels Gallery"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#where-are-we",
    "href": "slides/2025-04-22/07_dplyr_join.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#goals-for-this-video",
    "href": "slides/2025-04-22/07_dplyr_join.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nIdentify suitable keys\nUnderstand different types of join operators\nSpecify columns to be used in joins"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#combining-tables",
    "href": "slides/2025-04-22/07_dplyr_join.html#combining-tables",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Combining Tables",
    "text": "Combining Tables\nOften in data analysis, we combine data from multiple sources to create new insights\njoins provide us a unified framework for combining data sets"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#new-example-data",
    "href": "slides/2025-04-22/07_dplyr_join.html#new-example-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "New Example Data",
    "text": "New Example Data\n\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#new-example-data-1",
    "href": "slides/2025-04-22/07_dplyr_join.html#new-example-data-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "New Example Data",
    "text": "New Example Data\nPartial alignment on name\nMissing:\n\nKeith (Richards) of the Rolling Stones in band_members\nMick (Jagger) as a guitarist in band_instruments"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#table-keys",
    "href": "slides/2025-04-22/07_dplyr_join.html#table-keys",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Table Keys",
    "text": "Table Keys\nRecall the concept of a key - a unique identifier in a table\n\nIdeally a single column (e.g., Employee ID)\nSometimes several columns (name + birth date)\n\nIn our example, name is a key we can use"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Join",
    "text": "Your First Join\nRecall our two data sets\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nMick\nStones\n\n\nPaul\nbass\nJohn\nBeatles\n\n\nKeith\nguitar\nPaul\nBeatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join-1",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Join",
    "text": "Your First Join\nTo use name as a key, reorder rows so that name matches\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nJohn\nBeatles\n\n\nPaul\nbass\nPaul\nBeatles\n\n\nKeith\nguitar\n\n\n\n\n\n\nMick\nStones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join-2",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Join",
    "text": "Your First Join\nNote that Keith and Mick don’t have a matching row\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nJohn\nBeatles\n\n\nPaul\nbass\nPaul\nBeatles\n\n\nKeith\nguitar\n\n\n\n\n\n\nMick\nStones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join-3",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Join",
    "text": "Your First Join\nWe will definitely keep\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nJohn\nBeatles\n\n\nPaul\nbass\nPaul\nBeatles\n\n\n\nNeed to decide on unmatched rows"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-inner-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-inner-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Inner Join",
    "text": "Your First Inner Join\ninner_join - keep only rows with matches\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-full-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-full-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Full Join",
    "text": "Your First Full Join\nfull_join - keep all rows and fill with NA\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nKeith\nguitar\nNA\n\n\nMick\nNA\nStones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-left-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-left-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Left Join",
    "text": "Your First Left Join\nleft_join - keep unmatched rows from first (“left”) table\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nKeith\nguitar\nNA"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-right-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-right-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Right Join",
    "text": "Your First Right Join\nright_join - keep unmatched rows from first (“right”) table\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nMick\nNA\nStones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#types-of-joins",
    "href": "slides/2025-04-22/07_dplyr_join.html#types-of-joins",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Types of Joins",
    "text": "Types of Joins\nFigure from R for Data Science\n\nFigure from R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#specifying-joins",
    "href": "slides/2025-04-22/07_dplyr_join.html#specifying-joins",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Specifying Joins",
    "text": "Specifying Joins\nIn R, we specify joins with the join_by function\njoin_by gives a “Join Specification”\n\nname == name are column names from first and second table\nBe explicit or R will “auto-guess” based on names matched"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#inner_join",
    "href": "slides/2025-04-22/07_dplyr_join.html#inner_join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "inner_join",
    "text": "inner_join\ninner_join discards unmatched rows\n\n\n\n# A tibble: 2 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#full_join",
    "href": "slides/2025-04-22/07_dplyr_join.html#full_join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "full_join",
    "text": "full_join\nfull_join keeps all rows\n\n\n\n# A tibble: 4 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Keith guitar &lt;NA&gt;   \n4 Mick  &lt;NA&gt;   Stones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#left_join",
    "href": "slides/2025-04-22/07_dplyr_join.html#left_join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "left_join",
    "text": "left_join\nleft_join keeps unmatched rows from first table\n\n\n\n# A tibble: 3 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Keith guitar &lt;NA&gt;"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#right_join",
    "href": "slides/2025-04-22/07_dplyr_join.html#right_join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "right_join",
    "text": "right_join\nright_join flips left_join\n\n\n\n# A tibble: 3 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Mick  &lt;NA&gt;   Stones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#picking-a-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#picking-a-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Picking a Join",
    "text": "Picking a Join\nType of join depends on treatment of missing values\n\nWhy is data missing?\nIf going to na.rm=TRUE, inner_join\nIf going to investigate further, full or left/right"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#specifying-column-names",
    "href": "slides/2025-04-22/07_dplyr_join.html#specifying-column-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Specifying Column Names",
    "text": "Specifying Column Names\n\nband_instruments2\n\n# A tibble: 3 × 2\n  artist plays \n  &lt;chr&gt;  &lt;chr&gt; \n1 John   guitar\n2 Paul   bass  \n3 Keith  guitar\n\n\nSame as before, but now name -&gt; artist"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#specifying-names",
    "href": "slides/2025-04-22/07_dplyr_join.html#specifying-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Specifying Names",
    "text": "Specifying Names\n\ninner_join(band_instruments2, \n           band_members, \n           join_by(artist == name))\n\n# A tibble: 2 × 3\n  artist plays  band   \n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  \n1 John   guitar Beatles\n2 Paul   bass   Beatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores",
    "href": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Computing Z-Scores",
    "text": "Computing Z-Scores\nLet’s compute the z-scores of mass for our penguins by species\n\npenguin_stats &lt;- penguins |&gt;\n    group_by(species) |&gt;\n    summarize(mass_mean = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE))\n\npenguin_stats\n\n# A tibble: 3 × 3\n  species   mass_mean mass_sd\n  &lt;fct&gt;         &lt;dbl&gt;   &lt;dbl&gt;\n1 Adelie        3701.    459.\n2 Chinstrap     3733.    384.\n3 Gentoo        5076.    504."
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-1",
    "href": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Computing Z-Scores",
    "text": "Computing Z-Scores\n\npenguins |&gt;\n    inner_join(penguin_stats, \n               join_by(species == species)) |&gt;\n    select(species, body_mass_g, mass_mean, mass_sd)\n\n# A tibble: 344 × 4\n   species body_mass_g mass_mean mass_sd\n   &lt;fct&gt;         &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 Adelie         3750     3701.    459.\n 2 Adelie         3800     3701.    459.\n 3 Adelie         3250     3701.    459.\n 4 Adelie           NA     3701.    459.\n 5 Adelie         3450     3701.    459.\n 6 Adelie         3650     3701.    459.\n 7 Adelie         3625     3701.    459.\n 8 Adelie         4675     3701.    459.\n 9 Adelie         3475     3701.    459.\n10 Adelie         4250     3701.    459.\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-2",
    "href": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Computing Z-Scores",
    "text": "Computing Z-Scores\n\npenguins |&gt;\n    inner_join(penguin_stats, \n               join_by(species == species)) |&gt;\n    mutate(mass_z = (body_mass_g - mass_mean) / mass_sd) |&gt;\n    select(species, body_mass_g, mass_z)\n\n# A tibble: 344 × 3\n   species body_mass_g mass_z\n   &lt;fct&gt;         &lt;int&gt;  &lt;dbl&gt;\n 1 Adelie         3750  0.108\n 2 Adelie         3800  0.217\n 3 Adelie         3250 -0.983\n 4 Adelie           NA NA    \n 5 Adelie         3450 -0.547\n 6 Adelie         3650 -0.110\n 7 Adelie         3625 -0.165\n 8 Adelie         4675  2.12 \n 9 Adelie         3475 -0.492\n10 Adelie         4250  1.20 \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-3",
    "href": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Computing Z-Scores",
    "text": "Computing Z-Scores\nJoin onto summary statistics to get group (species) statistics\ninner_join since we know all penguins match to one species"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#looking-ahead",
    "href": "slides/2025-04-22/07_dplyr_join.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables ✅\nReshape Tables with pivot Operations"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#learning-more",
    "href": "slides/2025-04-22/07_dplyr_join.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 19 - “Joins” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#where-are-we",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#goals-for-this-video",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nUnderstand “grouped” dplyr operations\nUse nested/compound group structures\nApply rowwise() operations"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#group_by",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by",
    "text": "group_by\nSo far, we have applied vectorized operations to data.frames:\n\nselect: Keep and drop columns\nmutate: Create new columns\nfilter: Keep and drop rows\n\n\nFor each of these, we have operated on the whole data set\nOften, we instead want to operate on chunks of the data at a time"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#group_by-1",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#group_by-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by",
    "text": "group_by\nRecall our penguins:\n\npenguins\n\n\n\n# A tibble: 344 × 3\n  species bill_length_mm body_mass_g\n  &lt;fct&gt;            &lt;dbl&gt;       &lt;int&gt;\n1 Adelie            39.1        3750\n2 Adelie            39.5        3800\n3 Adelie            40.3        3250\n# ℹ 341 more rows\n\n\n\nHeaviest penguin:\n\npenguins |&gt; slice_max(body_mass_g)\n\n\n\n# A tibble: 1 × 3\n  species bill_length_mm body_mass_g\n  &lt;fct&gt;            &lt;dbl&gt;       &lt;int&gt;\n1 Gentoo            49.2        6300"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#group_by-2",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#group_by-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by",
    "text": "group_by\nHow can we get the heaviest penguin of each species?\n\nConceptually:\n\nSplit the data into three groups\nApply slice_max to each group separately\nCombine the three rows back together\n\n\n\nSometimes called the split-apply-combine paradigm"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#group_by-3",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#group_by-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by",
    "text": "group_by\nImplemented using the group_by adverb\n\nDoesn’t do anything on its own\nChanges the behavior of other functions\n\n\n\npenguins |&gt; group_by(species) |&gt; slice_max(body_mass_g)\n\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe           43.2          19                 197        4775\n2 Chinstrap Dream            52            20.7               210        4800\n3 Gentoo    Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#looking-closer",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#looking-closer",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Closer",
    "text": "Looking Closer\nLet’s take this step-by-step\n\npenguins |&gt; group_by(species)\n\n# A tibble: 344 × 8\n# Groups:   species [3]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nSame data as before, but here # Groups: species[3]"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\ngroup_by changes behavior of aggregating functions:\n\nmin(), max(), n(), sum(), prod(), etc.\n\nMany other operations use these internally"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-1",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nRecall\n\npenguins |&gt; slice_max(body_mass_g)\n\nis equivalent to:\n\npenguins |&gt; filter(body_mass_g == max(body_mass_g, na.rm=TRUE))\n\nor even\n\npenguins |&gt; \n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n    filter(body_mass_g == mass_max)"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-2",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nLooking at the first step\n\npenguins |&gt; \n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n\n\n\n# A tibble: 344 × 3\n  species body_mass_g mass_max\n  &lt;fct&gt;         &lt;int&gt;    &lt;int&gt;\n1 Adelie         3750     6300\n2 Adelie         3800     6300\n3 Adelie         3250     6300\n# ℹ 341 more rows"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-3",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nWith group_by, a different max for each group\n\npenguins |&gt; \n    group_by(species) |&gt;\n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n\n\n\n# A tibble: 344 × 3\n# Groups:   species [3]\n  species body_mass_g mass_max\n  &lt;fct&gt;         &lt;int&gt;    &lt;int&gt;\n1 Adelie         3750     4775\n2 Adelie         3800     4775\n3 Adelie         3250     4775\n# ℹ 341 more rows"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-4",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nHence,\n\npenguins |&gt; \n    group_by(species) |&gt;\n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n    filter(body_mass_g == mass_max)\n\n\npenguins |&gt; group_by(species) |&gt; slice_max(body_mass_g)\n\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe           43.2          19                 197        4775\n2 Chinstrap Dream            52            20.7               210        4800\n3 Gentoo    Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\ngives a 3 row answer (one per group)"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-5",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-5",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nOperations do not have to select only a single row like slice_max\n\nTo get “above average” penguins for each species\n\npenguins |&gt; \n    group_by(species) |&gt; \n    filter(body_mass_g &gt; mean(body_mass_g, na.rm=TRUE))"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Compound Grouping",
    "text": "Compound Grouping\nCan apply group_by to create “compound” groups\n\npenguins |&gt; group_by(species, year)\n\n# A tibble: 344 × 8\n# Groups:   species, year [9]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\\(9 = 3 \\times 3\\) groups"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping-1",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Compound Grouping",
    "text": "Compound Grouping\nGrouped operations apply as before:\n\npenguins |&gt; \n    group_by(species, year) |&gt; \n    slice_max(body_mass_g)\n\n# A tibble: 9 × 8\n# Groups:   species, year [9]\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Torgersen           39.2          19.6               195        4675\n2 Adelie    Torgersen           42.9          17.6               196        4700\n3 Adelie    Biscoe              43.2          19                 197        4775\n4 Chinstrap Dream               49.2          18.2               195        4400\n5 Chinstrap Dream               52            20.7               210        4800\n6 Chinstrap Dream               50.8          18.5               201        4450\n7 Gentoo    Biscoe              49.2          15.2               221        6300\n8 Gentoo    Biscoe              51.1          16.3               220        6000\n9 Gentoo    Biscoe              48.8          16.2               222        6000\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping-2",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Compound Grouping",
    "text": "Compound Grouping\nMissing ‘combinations’ automatically dropped:\n\npenguins |&gt; \n    group_by(species, island) \n\n\n\n# A tibble: 344 × 4\n# Groups:   species, island [5]\n   species island    body_mass_g sex   \n   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt; &lt;fct&gt; \n 1 Adelie  Torgersen        3750 male  \n 2 Adelie  Torgersen        3800 female\n 3 Adelie  Torgersen        3250 female\n 4 Adelie  Torgersen          NA &lt;NA&gt;  \n 5 Adelie  Torgersen        3450 female\n 6 Adelie  Torgersen        3650 male  \n 7 Adelie  Torgersen        3625 female\n 8 Adelie  Torgersen        4675 male  \n 9 Adelie  Torgersen        3475 &lt;NA&gt;  \n10 Adelie  Torgersen        4250 &lt;NA&gt;  \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#stopping-groups",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#stopping-groups",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Stopping groups",
    "text": "Stopping groups\nOnce you are done with grouped operations, ungroup\n\npenguins |&gt; \n    group_by(species, island) |&gt;\n    slice_max(body_mass_g) |&gt;\n    ungroup()\n\n# A tibble: 5 × 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe              43.2          19                 197        4775\n2 Adelie    Dream               39.8          19.1               184        4650\n3 Adelie    Torgersen           42.9          17.6               196        4700\n4 Chinstrap Dream               52            20.7               210        4800\n5 Gentoo    Biscoe              49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#numeric-variables",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#numeric-variables",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Numeric Variables",
    "text": "Numeric Variables\nIn general, grouping on continuous variables is a bad choice:\n\n\n# A tibble: 344 × 8\n# Groups:   body_mass_g [95]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n(Analogy: Checking exact equality of continuous random variables)"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#numeric-variables-1",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#numeric-variables-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Numeric Variables",
    "text": "Numeric Variables\nBetter choices:\n\nGroup on quantiles (ntile) or cut points (cut)\n\n\npenguins |&gt;\n    mutate(mass_5ile = ntile(body_mass_g, 5)) |&gt;\n    group_by(mass_5ile) |&gt;\n    ..."
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#rowwise-operations",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#rowwise-operations",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "rowwise Operations",
    "text": "rowwise Operations\nRarely, you may need to apply an operation to each row separately without vectorization\nrowwise lets you do so - makes each row its own group\n\npenguins |&gt; rowwise()\n\n\n\n# A tibble: 344 × 4\n# Rowwise: \n  sex    island    flipper_length_mm body_mass_g\n  &lt;fct&gt;  &lt;fct&gt;                 &lt;int&gt;       &lt;int&gt;\n1 male   Torgersen               181        3750\n2 female Torgersen               186        3800\n# ℹ 342 more rows\n\n\n\nNote: This is a bit dangerous - vectorization is important for data integrity"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#looking-ahead",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows\nJoin Multiple Tables\nReshape Tables with pivot Operations"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#learning-more",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Sections 3.5-3.6 - “Groups” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#where-are-we",
    "href": "slides/2025-04-01/03_dplyr_filter.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#goals-for-this-video",
    "href": "slides/2025-04-01/03_dplyr_filter.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nfilter out rows in a tidy way\nApply Boolean operators\nslice and dice to find maxima and minima"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nWhile select is used for column selection, filter is used for row selection\n\npenguins |&gt; filter(bill_length_mm &gt; 40)\n\n\nSimilar syntax to select:\n\nNo need to quote column names\nData is first (piped) argument\nLater arguments specify action\n\n\n\nInstead of names, provide logical tests (filters)"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-1",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nContrast\n\npenguins |&gt; filter(bill_length_mm &gt; 40)\n\nwith\n\npenguins[penguins$bill_length_mm &gt; 40, ]"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-2",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nMultiple filters give the intersection:\n\npenguins |&gt; filter(bill_length_mm &gt; 40, sex == \"female\")\n\n\nUse logical operators to get the union:\n\npenguins |&gt; filter(bill_length_mm &gt; 40 | sex == \"female\")"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-3",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nPipes are very useful for multi-step operations\n\npenguins |&gt; filter(bill_length_mm &gt; 40) |&gt; select(species)\n\n\nCompare to\n\nselect(filter(penguins, bill_length_mm &gt; 40), species)\n\nPiped form reads left to right instead of inside out"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-4",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nCan use more complex comparisons in filter:\n\npenguins |&gt; filter(body_mass_g &gt; mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 149 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.2          19.6               195        4675\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           34.6          21.1               198        4400\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Dream               39.8          19.1               184        4650\n 6 Adelie  Dream               44.1          19.7               196        4400\n 7 Adelie  Dream               39.6          18.8               190        4600\n 8 Adelie  Biscoe              40.1          18.9               188        4300\n 9 Adelie  Biscoe              41.3          21.1               195        4400\n10 Adelie  Torgersen           41.8          19.4               198        4450\n# ℹ 139 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nWhat would happen without na.rm=TRUE? Why?"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-5",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-5",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nCommon mistake - using only a single equals sign for equality\n\npenguins |&gt; filter(sex = \"female\")\n\nError in `filter()`:\n! We detected a named input.\nℹ This usually means that you've used `=` instead of `==`.\nℹ Did you mean `sex == \"female\"`?"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#slice-functions",
    "href": "slides/2025-04-01/03_dplyr_filter.html#slice-functions",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "slice functions",
    "text": "slice functions\nThe slice_* family extend filter:\n\npenguins |&gt; slice_max(body_mass_g, n=1)\n\n# A tibble: 1 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Gentoo  Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nEquivalent to:\n\npenguins |&gt; filter(body_mass_g == max(body_mass_g, na.rm=TRUE))"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#slice-functions-1",
    "href": "slides/2025-04-01/03_dplyr_filter.html#slice-functions-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "slice functions",
    "text": "slice functions\nStandard slices:\n\nslice_min\nslice_max\nslice_head\nslice_tail\n\n\nSpecify one of:\n\nn= to get top/bottom \\(n\\)\nprop= to select a fraction"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#slice-functions-2",
    "href": "slides/2025-04-01/03_dplyr_filter.html#slice-functions-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "slice functions",
    "text": "slice functions\nslice_sample: random subset of your data\n\nUseful if exploring a large data set\n\n\npenguins |&gt; slice_sample(n=10)\n\n# A tibble: 10 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Chinstrap Dream              40.9          16.6               187        3200\n 2 Chinstrap Dream              46.5          17.9               192        3500\n 3 Adelie    Dream              36.3          19.5               190        3800\n 4 Adelie    Dream              36            17.1               187        3700\n 5 Adelie    Torgers…           37.8          17.3               180        3700\n 6 Adelie    Torgers…           37.7          19.8               198        3500\n 7 Chinstrap Dream              49.7          18.6               195        3600\n 8 Gentoo    Biscoe             41.7          14.7               210        4700\n 9 Gentoo    Biscoe             44            13.6               208        4350\n10 Chinstrap Dream              52.7          19.8               197        3725\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#looking-ahead",
    "href": "slides/2025-04-01/03_dplyr_filter.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nSelecting Columns ✅\nSelecting Rows ✅\nTransforming Columns"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#learning-more",
    "href": "slides/2025-04-01/03_dplyr_filter.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 3 - “Data Transformation” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#where-are-we",
    "href": "slides/2025-04-01/01_tidy.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\n\nVariables and “Calculator Math”\nVectors\nData Frames\n\nData Visualization\nR Programming\nData Manipulation\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#goals-for-this-video",
    "href": "slides/2025-04-01/01_tidy.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nIntroduce the concept of Tidy Data\nIdentify Key Aspects of Tidy Data\nLearn to Diagnose Non-Tidy Data"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#data-frames-in-r",
    "href": "slides/2025-04-01/01_tidy.html#data-frames-in-r",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Data Frames in R",
    "text": "Data Frames in R\ndata.frame - R’s tabular data storage\n\nlibrary(palmerpenguins)\nhead(penguins)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#data-frames-in-r-1",
    "href": "slides/2025-04-01/01_tidy.html#data-frames-in-r-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Data Frames in R",
    "text": "Data Frames in R\npalmerpenguins\n\n\n344 penguins observed on the Palmer Islands (Antarctica)\n3 species, 3 islands, 3 years\n4 numeric variables\nOne categorial (factor) variable (sex)"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#data-frames-in-r-2",
    "href": "slides/2025-04-01/01_tidy.html#data-frames-in-r-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Data Frames in R",
    "text": "Data Frames in R\nKey features:\n\n\nTabular (rows and columns) structure\nEntries in the same column are all of the same type\nColumns may be different types"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#data-frames-in-r-3",
    "href": "slides/2025-04-01/01_tidy.html#data-frames-in-r-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Data Frames in R",
    "text": "Data Frames in R\nCan be manipulated using standard R syntax:\n\ntable(penguins[penguins$bill_length_mm &gt; 40, \"species\"])\n\n\n   Adelie Chinstrap    Gentoo \n       51        68       123 \n\n\n\n\n$ extracts a column as a vector\ndf[row index, column index]\n\nLogical row indexing to select rows where bill_length_mm &gt; 40\nColumn indexing by name to select a single column"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#what-is-tidy-data",
    "href": "slides/2025-04-01/01_tidy.html#what-is-tidy-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "What is Tidy Data?",
    "text": "What is Tidy Data?\n“Tidy Data”:\n\nPrinciples to make data manipulation safe and easy\nDecrease chance of errors\nIncrease productivity\n\n\nWhat does it mean to be tidy?\n\n\nEverything in its proper place"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy-data-1",
    "href": "slides/2025-04-01/01_tidy.html#tidy-data-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\nRecall our penguins:\n\n\n  species bill_length_mm flipper_length_mm body_mass_g    sex\n1  Adelie           39.1               181        3750   male\n2  Adelie           39.5               186        3800 female\n3  Adelie           40.3               195        3250 female\n4  Adelie             NA                NA          NA   &lt;NA&gt;\n5  Adelie           36.7               193        3450 female\n6  Adelie           39.3               190        3650   male\n\n\n\nKey features:\n\n\nEach row is one observation (🐧)\nEach column has one and only one fact\nAll values are in the table\n\nNot hiding in row and column names"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy-data-2",
    "href": "slides/2025-04-01/01_tidy.html#tidy-data-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\n\n\nFigure from R for Data Science by H. Wickham"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy---why",
    "href": "slides/2025-04-01/01_tidy.html#tidy---why",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy - Why?",
    "text": "Tidy - Why?\nWhy emphasize tidy data?\n\nMinimize distractions:\n\nFree to focus on analysis not code\n\n\n\nOnce data is “tidy”, you can focus on the real questions\n\n\nFirst goal for data pre-processing (“tidying up”)"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy---who-and-when",
    "href": "slides/2025-04-01/01_tidy.html#tidy---who-and-when",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy - Who (and When)?",
    "text": "Tidy - Who (and When)?\nThe name and principles of “tidy data” were popularized by H. Wickham (2014)\n\nCore ideas are much older, dating back to (at least) Codd’s Relational Model in the 1970s, now ubiquitous in relational databases (SQL)\n\n\nNow found in:\n\nPython (pandas)\nJulia (DataFrames)\nRust (polars)\nand more"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy---how-and-where",
    "href": "slides/2025-04-01/01_tidy.html#tidy---how-and-where",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy - How (and Where)?",
    "text": "Tidy - How (and Where)?\ntidyverse - Packages for Manipulating Tidy Data:\n\n\nggplot2: Visualization\ndplyr: SQL-like operations\ntidyr: Reshaping and cleaning data\nreadr: Ingest tidy data into R\nTidy manipulation of different data types:\n\nstringr, forcats, lubridate\n\n\n\n\nMore helpers in the background (tibble, vctrs, …)"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#aside-tibbles",
    "href": "slides/2025-04-01/01_tidy.html#aside-tibbles",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Aside: tibbles",
    "text": "Aside: tibbles\nYou will sometimes see tibble (tbl_df) as a synonym for data.frame\n\nMinor differences in output formatting\nFewer edge cases"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#some-untidy-examples",
    "href": "slides/2025-04-01/01_tidy.html#some-untidy-examples",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Some Untidy Examples",
    "text": "Some Untidy Examples\nBaruch college business core enrollment:\n\n\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400\n\n\n\nTidy! ✅\n\n\n\nEach row is one unit (a class) 👍\nColumns are well-typed 👍\nOne piece of information per column 👍"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#some-untidy-examples-1",
    "href": "slides/2025-04-01/01_tidy.html#some-untidy-examples-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Some Untidy Examples",
    "text": "Some Untidy Examples\n\n\n# A tibble: 6 × 3\n  Semester Course     Enrollment  \n  &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;       \n1 Fall     Accounting \"200 of 250\"\n2 Fall     Law        \"100 of 125\"\n3 Fall     Statistics \"200 of 200\"\n4 Spring   Accounting \"300 of 350\"\n5 Spring   Law        \" 50 of 100\"\n6 Spring   Statistics \"400 of 400\"\n\n\n\nUntidy! ❌\n\n\nMultiple pieces of information per cell (Enrollment)"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#some-untidy-examples-2",
    "href": "slides/2025-04-01/01_tidy.html#some-untidy-examples-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Some Untidy Examples",
    "text": "Some Untidy Examples\n\n\n# A tibble: 12 × 4\n   Semester Course     Number Type      \n   &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     \n 1 Fall     Accounting    200 Enrollment\n 2 Fall     Accounting    250 Cap       \n 3 Fall     Law           100 Enrollment\n 4 Fall     Law           125 Cap       \n 5 Fall     Statistics    200 Enrollment\n 6 Fall     Statistics    200 Cap       \n 7 Spring   Accounting    300 Enrollment\n 8 Spring   Accounting    350 Cap       \n 9 Spring   Law            50 Enrollment\n10 Spring   Law           100 Cap       \n11 Spring   Statistics    400 Enrollment\n12 Spring   Statistics    400 Cap       \n\n\n\nUntidy! ❌\n\n\nMixing two pieces of information (Enrollments and Caps)\nTip: When one unit spans multiple rows, likely untidy"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#some-untidy-examples-3",
    "href": "slides/2025-04-01/01_tidy.html#some-untidy-examples-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Some Untidy Examples",
    "text": "Some Untidy Examples\n\n\n# A tibble: 6 × 3\n  Semester Course     Enrollment\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt;\n1 Fall     Accounting        200\n2 Fall     Law               100\n3 Fall     Statistics        200\n# ℹ 3 more rows\n\n\nand\n\n\n# A tibble: 6 × 3\n  Semester Course       Cap\n  &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;\n1 Fall     Accounting   250\n2 Fall     Law          125\n3 Fall     Statistics   200\n# ℹ 3 more rows\n\n\n\n[A little bit] Untidy! ❌\n\n\nData spread across multiple tables"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#looking-ahead",
    "href": "slides/2025-04-01/01_tidy.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\nFor now, we’ll provide you with tidy data\n\nUpcoming topics:\n\n\nVisualizing Tidy Data (Week 3)\nStatistical Models of Tidy Data (Week 4)\nManipulating Tidy Data (Week 5)\nTaking Untidy Web Data and Making it Tidy (Week 7)"
  },
  {
    "objectID": "objectives.html",
    "href": "objectives.html",
    "title": "STA 9750 - OMSBA - Course Learning Objectives",
    "section": "",
    "text": "This course provides an understanding of the principles and concepts of using computer tools for data analysis and visualization. Students will learn to use a scientific programming language (such as R) to import and export data from and into spreadsheets or other statistical software packages. They will gain experience in analyzing both quantitative and qualitative data, and statistical modelling techniques will be introduced. Written reports will prepare students for clear communication of their analysis in professional settings. This course is designed primarily for Masters’ students in statistics and quantitative methods and modeling (QMM), and those interested in carrying out sophisticated statistical analyses of data using statistical software."
  },
  {
    "objectID": "objectives.html#official-course-description",
    "href": "objectives.html#official-course-description",
    "title": "STA 9750 - OMSBA - Course Learning Objectives",
    "section": "",
    "text": "This course provides an understanding of the principles and concepts of using computer tools for data analysis and visualization. Students will learn to use a scientific programming language (such as R) to import and export data from and into spreadsheets or other statistical software packages. They will gain experience in analyzing both quantitative and qualitative data, and statistical modelling techniques will be introduced. Written reports will prepare students for clear communication of their analysis in professional settings. This course is designed primarily for Masters’ students in statistics and quantitative methods and modeling (QMM), and those interested in carrying out sophisticated statistical analyses of data using statistical software."
  },
  {
    "objectID": "objectives.html#program-learning-goals",
    "href": "objectives.html#program-learning-goals",
    "title": "STA 9750 - OMSBA - Course Learning Objectives",
    "section": "Program Learning Goals",
    "text": "Program Learning Goals\nThis course contributes to the program learning goals of several MS programs offered by the Zicklin School of Business.\n\nMS in Business Analytics\nThis course contributes to the following Program Learning Goals for the MS in Business Analytics:\n\nMSBA Program Learning Goals\n\n\n\n\n\n\n\nSTA 9750 - OMSBA Learning Goal\nMSBA Learning Goal\nDescription\n\n\n\n\n✓\nData Management\nStudents will be able to apply methods, tools, and software for acquiring, managing/storing, and accessing structured and unstructured data. Students will also demonstrate knowledge of the strategic uses of data.\n\n\n✓\nFoundational Statistical / Quantitative Skills\nStudents will be able to prepare data for statistical analysis, perform basic exploratory and descriptive analysis as well as employ foundational statistical techniques needed to analyze data.\n\n\n✓\nAdvanced Statistical/Quantitative Skills\nStudents will be able to build and interpret advanced predictive models. Students will be able to combine business rules and mathematical models to optimize business decisions from data.\n\n\n\nEthical Awareness\nStudents will be able to articulate an understanding of ethical issues in all phases of business analytics with particular emphasis on the new possibilities afforded by the emergence of big data.\n\n\n✓\nProfessional Communication\nStudents will be able to explain complex analytical models and their results orally and in writing to technical and non technical/lay audiences.\n\n\n✓\nKnowledge Integration\nStudents will be able to apply the three key types of analytics (descriptive, predictive, and prescriptive) in a business domain to add value to business decision-making.\n\n\n\n\n\nMS in Quantitative Methods & Modeling\nThis course contributes to the following Program Learning Goals for the MS in Quantitative Methods & Modeling:\n\nMSQMM Program Learning Goals\n\n\n\n\n\n\n\nSTA 9750 - OMSBA Learning Goal\nMSQMM Learning Goal\nDescription\n\n\n\n\n✓\nOperations Research & Mathematical Modeling\nStudents will be able to effectively model, evaluate, and solve quantitative (business) problems using quantitative modeling methods (e.g. deterministic and probabilistic operations research techniques).\n\n\n✓\nStatistics\nStudents will be able to correctly apply appropriate statistical methods when defining, solving, and analyzing problems.\n\n\n✓\nTechnology Competency\nStudents will be able to use current technological tools, including spreadsheets and specialized software, when solving problems.\n\n\n✓\nProfessional Communication\nStudents will be able to effectively communicate their problem solving methods and solutions to technical and non-technical audiences.\n\n\n\n\n\nMS in Statistics\nThis course contributes to the following Program Learning Goals for the MS in Statistics:\n\nMS Statistics Program Learning Goals\n\n\n\n\n\n\n\nSTA 9750 - OMSBA Learning Goal\nMS Stat Learning Goal\nDescription\n\n\n\n\n✓\nGeneral Statistical Competence\nStudents will be able to apply appropriate probability models and statistical techniques when analyzing problems from business and other fields.\n\n\n✓\nStatistical Practice\nStudents will become familiar with the standard tools of statistical practice for multiple regression, along with the tools of a subset of specialized statistical areas such as multivariate analysis, applied sampling, time series analysis, experimental design, data mining, categorical analysis, and/or stochastic processes.\n\n\n✓\nTechnology Competency\nStudents will learn to use one or more of the benchmark statistical software platforms, such as SAS or R."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to the offering of STA 9750 - OMSBA as a part of the Online MSBA at Zicklin School of Business, Baruch College CUNY.\nFor now, this shell holds only slides for recording of course materials. It will eventually host extended worked examples, supplemental data sets, and interactive activities."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "STA 9750 - OMSBA - Slides",
    "section": "",
    "text": "This site hosts the following slides:\n\nTidy Data\nTidy Column Selection\nTidy Row Selection\nTidy Column Manipulation\nGroupwise Operations\nSummarizing Group Statistics\nJoining Multiple Tables\nReshaping Tidy Data\nBasic Statistical Analysis\nPredictive Modeling in R\nInstalling python\npython Basics: Syntax\npython Basics: Control Flow\npython Basics: Objects\npython Basics: Control Flow\n\nMore will be added later."
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#where-are-we",
    "href": "slides/2025-04-01/02_dplyr_select.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#goals-for-this-video",
    "href": "slides/2025-04-01/02_dplyr_select.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nIntroduce the dplyr package and the pipe operator (|&gt;)\nselect and rename columns in a tidy way\nUse advanced selectors for groups of columns"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#tidy-data",
    "href": "slides/2025-04-01/02_dplyr_select.html#tidy-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\nRecall our definition of “tidy” data - everything in its proper place:\n\n\nOne and only one type of information per column\nOne and only one observation per row\nNo values ‘hiding’ in column or row names\n\n\n\nReturn of the palmerpenguins:\n\n\n# A tibble: 344 × 3\n  species island    bill_length_mm\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;\n1 Adelie  Torgersen           39.1\n2 Adelie  Torgersen           39.5\n# ℹ 342 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#tidy-tools-for-tidy-data",
    "href": "slides/2025-04-01/02_dplyr_select.html#tidy-tools-for-tidy-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Tools for Tidy Data",
    "text": "Tidy Tools for Tidy Data\ntidyverse - Tools for manipulating tidy data\n\nMake sure to load the tidyverse package before using\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nSafe to ignore messages about conflicts"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#tidyverse-packages",
    "href": "slides/2025-04-01/02_dplyr_select.html#tidyverse-packages",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tidyverse Packages",
    "text": "tidyverse Packages\n\n\n\n\n\ntidyverse tools have excellent documentation\n\nVisit tidyverse.org for overall information\nIndividual packages: ggplot2.tidyverse.org, dplyr.tidyverse.org, etc.\n\n\n\nFunction Reference - Details of specific functions\nVignettes / Articles - Big picture tutorials"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#dplyr",
    "href": "slides/2025-04-01/02_dplyr_select.html#dplyr",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "dplyr",
    "text": "dplyr\nYou have already seen one tidyverse package: ggplot2\n\nToday we start with dplyr - ‘grammar of data manipulation’"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select",
    "href": "slides/2025-04-01/02_dplyr_select.html#select",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nThe select function can be used to select certain columns\n\nselect(penguins, species, bill_length_mm, body_mass_g, sex)\n\n# A tibble: 344 × 4\n   species bill_length_mm body_mass_g sex   \n   &lt;fct&gt;            &lt;dbl&gt;       &lt;int&gt; &lt;fct&gt; \n 1 Adelie            39.1        3750 male  \n 2 Adelie            39.5        3800 female\n 3 Adelie            40.3        3250 female\n 4 Adelie            NA            NA &lt;NA&gt;  \n 5 Adelie            36.7        3450 female\n 6 Adelie            39.3        3650 male  \n 7 Adelie            38.9        3625 female\n 8 Adelie            39.2        4675 male  \n 9 Adelie            34.1        3475 &lt;NA&gt;  \n10 Adelie            42          4250 &lt;NA&gt;  \n# ℹ 334 more rows\n\n\n\nArguments: data =&gt; columns we want"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-1",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nContrast\n\nselect(penguins, species, bill_length_mm, body_mass_g, sex)\n\nwith\n\npenguins[,c(\"species\", \"bill_length_mm\", \"body_mass_g\", \"sex\")]\n\n\n\nKey differences:\n\nNo quotes around column names\nPass names as arguments, not 1 vector"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#put-that-in-your-pipe",
    "href": "slides/2025-04-01/02_dplyr_select.html#put-that-in-your-pipe",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Put that in your Pipe",
    "text": "Put that in your Pipe\nR supports piped operations - feeding the output of one function into another\n\nselect(penguins, species, bill_length_mm, body_mass_g, sex)\n\nis equivalent to\n\npenguins |&gt; select(species, bill_length_mm, body_mass_g, sex)\n\n\nRead |&gt; as “and then”\ndplyr plays very nicely with pipes"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-2",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nLike vector indexing, negative sign drops columns:\n\npenguins |&gt; select(-species)\n\n# A tibble: 344 × 7\n   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex    year\n   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n 1 Torge…           39.1          18.7               181        3750 male   2007\n 2 Torge…           39.5          17.4               186        3800 fema…  2007\n 3 Torge…           40.3          18                 195        3250 fema…  2007\n 4 Torge…           NA            NA                  NA          NA &lt;NA&gt;   2007\n 5 Torge…           36.7          19.3               193        3450 fema…  2007\n 6 Torge…           39.3          20.6               190        3650 male   2007\n 7 Torge…           38.9          17.8               181        3625 fema…  2007\n 8 Torge…           39.2          19.6               195        4675 male   2007\n 9 Torge…           34.1          18.1               193        3475 &lt;NA&gt;   2007\n10 Torge…           42            20.2               190        4250 &lt;NA&gt;   2007\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-3",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\n: operator selects a range of columns\n\npenguins |&gt; select(bill_length_mm:body_mass_g)\n\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# ℹ 334 more rows\n\n\nYou can also use c here"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-4",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nselect also supports several “smart” helpers to pick columns\n\npenguins |&gt; select(contains(\"bill\"))\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            &lt;dbl&gt;         &lt;dbl&gt;\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-5",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-5",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nSee ?dplyr_tidy_select for more helpers\n\npenguins |&gt; select(ends_with(\"mm\"))\n\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm flipper_length_mm\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1           39.1          18.7               181\n 2           39.5          17.4               186\n 3           40.3          18                 195\n 4           NA            NA                  NA\n 5           36.7          19.3               193\n 6           39.3          20.6               190\n 7           38.9          17.8               181\n 8           39.2          19.6               195\n 9           34.1          18.1               193\n10           42            20.2               190\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-6",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-6",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nHelpers can be combined using & (intersection) and | (union) operations:\n\npenguins |&gt; select(contains(\"bill\") | ends_with(\"g\"))\n\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm body_mass_g\n            &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;\n 1           39.1          18.7        3750\n 2           39.5          17.4        3800\n 3           40.3          18          3250\n 4           NA            NA            NA\n 5           36.7          19.3        3450\n 6           39.3          20.6        3650\n 7           38.9          17.8        3625\n 8           39.2          19.6        4675\n 9           34.1          18.1        3475\n10           42            20.2        4250\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-7",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-7",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nPredicate operator can select columns based on properties of values\n\npenguins |&gt; select(where(is.numeric))\n\n\nAlso: is.character and is.factor\n\n\nCan be extended to more complex checks:\n\nPass a custom function\n(Not covered here; see docs for examples)"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-8",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-8",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nwhere combines nicely with other selectors:\n\npenguins |&gt; select(where(is.numeric) & ends_with(\"mm\"))"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#rename",
    "href": "slides/2025-04-01/02_dplyr_select.html#rename",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "rename",
    "text": "rename\nUse rename to change column names:\n\npenguins |&gt; \n    select(where(is.numeric) & ends_with(\"mm\")) |&gt;\n    rename(`Bill Length (mm)`=bill_length_mm, \n           `Bill Depth (mm)`=bill_depth_mm,\n           `Flipper Length (mm)`=flipper_length_mm)\n\n\n\n\n\n\nBill Length (mm)\nBill Depth (mm)\nFlipper Length (mm)\n\n\n\n\n39.1\n18.7\n181\n\n\n39.5\n17.4\n186\n\n\n40.3\n18.0\n195\n\n\nNA\nNA\nNA\n\n\n36.7\n19.3\n193\n\n\n39.3\n20.6\n190\n\n\n\n\n\n\n\nParticularly useful for formatting output"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#rename-1",
    "href": "slides/2025-04-01/02_dplyr_select.html#rename-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "rename",
    "text": "rename\nrename tips:\n\n\nUse backticks (`) to surround ‘non-syntactic’ names\nUseful to make names useful R variables pre-analysis\nUseful to make names proper English post-analysis"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#looking-ahead",
    "href": "slides/2025-04-01/02_dplyr_select.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nSelecting Columns ✅\nSelecting Rows\nTransforming Columns"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#learning-more",
    "href": "slides/2025-04-01/02_dplyr_select.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 3 - “Data Transformation” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#where-are-we",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#goals-for-this-video",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nmutate rows to safely transform data\nPerform conditional transformations\nCompute running and cumulative statistics\nApply simple aggregation and window functions"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate",
    "text": "mutate\nSo far we have only subsetted our data. Can we create new columns?\n\n\npenguins |&gt; \n    mutate(body_mass_lb = body_mass_g / 453) |&gt;\n    select(contains(\"body\"))\n\n# A tibble: 344 × 2\n   body_mass_g body_mass_lb\n         &lt;int&gt;        &lt;dbl&gt;\n 1        3750         8.28\n 2        3800         8.39\n 3        3250         7.17\n 4          NA        NA   \n 5        3450         7.62\n 6        3650         8.06\n 7        3625         8.00\n 8        4675        10.3 \n 9        3475         7.67\n10        4250         9.38\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate-1",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate",
    "text": "mutate\n\npenguins |&gt; \n    mutate(body_mass_lb = body_mass_g / 453) |&gt;\n    select(contains(\"body\"))\n\nSimilar syntax to select and filter\n\nPut name on the left of the =\nIf you omit a name, unhelpful default:\n\npenguins |&gt; mutate(body_mass_g / 453) |&gt; select(contains(\"body\"))\n\n\n\n# A tibble: 344 × 2\n  body_mass_g `body_mass_g/453`\n        &lt;int&gt;             &lt;dbl&gt;\n1        3750              8.28\n2        3800              8.39\n3        3250              7.17\n# ℹ 341 more rows"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate-2",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate",
    "text": "mutate\nCan change columns “in place” by careful renaming:\n\npenguins |&gt; \n    select(where(is.character) | where(is.factor)) |&gt;\n    mutate(species = toupper(species)) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 3\n  species island    sex   \n  &lt;chr&gt;   &lt;fct&gt;     &lt;fct&gt; \n1 ADELIE  Torgersen male  \n2 ADELIE  Torgersen female\n3 ADELIE  Torgersen female\n4 ADELIE  Torgersen &lt;NA&gt;  \n5 ADELIE  Torgersen female\n\n\n\nUse this sparingly - destroys ‘original’ values"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate-3",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate",
    "text": "mutate\nCan do arbitrary vectorized operations and access recently created columns:\n\npenguins |&gt; \n    select(where(is.numeric)) |&gt;\n    mutate(weight_kg = body_mass_g / 1000,\n           height_m = body_height_mm / 1000, \n           bmi = weight_kg / height_m^2)\n\n(Sadly, don’t actually have height data)"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate-helpers",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate-helpers",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate helpers",
    "text": "mutate helpers\n?mutate lists several helpful functions:\n\nif_else, case_when\ncumsum, cummean\nlead, lag\nmin_rank, dense_rank"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#complex-transforms",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#complex-transforms",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Complex Transforms",
    "text": "Complex Transforms\nUse case_when for transforms that depend on other values:\n\npenguins |&gt;\n  mutate(cuteness_level = \n    case_when(\n        species == \"Adelie\" ~ \"Exceptionally\", \n        species == \"Gentoo\" ~ \"Remarkably\",\n        species == \"Chinstrap\" ~ \"Stunningly\"\n    )) |&gt;\n  select(species, cuteness_level, body_mass_g) |&gt; \n  slice_head(n=5)\n\n# A tibble: 5 × 3\n  species cuteness_level body_mass_g\n  &lt;fct&gt;   &lt;chr&gt;                &lt;int&gt;\n1 Adelie  Exceptionally         3750\n2 Adelie  Exceptionally         3800\n3 Adelie  Exceptionally         3250\n4 Adelie  Exceptionally           NA\n5 Adelie  Exceptionally         3450"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#complex-transforms-1",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#complex-transforms-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Complex Transforms",
    "text": "Complex Transforms\ncase_when specifies a series of tests. First one passed is used:\n\ncase_when(\n    test1 ~ value1, \n    test2 ~ value2\n    ...\n)\n\nUse TRUE for default values"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#cumulative-stats",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#cumulative-stats",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Cumulative Stats",
    "text": "Cumulative Stats\nThe cum* family of functions compute cumulative values\n\ncummean\ncummax, cummin\ncumsum, cumprod\n\n\nThese depend on the order of the data\nYou may want to use arrange to order data first"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#cumulative-stats-1",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#cumulative-stats-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Cumulative Stats",
    "text": "Cumulative Stats\n\npenguins |&gt;\n    arrange(body_mass_g) |&gt; # Defaults to increasing; use desc() to reverse\n    mutate(average_mass = cummean(body_mass_g), \n           number_of_penguins = row_number()) |&gt;\n    select(species, \n           body_mass_g,\n           average_mass,  \n           number_of_penguins) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 4\n  species   body_mass_g average_mass number_of_penguins\n  &lt;fct&gt;           &lt;int&gt;        &lt;dbl&gt;              &lt;int&gt;\n1 Chinstrap        2700         2700                  1\n2 Adelie           2850         2775                  2\n3 Adelie           2850         2800                  3\n4 Adelie           2900         2825                  4\n5 Adelie           2900         2840                  5\n\n\nRolling statistics are a bit trickier - look into RcppRoll"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#ranking",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#ranking",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Ranking",
    "text": "Ranking\nTo assign ranks, use the *_rank functions:\n\npenguins |&gt;\n    mutate(body_mass_rank = min_rank(body_mass_g)) |&gt;\n    select(contains(\"body_mass\")) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 2\n  body_mass_g body_mass_rank\n        &lt;int&gt;          &lt;int&gt;\n1        3750            121\n2        3800            130\n3        3250             29\n4          NA             NA\n5        3450             61\n\n\n\nmin_rank and dense_rank differ in treatment of ties"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#ranking-1",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#ranking-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Ranking",
    "text": "Ranking\npercent_rank and cume_dist for CDF-type ranking\n\npenguins |&gt;\n    mutate(body_mass_pct_rank = round(percent_rank(body_mass_g), 2),\n           body_mass_cdf      = round(cume_dist(body_mass_g), 2)) |&gt;\n    select(contains(\"body_mass\")) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 3\n  body_mass_g body_mass_pct_rank body_mass_cdf\n        &lt;int&gt;              &lt;dbl&gt;         &lt;dbl&gt;\n1        3750               0.35          0.37\n2        3800               0.38          0.41\n3        3250               0.08          0.1 \n4          NA              NA            NA   \n5        3450               0.18          0.2 \n\n\nCDF: cume_dist \\(\\leq\\) vs percent_rank \\(&lt;\\)"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#ranking-2",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#ranking-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Ranking",
    "text": "Ranking\nUse ntile to split data into quartiles, deciles, etc.\n\npenguins |&gt;\n    mutate(body_mass_decile = ntile(body_mass_g, 10)) |&gt;\n    select(contains(\"body_mass\")) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 2\n  body_mass_g body_mass_decile\n        &lt;int&gt;            &lt;int&gt;\n1        3750                4\n2        3800                4\n3        3250                1\n4          NA               NA\n5        3450                2"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#looking-ahead",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nSelecting Columns ✅\nSelecting Rows ✅\nTransforming Columns ✅\n\n\nNow it’s your turn!\nTime to apply these tools to flights leaving NYC"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#learning-more",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 3 - “Data Transformation” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#where-are-we",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#goals-for-this-video",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nCombine multiple rows using summarize\nCompute overall and group-wise summary statistics"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#group_by",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by",
    "text": "group_by\nYou have already seen group_by modify the operation of ‘aggregation’ functions:\n\nmin, max\nmean, sum,\nntile\n\netc\n\nNo reduction in data complexity unless combined with filter"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by + summarize",
    "text": "group_by + summarize\ngroup_by and summarize \\(\\implies\\) summary statistics\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   avg_mass\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\n\nUnlike filter, these are new rows:\n\nOne row summarizing each group\nNot a subset of old rows"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by + summarize",
    "text": "group_by + summarize\n\n\n# A tibble: 3 × 2\n  species   avg_mass\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\nWhat happened to other features (e.g., flipper_length_mm)?\n\nsummarize only keeps:\n\nGrouping variables (species)\nCreated variables (avg_mass)\n\nAll other data is dropped"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize-2",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by + summarize",
    "text": "group_by + summarize\nCan perform multiple summaries at once:\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE), \n              sd_mass = sd(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 3\n  species   avg_mass sd_mass\n  &lt;fct&gt;        &lt;dbl&gt;   &lt;dbl&gt;\n1 Adelie       3701.    459.\n2 Chinstrap    3733.    384.\n3 Gentoo       5076.    504.\n\n\nImportant to do all summaries in one call"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-helpers",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-helpers",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize helpers",
    "text": "summarize helpers\nThe n() function will count the number of rows in a group\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE), \n              n = n(), \n              mass_se = mass_sd / sqrt(n))\n\n# A tibble: 3 × 5\n  species   mass_avg mass_sd     n mass_se\n  &lt;fct&gt;        &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n1 Adelie       3701.    459.   152    37.2\n2 Chinstrap    3733.    384.    68    46.6\n3 Gentoo       5076.    504.   124    45.3"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-helpers-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-helpers-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize helpers",
    "text": "summarize helpers\ncur_group() returns the current group name\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE), \n              n = n(), \n              mass_se = mass_sd / sqrt(n), \n              species_cap = toupper(cur_group()))\n\n# A tibble: 3 × 6\n  species   mass_avg mass_sd     n mass_se species_cap\n  &lt;fct&gt;        &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;      \n1 Adelie       3701.    459.   152    37.2 1          \n2 Chinstrap    3733.    384.    68    46.6 2          \n3 Gentoo       5076.    504.   124    45.3 3          \n\n\nCan also use species directly"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Removes grouping",
    "text": "Removes grouping\nsummarize removes the last level of grouping\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   mass_avg\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\nNo grouping remains"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Removes grouping",
    "text": "Removes grouping\nsummarize removes the last level of grouping\n\npenguins |&gt; \n    group_by(species, sex) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n\n\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex    mass_avg\n  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;\n1 Adelie    female    3369.\n2 Adelie    male      4043.\n3 Adelie    &lt;NA&gt;      3540 \n4 Chinstrap female    3527.\n5 Chinstrap male      3939.\n# ℹ 3 more rows\n\n\nGrouping by species still active"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping-2",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Removes grouping",
    "text": "Removes grouping\nAdvice:\n\ngroup_by should be as close to summarize as possible\nungroup and re-group_by defensively"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#column-names",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#column-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Column names",
    "text": "Column names\nLike mutate, give summarize column names\nDefaults are unhelpful:\n\npenguins |&gt; \n    group_by(species) |&gt;\n    summarize(sd(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   `sd(body_mass_g, na.rm = TRUE)`\n  &lt;fct&gt;                               &lt;dbl&gt;\n1 Adelie                               459.\n2 Chinstrap                            384.\n3 Gentoo                               504."
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#multiple-columns",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#multiple-columns",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Multiple columns",
    "text": "Multiple columns\nRemember the selection helpers from select\n\npenguins |&gt; \n    select(where(is.numeric)) |&gt;\n    print(n=4)\n\n# A tibble: 344 × 5\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;int&gt;\n1           39.1          18.7               181        3750  2007\n2           39.5          17.4               186        3800  2007\n3           40.3          18                 195        3250  2007\n4           NA            NA                  NA          NA  2007\n# ℹ 340 more rows"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#multiple-columns-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#multiple-columns-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Multiple columns",
    "text": "Multiple columns\nCan be used inside summarize as well\n\nsafe_mean &lt;- function(x) mean(x, na.rm=TRUE)\npenguins |&gt; \n    group_by(species) |&gt;\n    summarize(across(where(is.numeric), safe_mean))\n\n# A tibble: 3 × 6\n  species   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie              38.8          18.3              190.       3701. 2008.\n2 Chinstrap           48.8          18.4              196.       3733. 2008.\n3 Gentoo              47.5          15.0              217.       5076. 2008."
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#without-group_by",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#without-group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Without group_by",
    "text": "Without group_by\nWithout group_by, summarize takes summaries of the entire data set:\n\npenguins |&gt; \n    summarize(n=n(), \n              across(where(is.numeric), safe_mean))\n\n# A tibble: 1 × 6\n      n bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1   344           43.9          17.2              201.       4202. 2008."
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-and-group_by",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-and-group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize and group_by",
    "text": "summarize and group_by\nsummarize computes summary statistics of a population\n\nmeans, standard deviations, counts, etc.\n\ngroup_by changes these to conditional summary statistics\n\nE.g., mean of body mass, conditional on adelie species\n\n\nMany steps of real data analysis fits this pattern\nIf you dive deeper into split-apply-combine, can determine group-wise models as well (e.g., different trends for different groups)"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#looking-ahead",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables\nReshape Tables with pivot Operations"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#learning-more",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Sections 3.5-3.6 - “Groups” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#where-are-we",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#goals-for-this-video",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nIdentify wide and long format data\nPivot data from wide to long format\nPivot data from long to wide format"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\nRecall our Baruch enrollment example of tidy data ✅\n\n\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-1",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\nWe can plot this\n\nggplot(D, aes(x=Semester, y=Enrollment, color=Course)) +\n    geom_jitter() + theme_bw()"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-2",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\nNot easy to plot both Enrollment and Cap columns\n\nNeed data in this “untidy” format\n\n\n# A tibble: 12 × 4\n   Semester Course     Number Type      \n   &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     \n 1 Fall     Accounting    200 Enrollment\n 2 Fall     Accounting    250 Cap       \n 3 Fall     Law           100 Enrollment\n 4 Fall     Law           125 Cap       \n 5 Fall     Statistics    200 Enrollment\n 6 Fall     Statistics    200 Cap       \n 7 Spring   Accounting    300 Enrollment\n 8 Spring   Accounting    350 Cap       \n 9 Spring   Law            50 Enrollment\n10 Spring   Law           100 Cap       \n11 Spring   Statistics    400 Enrollment\n12 Spring   Statistics    400 Cap"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-3",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\n\nggplot(D2, aes(x=Semester, y=Number, shape=Type, color=Course)) +\n    geom_jitter() + theme_bw() + theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#wide-and-long-data",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#wide-and-long-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Wide and Long Data",
    "text": "Wide and Long Data\nWe switched from a “wide” format to a “long” format\n\nNot absolute terms, relative to each other\nWide has more columns (tidier)\nLong is easier for certain plots"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#pivots",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#pivots",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Pivots",
    "text": "Pivots\npivot operations can be used to switch between formats\n\npivot_longer combine columns\npivot_wider split a column\n\nSyntax is hard to remember:\n\nuse ?pivot_wider and ?pivot_longer"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#wide-to-long",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#wide-to-long",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Wide to Long",
    "text": "Wide to Long\n\npivot_longer(D, \n             cols=c(Enrollment, Cap), \n             names_to=\"Type\",  # Quote since not a current column\n             values_to=\"Number\")\n\n\n\n# A tibble: 12 × 4\n  Semester Course     Type       Number\n  &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt;\n1 Fall     Accounting Enrollment    200\n2 Fall     Accounting Cap           250\n3 Fall     Law        Enrollment    100\n# ℹ 9 more rows\n\n\n\ncols to pivot\nnames_to: column where to put (old) column name\nvalues_to: column where to store old values"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#long-to-wide",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#long-to-wide",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Long to Wide",
    "text": "Long to Wide\n\npivot_wider(D2, \n            id_cols = c(Semester, Course), \n            values_from = Number, \n            names_from = Type)\n\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400\n\n\n\nid_cols: columns kept in place\nnames_from: column where to get new column names\nvalues_from: column where to get values"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#looking-ahead",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables ✅\nReshape Tables with pivot Operations ✅\n\n\nNow it’s your turn!"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#learning-more",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 5 - “Tidying” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-29/10_python_install.html#where-are-we",
    "href": "slides/2025-04-29/10_python_install.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-29/10_python_install.html#goals-for-this-video",
    "href": "slides/2025-04-29/10_python_install.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:"
  },
  {
    "objectID": "slides/2025-04-29/10_python_install.html#looking-ahead",
    "href": "slides/2025-04-29/10_python_install.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead"
  },
  {
    "objectID": "slides/2025-04-29/10_python_install.html#learning-more",
    "href": "slides/2025-04-29/10_python_install.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#where-are-we",
    "href": "slides/2025-04-29/12_python_basics_control.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#goals-for-this-video",
    "href": "slides/2025-04-29/12_python_basics_control.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nBlock-based Control Flow\nIterating over Containers\nFunction Calls\nDefining Functions"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#looking-ahead",
    "href": "slides/2025-04-29/12_python_basics_control.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nUse Basic Syntax ✅\nManipulate Containers ✅\nIterate on Containers ✅\nCall Functions ✅\nControl Flow ✅\n\n\nNext, moving beyond basic python to data analysis:\n\nPackages\nThe “Object Model”\nWeb Scraping and Data Import"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#learning-more",
    "href": "slides/2025-04-29/12_python_basics_control.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nSee Chapter 3 of Python for Data Science"
  },
  {
    "objectID": "slides/2025-05-13/14_python_packages.html#where-are-we",
    "href": "slides/2025-05-13/14_python_packages.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-05-13/14_python_packages.html#goals-for-this-video",
    "href": "slides/2025-05-13/14_python_packages.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:"
  },
  {
    "objectID": "slides/2025-05-13/14_python_packages.html#looking-ahead",
    "href": "slides/2025-05-13/14_python_packages.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead"
  },
  {
    "objectID": "slides/2025-05-13/14_python_packages.html#learning-more",
    "href": "slides/2025-05-13/14_python_packages.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html",
    "href": "slides/2025-04-29/09_modeling.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\n\nStatistical Analysis\n\nTidy Data Manipulation\npython Basics\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nFormula Syntax\nClassical Statistical Models with R\nKey Accessor Functions\nPredictive Modeling in R\n\n\n\n\n\nR was designed for statistical analysis (originally called S)\n. . .\nMajor contributions\n\ndata.frame / tidy structure\nFormula language (“Wilkinson-Rogers notation”)\n\n\n\n\nIn R, a formula is a special object defined by a ~\n. . .\nMost common structure\n\ny ~ x1 + x2\n\nPredict variable y using x1 and x2\n. . .\n\nModern R uses formulas in many other contexts\nVarious extensions provided by packages\n\n\n\n\nBasic modeling function: lm (linear model)\n\nlibrary(palmerpenguins)\nlm(body_mass_g ~ flipper_length_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm  \n         -5780.83              49.69  \n\n\n\n\n\n\nlm(body_mass_g ~ flipper_length_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm  \n         -5780.83              49.69  \n\n\n\nProvide model (formula) and data (data.frame) instead of \\(X, y\\)\nBy default automatically includes an intercept term\n\n\n\n\n\nlm(body_mass_g ~ flipper_length_mm + species, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm + species, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm   speciesChinstrap      speciesGentoo  \n         -4031.48              40.71            -206.51             266.81  \n\n\nAutomatically:\n\nEncodes categorical (factor) variables\n\n?C for details\n\nRemoves extra / redundant columns\n\n\n\n\n\nlm(body_mass_g ~ flipper_length_mm*bill_depth_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * bill_depth_mm, \n    data = penguins)\n\nCoefficients:\n                    (Intercept)                flipper_length_mm  \n                     -36097.064                          196.074  \n                  bill_depth_mm  flipper_length_mm:bill_depth_mm  \n                       1771.796                           -8.596  \n\n\n\n* creates both ‘main’ effects and interactions\n\n\n\n\n\nlm(body_mass_g ~ flipper_length_mm*species, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * species, data = penguins)\n\nCoefficients:\n                       (Intercept)                   flipper_length_mm  \n                         -2535.837                              32.832  \n                  speciesChinstrap                       speciesGentoo  \n                          -501.359                           -4251.444  \nflipper_length_mm:speciesChinstrap     flipper_length_mm:speciesGentoo  \n                             1.742                              21.791  \n\n\n\n* of continuous and categorical creates ANCOVA\n\n\n\n\nMany extensions\n\nlibrary(mgcv)\n\nLoading required package: nlme\n\n\n\nAttaching package: 'nlme'\n\n\nThe following object is masked from 'package:dplyr':\n\n    collapse\n\n\nThis is mgcv 1.9-3. For overview type 'help(\"mgcv-package\")'.\n\ngam(body_mass_g ~ s(flipper_length_mm) + s(bill_depth_mm, by=species), data=penguins)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nbody_mass_g ~ s(flipper_length_mm) + s(bill_depth_mm, by = species)\n\nEstimated degrees of freedom:\n1.56 1.96 1.00 4.39  total = 9.91 \n\nGCV score: 106441.7     \n\n\nFits a mixed-effect non-linear regression\n\n\n\nHelper functions to access fitted models:\n\nm &lt;- lm(body_mass_g ~ flipper_length_mm*bill_depth_mm + species, data=penguins)\ncoef(m)\n\n                    (Intercept)               flipper_length_mm \n                  -4844.4526376                      27.3153209 \n                  bill_depth_mm                speciesChinstrap \n                    200.0652179                    -131.5598847 \n                  speciesGentoo flipper_length_mm:bill_depth_mm \n                   1283.9149548                      -0.0900381 \n\n\n\n\n\n\nsummary(m)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * bill_depth_mm + \n    species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-900.40 -238.12  -40.12  228.86 1085.32 \n\nCoefficients:\n                                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                     -4.844e+03  5.298e+03  -0.914   0.3611    \nflipper_length_mm                2.732e+01  2.699e+01   1.012   0.3123    \nbill_depth_mm                    2.001e+02  2.945e+02   0.679   0.4973    \nspeciesChinstrap                -1.316e+02  5.192e+01  -2.534   0.0117 *  \nspeciesGentoo                    1.284e+03  1.572e+02   8.166 6.51e-15 ***\nflipper_length_mm:bill_depth_mm -9.004e-02  1.495e+00  -0.060   0.9520    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 331.3 on 336 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.8319,    Adjusted R-squared:  0.8294 \nF-statistic: 332.5 on 5 and 336 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\nIn-sample / training prediction:\n\npredict(m)\n\n       1        2        3        5        6        7        8        9 \n3536.088 3425.933 3767.175 3953.280 4114.393 3370.697 4059.188 3734.055 \n      10       11       12       13       14       15       16       17 \n4041.210 3370.937 3253.055 3359.674 4249.574 4409.196 3473.547 3949.683 \n      18       19       20       21       22       23       24       25 \n4310.849 3557.933 4380.573 3282.907 3510.456 3832.665 3528.570 3234.669 \n      26       27       28       29       30       31       32       33 \n3726.523 3568.992 3543.295 3286.946 3547.228 3091.116 3348.770 3550.685 \n      34       35       36       37       38       39       40       41 \n3649.683 3584.667 4358.365 4004.618 3473.685 3646.349 3686.382 3433.145 \n      42       43       44       45       46       47       48       49 \n3840.178 3627.582 4102.980 3308.480 3785.068 3616.823 3521.615 3620.406 \n      50       51       52       53       54       55       56       57 \n4249.574 3480.928 3752.137 3620.406 4168.735 3579.941 3774.117 3444.264 \n      58       59       60       61       62       63       64       65 \n3861.936 3150.175 3942.338 3308.480 4332.949 3326.821 3726.647 3319.386 \n      66       67       68       69       70       71       72       73 \n3690.091 3438.661 3788.765 3382.561 4099.392 3821.660 3711.885 3646.936 \n      74       75       76       77       78       79       80       81 \n3982.659 3547.223 3858.429 3444.955 3741.432 3213.485 3967.934 3466.569 \n      82       83       84       85       86       87       88       89 \n3719.903 3708.201 3971.549 3627.823 4161.456 3913.139 3722.836 3832.665 \n      90       91       92       93       94       95       96       97 \n3785.068 3947.038 4042.282 3345.161 3554.255 3433.358 4264.409 3748.477 \n      98       99      100      101      102      103      104      105 \n3884.079 2980.693 3781.480 3671.813 4336.307 3091.663 4004.618 3825.399 \n     106      107      108      109      110      111      112      113 \n3649.683 3724.236 4004.618 3223.682 4000.892 3570.903 4084.993 3660.980 \n     114      115      116      117      118      119      120      121 \n4092.056 4158.140 3847.595 3404.175 4325.323 3429.959 3722.836 3415.036 \n     122      123      124      125      126      127      128      129 \n4172.287 3094.759 4037.976 3150.955 4052.101 3591.249 3821.927 3499.815 \n     130      131      132      133      134      135      136      137 \n4152.595 3620.406 4037.358 3807.130 3961.028 3488.327 3547.223 3572.963 \n     138      139      140      141      142      143      144      145 \n4277.969 3235.117 3697.517 3551.367 3415.036 3129.468 3455.744 3470.758 \n     146      147      148      149      150      151      152      153 \n3638.615 3748.477 3557.933 3730.674 3734.055 3396.713 4012.327 4593.082 \n     154      155      156      157      158      159      160      161 \n5645.496 4729.996 5136.843 4932.508 4621.302 4846.576 5180.825 4577.078 \n     162      163      164      165      166      167      168      169 \n5095.145 4761.861 5247.505 4761.861 4898.577 4820.575 5201.160 4621.302 \n     170      171      172      173      174      175      176      177 \n5214.684 4776.450 5222.623 4974.450 4932.508 4880.489 5167.427 4679.518 \n     178      179      180      181      182      183      184      185 \n5040.932 4922.395 5022.862 4766.228 5206.763 5258.638 4722.075 4724.430 \n     186      187      188      189      190      191      192      193 \n5771.046 5116.634 5387.019 4735.779 5541.519 4587.236 4968.045 4605.370 \n     194      195      196      197      198      199      200      201 \n5462.316 4657.534 5048.826 5366.684 4876.212 4693.765 5444.335 4663.424 \n     202      203      204      205      206      207      208      209 \n5167.427 4748.112 4990.454 4784.344 5282.509 4966.475 5224.788 4641.637 \n     210      211      212      213      214      215      216      217 \n5152.685 4750.440 5310.513 4623.504 5160.634 4798.020 5563.784 4982.443 \n     218      219      220      221      222      223      224      225 \n5735.175 4888.419 5601.704 5008.480 5230.580 5048.826 5286.750 5286.750 \n     226      227      228      229      230      231      232      233 \n5038.686 5048.826 5591.689 4722.075 5387.019 4806.013 5482.561 4854.479 \n     234      235      236      237      238      239      240      241 \n5286.750 4872.577 5418.451 4727.795 5773.337 4992.494 4956.406 4763.990 \n     242      243      244      245      246      247      248      249 \n5771.046 5100.756 5737.430 4854.479 5454.431 4942.658 5434.276 5193.320 \n     250      251      252      253      254      255      256      257 \n5132.584 4602.212 5552.219 5126.721 5719.477 5113.215 5360.403 4832.086 \n     258      259      260      261      262      263      264      265 \n5221.639 4838.691 5270.998 4659.771 4885.198 5084.950 5547.870 5007.110 \n     266      267      268      269      270      271      273      274 \n5645.496 4912.317 5591.689 5201.160 5420.707 4761.861 4896.367 5330.669 \n     275      276      277      278      279      280      281      282 \n4908.772 5169.908 3540.254 3934.937 3803.451 3583.949 4015.194 3676.252 \n     283      284      285      286      287      288      289      290 \n3235.614 3723.470 3799.872 4058.951 3547.688 4029.896 3250.283 3807.980 \n     291      292      293      294      295      296      297      298 \n3342.480 4080.931 4051.660 3239.137 3616.917 3672.117 3147.253 3441.403 \n     299      300      301      302      303      304      305      306 \n3173.539 3839.989 3617.364 3869.332 3836.911 3946.146 3496.263 4255.776 \n     307      308      309      310      311      312      313      314 \n3173.539 4299.292 3191.862 3986.602 3745.120 3519.817 3690.368 4510.159 \n     315      316      317      318      319      320      321      322 \n3302.642 4237.616 4292.771 3338.444 3861.969 3478.892 3643.068 3880.767 \n     323      324      325      326      327      328      329      330 \n3488.846 4361.987 3558.318 3585.133 3446.958 3971.751 3456.344 4150.211 \n     331      332      333      334      335      336      337      338 \n3301.799 3832.867 3276.822 4186.569 3960.980 3865.558 4190.532 3206.875 \n     339      340      341      342      343      344 \n3453.107 4270.520 3833.665 3620.764 4202.192 3840.266 \n\n\n\n\n\nOut-of-sample / test prediction:\n\ntoppenguins &lt;- penguins |&gt; slice_max(body_mass_g, n=10)\npredict(m, newdata=toppenguins)\n\n       1        2        3        4        5        6        7        8 \n5214.684 5771.046 5387.019 5420.707 5482.561 5547.870 4898.577 5201.160 \n       9       10       11 \n5591.689 5601.704 5591.689 \n\n\n\n\n\nFor just lm:\n\nmethods(class=\"lm\")\n\n [1] add1           alias          anova          case.names     coerce        \n [6] confint        cooks.distance deviance       dfbeta         dfbetas       \n[11] drop1          dummy.coef     effects        extractAIC     family        \n[16] formula        fortify        hatvalues      influence      initialize    \n[21] kappa          labels         logLik         model.frame    model.matrix  \n[26] nobs           plot           predict        print          proj          \n[31] qqnorm         qr             residuals      rstandard      rstudent      \n[36] show           simulate       slotsFromS3    summary        variable.names\n[41] vcov          \nsee '?methods' for accessing help and source code\n\n\nEven more for other models"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#formula-notation",
    "href": "slides/2025-04-29/09_modeling.html#formula-notation",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Formula Notation",
    "text": "Formula Notation\nR was designed for statistical analysis (originally called S)\n\nMajor contributions\n\ndata.frame / tidy structure\nFormula language (“Wilkinson-Rogers notation”)"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#formula-notation-1",
    "href": "slides/2025-04-29/09_modeling.html#formula-notation-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Formula Notation",
    "text": "Formula Notation\nIn R, a formula is a special object defined by a ~\n\nMost common structure\n\ny ~ x1 + x2\n\nPredict variable y using x1 and x2\n\n\n\nModern R uses formulas in many other contexts\nVarious extensions provided by packages"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#modeling-functions",
    "href": "slides/2025-04-29/09_modeling.html#modeling-functions",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\nBasic modeling function: lm (linear model)\n\nlibrary(palmerpenguins)\nlm(body_mass_g ~ flipper_length_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm  \n         -5780.83              49.69"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#modeling-functions-1",
    "href": "slides/2025-04-29/09_modeling.html#modeling-functions-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\n\nlm(body_mass_g ~ flipper_length_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm  \n         -5780.83              49.69  \n\n\n\nProvide model (formula) and data (data.frame) instead of \\(X, y\\)\nBy default automatically includes an intercept term"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#modeling-functions-2",
    "href": "slides/2025-04-29/09_modeling.html#modeling-functions-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\n\nlm(body_mass_g ~ flipper_length_mm + species, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm + species, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm   speciesChinstrap      speciesGentoo  \n         -4031.48              40.71            -206.51             266.81  \n\n\nAutomatically:\n\nEncodes categorical (factor) variables\n\n?C for details\n\nRemoves extra / redundant columns"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#modeling-functions-3",
    "href": "slides/2025-04-29/09_modeling.html#modeling-functions-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\n\nlm(body_mass_g ~ flipper_length_mm*bill_depth_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * bill_depth_mm, \n    data = penguins)\n\nCoefficients:\n                    (Intercept)                flipper_length_mm  \n                     -36097.064                          196.074  \n                  bill_depth_mm  flipper_length_mm:bill_depth_mm  \n                       1771.796                           -8.596  \n\n\n\n* creates both ‘main’ effects and interactions"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#modeling-functions-4",
    "href": "slides/2025-04-29/09_modeling.html#modeling-functions-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\n\nlm(body_mass_g ~ flipper_length_mm*species, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * species, data = penguins)\n\nCoefficients:\n                       (Intercept)                   flipper_length_mm  \n                         -2535.837                              32.832  \n                  speciesChinstrap                       speciesGentoo  \n                          -501.359                           -4251.444  \nflipper_length_mm:speciesChinstrap     flipper_length_mm:speciesGentoo  \n                             1.742                              21.791  \n\n\n\n* of continuous and categorical creates ANCOVA"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#modeling-functions-5",
    "href": "slides/2025-04-29/09_modeling.html#modeling-functions-5",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\nMany extensions\n\nlibrary(mgcv)\n\nLoading required package: nlme\n\n\n\nAttaching package: 'nlme'\n\n\nThe following object is masked from 'package:dplyr':\n\n    collapse\n\n\nThis is mgcv 1.9-3. For overview type 'help(\"mgcv-package\")'.\n\ngam(body_mass_g ~ s(flipper_length_mm) + s(bill_depth_mm, by=species), data=penguins)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nbody_mass_g ~ s(flipper_length_mm) + s(bill_depth_mm, by = species)\n\nEstimated degrees of freedom:\n1.56 1.96 1.00 4.39  total = 9.91 \n\nGCV score: 106441.7     \n\n\nFits a mixed-effect non-linear regression"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#accessors",
    "href": "slides/2025-04-29/09_modeling.html#accessors",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\nHelper functions to access fitted models:\n\nm &lt;- lm(body_mass_g ~ flipper_length_mm*bill_depth_mm + species, data=penguins)\ncoef(m)\n\n                    (Intercept)               flipper_length_mm \n                  -4844.4526376                      27.3153209 \n                  bill_depth_mm                speciesChinstrap \n                    200.0652179                    -131.5598847 \n                  speciesGentoo flipper_length_mm:bill_depth_mm \n                   1283.9149548                      -0.0900381"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#accessors-1",
    "href": "slides/2025-04-29/09_modeling.html#accessors-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\n\nsummary(m)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * bill_depth_mm + \n    species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-900.40 -238.12  -40.12  228.86 1085.32 \n\nCoefficients:\n                                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                     -4.844e+03  5.298e+03  -0.914   0.3611    \nflipper_length_mm                2.732e+01  2.699e+01   1.012   0.3123    \nbill_depth_mm                    2.001e+02  2.945e+02   0.679   0.4973    \nspeciesChinstrap                -1.316e+02  5.192e+01  -2.534   0.0117 *  \nspeciesGentoo                    1.284e+03  1.572e+02   8.166 6.51e-15 ***\nflipper_length_mm:bill_depth_mm -9.004e-02  1.495e+00  -0.060   0.9520    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 331.3 on 336 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.8319,    Adjusted R-squared:  0.8294 \nF-statistic: 332.5 on 5 and 336 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#accessors-2",
    "href": "slides/2025-04-29/09_modeling.html#accessors-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\nIn-sample / training prediction:\n\npredict(m)\n\n       1        2        3        5        6        7        8        9 \n3536.088 3425.933 3767.175 3953.280 4114.393 3370.697 4059.188 3734.055 \n      10       11       12       13       14       15       16       17 \n4041.210 3370.937 3253.055 3359.674 4249.574 4409.196 3473.547 3949.683 \n      18       19       20       21       22       23       24       25 \n4310.849 3557.933 4380.573 3282.907 3510.456 3832.665 3528.570 3234.669 \n      26       27       28       29       30       31       32       33 \n3726.523 3568.992 3543.295 3286.946 3547.228 3091.116 3348.770 3550.685 \n      34       35       36       37       38       39       40       41 \n3649.683 3584.667 4358.365 4004.618 3473.685 3646.349 3686.382 3433.145 \n      42       43       44       45       46       47       48       49 \n3840.178 3627.582 4102.980 3308.480 3785.068 3616.823 3521.615 3620.406 \n      50       51       52       53       54       55       56       57 \n4249.574 3480.928 3752.137 3620.406 4168.735 3579.941 3774.117 3444.264 \n      58       59       60       61       62       63       64       65 \n3861.936 3150.175 3942.338 3308.480 4332.949 3326.821 3726.647 3319.386 \n      66       67       68       69       70       71       72       73 \n3690.091 3438.661 3788.765 3382.561 4099.392 3821.660 3711.885 3646.936 \n      74       75       76       77       78       79       80       81 \n3982.659 3547.223 3858.429 3444.955 3741.432 3213.485 3967.934 3466.569 \n      82       83       84       85       86       87       88       89 \n3719.903 3708.201 3971.549 3627.823 4161.456 3913.139 3722.836 3832.665 \n      90       91       92       93       94       95       96       97 \n3785.068 3947.038 4042.282 3345.161 3554.255 3433.358 4264.409 3748.477 \n      98       99      100      101      102      103      104      105 \n3884.079 2980.693 3781.480 3671.813 4336.307 3091.663 4004.618 3825.399 \n     106      107      108      109      110      111      112      113 \n3649.683 3724.236 4004.618 3223.682 4000.892 3570.903 4084.993 3660.980 \n     114      115      116      117      118      119      120      121 \n4092.056 4158.140 3847.595 3404.175 4325.323 3429.959 3722.836 3415.036 \n     122      123      124      125      126      127      128      129 \n4172.287 3094.759 4037.976 3150.955 4052.101 3591.249 3821.927 3499.815 \n     130      131      132      133      134      135      136      137 \n4152.595 3620.406 4037.358 3807.130 3961.028 3488.327 3547.223 3572.963 \n     138      139      140      141      142      143      144      145 \n4277.969 3235.117 3697.517 3551.367 3415.036 3129.468 3455.744 3470.758 \n     146      147      148      149      150      151      152      153 \n3638.615 3748.477 3557.933 3730.674 3734.055 3396.713 4012.327 4593.082 \n     154      155      156      157      158      159      160      161 \n5645.496 4729.996 5136.843 4932.508 4621.302 4846.576 5180.825 4577.078 \n     162      163      164      165      166      167      168      169 \n5095.145 4761.861 5247.505 4761.861 4898.577 4820.575 5201.160 4621.302 \n     170      171      172      173      174      175      176      177 \n5214.684 4776.450 5222.623 4974.450 4932.508 4880.489 5167.427 4679.518 \n     178      179      180      181      182      183      184      185 \n5040.932 4922.395 5022.862 4766.228 5206.763 5258.638 4722.075 4724.430 \n     186      187      188      189      190      191      192      193 \n5771.046 5116.634 5387.019 4735.779 5541.519 4587.236 4968.045 4605.370 \n     194      195      196      197      198      199      200      201 \n5462.316 4657.534 5048.826 5366.684 4876.212 4693.765 5444.335 4663.424 \n     202      203      204      205      206      207      208      209 \n5167.427 4748.112 4990.454 4784.344 5282.509 4966.475 5224.788 4641.637 \n     210      211      212      213      214      215      216      217 \n5152.685 4750.440 5310.513 4623.504 5160.634 4798.020 5563.784 4982.443 \n     218      219      220      221      222      223      224      225 \n5735.175 4888.419 5601.704 5008.480 5230.580 5048.826 5286.750 5286.750 \n     226      227      228      229      230      231      232      233 \n5038.686 5048.826 5591.689 4722.075 5387.019 4806.013 5482.561 4854.479 \n     234      235      236      237      238      239      240      241 \n5286.750 4872.577 5418.451 4727.795 5773.337 4992.494 4956.406 4763.990 \n     242      243      244      245      246      247      248      249 \n5771.046 5100.756 5737.430 4854.479 5454.431 4942.658 5434.276 5193.320 \n     250      251      252      253      254      255      256      257 \n5132.584 4602.212 5552.219 5126.721 5719.477 5113.215 5360.403 4832.086 \n     258      259      260      261      262      263      264      265 \n5221.639 4838.691 5270.998 4659.771 4885.198 5084.950 5547.870 5007.110 \n     266      267      268      269      270      271      273      274 \n5645.496 4912.317 5591.689 5201.160 5420.707 4761.861 4896.367 5330.669 \n     275      276      277      278      279      280      281      282 \n4908.772 5169.908 3540.254 3934.937 3803.451 3583.949 4015.194 3676.252 \n     283      284      285      286      287      288      289      290 \n3235.614 3723.470 3799.872 4058.951 3547.688 4029.896 3250.283 3807.980 \n     291      292      293      294      295      296      297      298 \n3342.480 4080.931 4051.660 3239.137 3616.917 3672.117 3147.253 3441.403 \n     299      300      301      302      303      304      305      306 \n3173.539 3839.989 3617.364 3869.332 3836.911 3946.146 3496.263 4255.776 \n     307      308      309      310      311      312      313      314 \n3173.539 4299.292 3191.862 3986.602 3745.120 3519.817 3690.368 4510.159 \n     315      316      317      318      319      320      321      322 \n3302.642 4237.616 4292.771 3338.444 3861.969 3478.892 3643.068 3880.767 \n     323      324      325      326      327      328      329      330 \n3488.846 4361.987 3558.318 3585.133 3446.958 3971.751 3456.344 4150.211 \n     331      332      333      334      335      336      337      338 \n3301.799 3832.867 3276.822 4186.569 3960.980 3865.558 4190.532 3206.875 \n     339      340      341      342      343      344 \n3453.107 4270.520 3833.665 3620.764 4202.192 3840.266"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#accessors-3",
    "href": "slides/2025-04-29/09_modeling.html#accessors-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\nOut-of-sample / test prediction:\n\ntoppenguins &lt;- penguins |&gt; slice_max(body_mass_g, n=10)\npredict(m, newdata=toppenguins)\n\n       1        2        3        4        5        6        7        8 \n5214.684 5771.046 5387.019 5420.707 5482.561 5547.870 4898.577 5201.160 \n       9       10       11 \n5591.689 5601.704 5591.689"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#accessors-4",
    "href": "slides/2025-04-29/09_modeling.html#accessors-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\nFor just lm:\n\nmethods(class=\"lm\")\n\n [1] add1           alias          anova          case.names     coerce        \n [6] confint        cooks.distance deviance       dfbeta         dfbetas       \n[11] drop1          dummy.coef     effects        extractAIC     family        \n[16] formula        fortify        hatvalues      influence      initialize    \n[21] kappa          labels         logLik         model.frame    model.matrix  \n[26] nobs           plot           predict        print          proj          \n[31] qqnorm         qr             residuals      rstandard      rstudent      \n[36] show           simulate       slotsFromS3    summary        variable.names\n[41] vcov          \nsee '?methods' for accessing help and source code\n\n\nEven more for other models"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#agenda",
    "href": "slides/2025-04-29/09_modeling.html#agenda",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Agenda",
    "text": "Agenda\n\nPredictive Modeling with tidymodels\n\nAdapted from Case Study"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#tidymodels",
    "href": "slides/2025-04-29/09_modeling.html#tidymodels",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tidymodels",
    "text": "tidymodels\nStrength of R:\n\nThousands of authors contributing packages to CRAN\n\n\nWeakness of R:\n\nThousands of authors contributing slightly incompatible packages to CRAN\n\n\n\nNo two modeling packages have exactly the same API. Makes changing between interfaces cumbersome"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#tidymodels-1",
    "href": "slides/2025-04-29/09_modeling.html#tidymodels-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tidymodels",
    "text": "tidymodels\ntidymodels attemps to provide a uniform interface to a wide variety of predictive Machine Learning tools\nAdvantages:\n\nEasy to swap out different algorithms to find the best\n\nDisadvantages:\n\nHarder to take advantage of the strengths of each approach\n\n\nI have dedicated my academic life to the differences in these methods, but 99% of the time, “black-box” prediction is good enough. In STA 9890, we get into the weeds - not here."
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#ml-vs-statistical-pipelines",
    "href": "slides/2025-04-29/09_modeling.html#ml-vs-statistical-pipelines",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "ML vs Statistical Pipelines",
    "text": "ML vs Statistical Pipelines\nStatistics / Data Science:\n\nFind the model that fits the data best\nModel should capture all important data features\nInterpretability\nHistory: Grounded in lab sciences where experiments are expensive and data is limited"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#ml-vs-statistical-pipelines-1",
    "href": "slides/2025-04-29/09_modeling.html#ml-vs-statistical-pipelines-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "ML vs Statistical Pipelines",
    "text": "ML vs Statistical Pipelines\nMachine Learning:\n\nFind the model that predicts the data best\nNo “perfect” model - just the best one we’ve found so far\nBlack-box techniques are great, if effective\nHistory: Silicon Valley “at scale”\n\nValidation based on of-of-sample or test predictions"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#validating-predictive-power",
    "href": "slides/2025-04-29/09_modeling.html#validating-predictive-power",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Validating Predictive Power",
    "text": "Validating Predictive Power\nHow to check whether a model predicts well?\n\nNeed more data! But where to get more data?\n\nActually get more data (hard, expensive, slow)\nSplit data into parts - test/training split\nCross-Validation\nResampling\n\n\n\nToday, we’ll primarily use a combination: Test/Train split & Cross-Validation!"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#cross-validation",
    "href": "slides/2025-04-29/09_modeling.html#cross-validation",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Cross-Validation",
    "text": "Cross-Validation\n\nCross-Validation is done on the estimator, not the fitted algorithm"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#tidymodels-2",
    "href": "slides/2025-04-29/09_modeling.html#tidymodels-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tidymodels",
    "text": "tidymodels\ntidymodels workflow:\n\nInitial Split\nPre-Process\nFit (many) models\nSelect best\nRefit\nTest Set Assessment\n\ntidymodels is very punny, so a bit hard to tell which step is which…"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#acquire-data",
    "href": "slides/2025-04-29/09_modeling.html#acquire-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Acquire Data",
    "text": "Acquire Data\n\nlibrary(tidymodels); library(readr)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n\n\n✔ broom        1.0.8     ✔ rsample      1.3.0\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.8     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.1     ✔ yardstick    1.3.2\n✔ recipes      1.3.0     \n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ nlme::collapse()  masks dplyr::collapse()\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n\nhotels &lt;- \n  read_csv(\"https://tidymodels.org/start/case-study/hotels.csv\") |&gt;\n  mutate(across(where(is.character), as.factor))\n\nRows: 50000 Columns: 23\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): hotel, children, meal, country, market_segment, distribution_chan...\ndbl  (11): lead_time, stays_in_weekend_nights, stays_in_week_nights, adults,...\ndate  (1): arrival_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(hotels)\n\nRows: 50,000\nColumns: 23\n$ hotel                          &lt;fct&gt; City_Hotel, City_Hotel, Resort_Hotel, R…\n$ lead_time                      &lt;dbl&gt; 217, 2, 95, 143, 136, 67, 47, 56, 80, 6…\n$ stays_in_weekend_nights        &lt;dbl&gt; 1, 0, 2, 2, 1, 2, 0, 0, 0, 2, 1, 0, 1, …\n$ stays_in_week_nights           &lt;dbl&gt; 3, 1, 5, 6, 4, 2, 2, 3, 4, 2, 2, 1, 2, …\n$ adults                         &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 1, 2, …\n$ children                       &lt;fct&gt; none, none, none, none, none, none, chi…\n$ meal                           &lt;fct&gt; BB, BB, BB, HB, HB, SC, BB, BB, BB, BB,…\n$ country                        &lt;fct&gt; DEU, PRT, GBR, ROU, PRT, GBR, ESP, ESP,…\n$ market_segment                 &lt;fct&gt; Offline_TA/TO, Direct, Online_TA, Onlin…\n$ distribution_channel           &lt;fct&gt; TA/TO, Direct, TA/TO, TA/TO, Direct, TA…\n$ is_repeated_guest              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_cancellations         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_bookings_not_canceled &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ reserved_room_type             &lt;fct&gt; A, D, A, A, F, A, C, B, D, A, A, D, A, …\n$ assigned_room_type             &lt;fct&gt; A, K, A, A, F, A, C, A, D, A, D, D, A, …\n$ booking_changes                &lt;dbl&gt; 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ deposit_type                   &lt;fct&gt; No_Deposit, No_Deposit, No_Deposit, No_…\n$ days_in_waiting_list           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ customer_type                  &lt;fct&gt; Transient-Party, Transient, Transient, …\n$ average_daily_rate             &lt;dbl&gt; 80.75, 170.00, 8.00, 81.00, 157.60, 49.…\n$ required_car_parking_spaces    &lt;fct&gt; none, none, none, none, none, none, non…\n$ total_of_special_requests      &lt;dbl&gt; 1, 3, 2, 1, 4, 1, 1, 1, 1, 1, 0, 1, 0, …\n$ arrival_date                   &lt;date&gt; 2016-09-01, 2017-08-25, 2016-11-19, 20…"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#initial-split",
    "href": "slides/2025-04-29/09_modeling.html#initial-split",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Initial Split",
    "text": "Initial Split\n\n# Stratified sampling to ensure balance\nsplits      &lt;- initial_split(hotels, \n                             strata = children)\n\nhotel_train &lt;- training(splits)\nhotel_test  &lt;- testing(splits)\n\nhotel_train\n\n# A tibble: 37,500 × 23\n   hotel   lead_time stays_in_weekend_nig…¹ stays_in_week_nights adults children\n   &lt;fct&gt;       &lt;dbl&gt;                  &lt;dbl&gt;                &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;   \n 1 City_H…       217                      1                    3      2 none    \n 2 City_H…         2                      0                    1      2 none    \n 3 Resort…        95                      2                    5      2 none    \n 4 Resort…       136                      1                    4      2 none    \n 5 City_H…        67                      2                    2      2 none    \n 6 City_H…        56                      0                    3      0 children\n 7 City_H…       130                      1                    2      2 none    \n 8 City_H…        27                      0                    1      1 none    \n 9 Resort…        46                      0                    2      2 none    \n10 City_H…       297                      1                    1      2 none    \n# ℹ 37,490 more rows\n# ℹ abbreviated name: ¹​stays_in_weekend_nights\n# ℹ 17 more variables: meal &lt;fct&gt;, country &lt;fct&gt;, market_segment &lt;fct&gt;,\n#   distribution_channel &lt;fct&gt;, is_repeated_guest &lt;dbl&gt;,\n#   previous_cancellations &lt;dbl&gt;, previous_bookings_not_canceled &lt;dbl&gt;,\n#   reserved_room_type &lt;fct&gt;, assigned_room_type &lt;fct&gt;, booking_changes &lt;dbl&gt;,\n#   deposit_type &lt;fct&gt;, days_in_waiting_list &lt;dbl&gt;, customer_type &lt;fct&gt;, …"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#pre-process",
    "href": "slides/2025-04-29/09_modeling.html#pre-process",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Pre-Process",
    "text": "Pre-Process\n\nlibrary(recipes)\n\n\nholidays &lt;- c(\"AllSouls\", \"AshWednesday\", \"ChristmasEve\", \"Easter\", \n              \"ChristmasDay\", \"GoodFriday\", \"NewYearsDay\", \"PalmSunday\")\n\nlr_recipe &lt;- \n  recipe(children ~ ., data = hotels) |&gt; \n  step_date(arrival_date) |&gt; \n  step_holiday(arrival_date, holidays = holidays) |&gt; \n  step_rm(arrival_date) |&gt; \n  step_dummy(all_nominal_predictors()) |&gt; \n  step_zv(all_predictors()) |&gt; \n  step_normalize(all_predictors())\n\nlr_recipe\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:    1\npredictor: 22\n\n\n\n\n\n── Operations \n\n\n• Date features from: arrival_date\n\n\n• Holiday features from: arrival_date\n\n\n• Variables removed: arrival_date\n\n\n• Dummy variables from: all_nominal_predictors()\n\n\n• Zero variance filter on: all_predictors()\n\n\n• Centering and scaling for: all_predictors()"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#fit-models",
    "href": "slides/2025-04-29/09_modeling.html#fit-models",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Fit Models",
    "text": "Fit Models\n\nlr_model &lt;- \n  logistic_reg(penalty = tune(), mixture = 1) |&gt; \n  set_engine(\"glmnet\")\n\nlr_model\n\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#select-best",
    "href": "slides/2025-04-29/09_modeling.html#select-best",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Select Best",
    "text": "Select Best\nFind a grid of parameters\n\nlr_reg_grid &lt;- data.frame(penalty = 10^seq(-4, -1, length.out = 30))\n\nPerform CV splits:\n\nlr_folds &lt;- vfold_cv(hotel_train, v = 5)"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#select-best-1",
    "href": "slides/2025-04-29/09_modeling.html#select-best-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Select Best",
    "text": "Select Best\nDefine a workflow:\n\nlr_workflow &lt;-  \n  workflow() |&gt; \n  add_model(lr_model) |&gt; \n  add_recipe(lr_recipe)\n\nFit workflow to a grid of parameters:\n\nlr_results &lt;- \n  lr_workflow |&gt; \n  tune_grid(grid = lr_reg_grid,\n            control = control_grid(save_pred = TRUE, \n                                   save_workflow=TRUE),\n            resamples = lr_folds,\n            metrics = metric_set(roc_auc))\n\nℹ The workflow being saved contains a recipe, which is 6.79 Mb in ℹ memory. If\nthis was not intentional, please set the control setting ℹ `save_workflow =\nFALSE`."
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#select-best-2",
    "href": "slides/2025-04-29/09_modeling.html#select-best-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Select Best",
    "text": "Select Best\nVisual examination\n\nlr_results |&gt; \n  collect_metrics() |&gt; \n  ggplot(aes(x = penalty, y = mean)) + \n  geom_point() + \n  geom_line() + \n  ylab(\"Area under the ROC Curve\") +\n  scale_x_log10(labels = scales::label_number())"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#select-best-3",
    "href": "slides/2025-04-29/09_modeling.html#select-best-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Select Best",
    "text": "Select Best\n\nlr_results |&gt; show_best()\n\nWarning in show_best(lr_results): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\n\n# A tibble: 5 × 7\n   penalty .metric .estimator  mean     n std_err .config              \n     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n1 0.00108  roc_auc binary     0.877     5 0.00492 Preprocessor1_Model11\n2 0.00137  roc_auc binary     0.877     5 0.00488 Preprocessor1_Model12\n3 0.000853 roc_auc binary     0.877     5 0.00498 Preprocessor1_Model10\n4 0.00174  roc_auc binary     0.876     5 0.00485 Preprocessor1_Model13\n5 0.000672 roc_auc binary     0.876     5 0.00503 Preprocessor1_Model09\n\nlr_best &lt;- lr_results |&gt; select_best()\n\nWarning in select_best(lr_results): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\nlr_best\n\n# A tibble: 1 × 2\n  penalty .config              \n    &lt;dbl&gt; &lt;chr&gt;                \n1 0.00108 Preprocessor1_Model11"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#refit-best-model",
    "href": "slides/2025-04-29/09_modeling.html#refit-best-model",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Refit Best Model",
    "text": "Refit Best Model\n\nlr_best_fit &lt;- lr_results |&gt; fit_best()\nlr_best_fit\n\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n6 Recipe Steps\n\n• step_date()\n• step_holiday()\n• step_rm()\n• step_dummy()\n• step_zv()\n• step_normalize()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  glmnet::glmnet(x = maybe_matrix(x), y = y, family = \"binomial\",      alpha = ~1) \n\n    Df  %Dev   Lambda\n1    0  0.00 0.078450\n2    2  2.46 0.071480\n3    2  5.20 0.065130\n4    3  7.76 0.059350\n5    4 10.20 0.054070\n6    4 12.46 0.049270\n7    4 14.12 0.044890\n8    5 15.61 0.040900\n9    5 17.01 0.037270\n10   5 18.09 0.033960\n11   5 18.96 0.030940\n12   6 19.95 0.028190\n13   6 20.80 0.025690\n14   6 21.51 0.023410\n15   8 22.40 0.021330\n16   8 23.12 0.019430\n17   8 23.69 0.017710\n18   9 24.18 0.016130\n19  10 24.70 0.014700\n20  11 25.20 0.013390\n21  11 25.63 0.012200\n22  11 25.99 0.011120\n23  13 26.33 0.010130\n24  14 26.65 0.009232\n25  17 26.98 0.008412\n26  19 27.36 0.007665\n27  23 27.78 0.006984\n28  25 28.30 0.006363\n29  28 28.78 0.005798\n30  30 29.23 0.005283\n31  32 29.66 0.004814\n32  35 30.16 0.004386\n33  40 30.61 0.003996\n34  40 31.03 0.003641\n35  43 31.40 0.003318\n36  48 31.74 0.003023\n37  51 32.06 0.002755\n38  54 32.32 0.002510\n39  61 32.56 0.002287\n40  63 32.78 0.002084\n41  67 32.98 0.001899\n42  74 33.15 0.001730\n43  80 33.32 0.001576\n44  85 33.46 0.001436\n45  87 33.58 0.001309\n46  90 33.69 0.001192\n\n...\nand 38 more lines."
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#test-set-assessment",
    "href": "slides/2025-04-29/09_modeling.html#test-set-assessment",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Test Set Assessment",
    "text": "Test Set Assessment\n\npredict(lr_best_fit, hotel_test)\n\n# A tibble: 12,500 × 1\n   .pred_class\n   &lt;fct&gt;      \n 1 none       \n 2 children   \n 3 none       \n 4 none       \n 5 none       \n 6 none       \n 7 none       \n 8 none       \n 9 none       \n10 none       \n# ℹ 12,490 more rows\n\n\n\naugment(lr_best_fit, hotel_test)\n\n# A tibble: 12,500 × 26\n   .pred_class .pred_children .pred_none hotel  lead_time stays_in_weekend_nig…¹\n   &lt;fct&gt;                &lt;dbl&gt;      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;                  &lt;dbl&gt;\n 1 none               0.0343      0.966  Resor…       143                      2\n 2 children           0.942       0.0583 Resor…        47                      0\n 3 none               0.0478      0.952  City_…        80                      0\n 4 none               0.128       0.872  City_…         6                      2\n 5 none               0.00235     0.998  Resor…        16                      1\n 6 none               0.0178      0.982  Resor…       209                      2\n 7 none               0.0208      0.979  City_…         1                      1\n 8 none               0.0242      0.976  City_…        43                      1\n 9 none               0.0201      0.980  City_…         0                      0\n10 none               0.0591      0.941  Resor…       171                      2\n# ℹ 12,490 more rows\n# ℹ abbreviated name: ¹​stays_in_weekend_nights\n# ℹ 20 more variables: stays_in_week_nights &lt;dbl&gt;, adults &lt;dbl&gt;,\n#   children &lt;fct&gt;, meal &lt;fct&gt;, country &lt;fct&gt;, market_segment &lt;fct&gt;,\n#   distribution_channel &lt;fct&gt;, is_repeated_guest &lt;dbl&gt;,\n#   previous_cancellations &lt;dbl&gt;, previous_bookings_not_canceled &lt;dbl&gt;,\n#   reserved_room_type &lt;fct&gt;, assigned_room_type &lt;fct&gt;, …"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#other-tidymodels-tools",
    "href": "slides/2025-04-29/09_modeling.html#other-tidymodels-tools",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Other tidymodels tools",
    "text": "Other tidymodels tools\n\nFeature Importance Scores\nModel Stacking\nProbabilistic Predictions\nUncertainty Bounds (Conformal Inference)\nMultilevel (Mixed-Effect) Models\nFairness Audits"
  },
  {
    "objectID": "slides/2025-05-13/13_python_basics_objects.html",
    "href": "slides/2025-05-13/13_python_basics_objects.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nThe python object model\nMethods vs Functions\nMutating vs Non-Mutating Methods"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html",
    "href": "slides/2025-04-29/09a_modeling_I.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\n\nStatistical Analysis\n\nTidy Data Manipulation\npython Basics\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nFormula Syntax\nClassical Statistical Models with R\nKey Accessor Functions\n\n\n\n\n\nR was designed for statistical analysis (originally called S)\n. . .\nMajor contributions\n\ndata.frame / tidy structure\nFormula language (“Wilkinson-Rogers notation”)\n\n\n\n\nIn R, a formula is a special object defined by a ~\n. . .\nMost common structure\n\ny ~ x1 + x2\n\nPredict variable y using x1 and x2\n. . .\n\nModern R uses formulas in many other contexts\nVarious extensions provided by packages\n\n\n\n\nBasic modeling function: lm (linear model)\n\nlibrary(palmerpenguins)\nlm(body_mass_g ~ flipper_length_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm  \n         -5780.83              49.69  \n\n\n\n\n\n\nlm(body_mass_g ~ flipper_length_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm  \n         -5780.83              49.69  \n\n\n\nProvide model (formula) and data (data.frame) instead of \\(X, y\\)\nBy default automatically includes an intercept term\n\n\n\n\n\nlm(body_mass_g ~ flipper_length_mm + species, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm + species, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm   speciesChinstrap      speciesGentoo  \n         -4031.48              40.71            -206.51             266.81  \n\n\nAutomatically:\n\nEncodes categorical (factor) variables\n\n?C for details\n\nRemoves extra / redundant columns\n\n\n\n\n\nlm(body_mass_g ~ flipper_length_mm*bill_depth_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * bill_depth_mm, \n    data = penguins)\n\nCoefficients:\n                    (Intercept)                flipper_length_mm  \n                     -36097.064                          196.074  \n                  bill_depth_mm  flipper_length_mm:bill_depth_mm  \n                       1771.796                           -8.596  \n\n\n\n* creates both ‘main’ effects and interactions\n\n\n\n\n\nlm(body_mass_g ~ flipper_length_mm*species, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * species, data = penguins)\n\nCoefficients:\n                       (Intercept)                   flipper_length_mm  \n                         -2535.837                              32.832  \n                  speciesChinstrap                       speciesGentoo  \n                          -501.359                           -4251.444  \nflipper_length_mm:speciesChinstrap     flipper_length_mm:speciesGentoo  \n                             1.742                              21.791  \n\n\n\n* of continuous and categorical creates ANCOVA\n\n\n\n\nMany extensions\n\nlibrary(mgcv)\ngam(body_mass_g ~ s(flipper_length_mm) + s(bill_depth_mm, by=species), data=penguins)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nbody_mass_g ~ s(flipper_length_mm) + s(bill_depth_mm, by = species)\n\nEstimated degrees of freedom:\n1.56 1.96 1.00 4.39  total = 9.91 \n\nGCV score: 106441.7     \n\n\nFits a mixed-effect non-linear regression\n\n\n\nHelper functions to access fitted models:\n\nm &lt;- lm(body_mass_g ~ flipper_length_mm*bill_depth_mm + species, data=penguins)\ncoef(m)\n\n                    (Intercept)               flipper_length_mm \n                  -4844.4526376                      27.3153209 \n                  bill_depth_mm                speciesChinstrap \n                    200.0652179                    -131.5598847 \n                  speciesGentoo flipper_length_mm:bill_depth_mm \n                   1283.9149548                      -0.0900381 \n\n\n\n\n\n\nsummary(m)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * bill_depth_mm + \n    species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-900.40 -238.12  -40.12  228.86 1085.32 \n\nCoefficients:\n                                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                     -4.844e+03  5.298e+03  -0.914   0.3611    \nflipper_length_mm                2.732e+01  2.699e+01   1.012   0.3123    \nbill_depth_mm                    2.001e+02  2.945e+02   0.679   0.4973    \nspeciesChinstrap                -1.316e+02  5.192e+01  -2.534   0.0117 *  \nspeciesGentoo                    1.284e+03  1.572e+02   8.166 6.51e-15 ***\nflipper_length_mm:bill_depth_mm -9.004e-02  1.495e+00  -0.060   0.9520    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 331.3 on 336 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.8319,    Adjusted R-squared:  0.8294 \nF-statistic: 332.5 on 5 and 336 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\nIn-sample / training prediction:\n\npredict(m)\n\n       1        2        3        5        6        7        8        9 \n3536.088 3425.933 3767.175 3953.280 4114.393 3370.697 4059.188 3734.055 \n      10       11       12       13       14       15       16       17 \n4041.210 3370.937 3253.055 3359.674 4249.574 4409.196 3473.547 3949.683 \n      18       19       20       21       22       23       24       25 \n4310.849 3557.933 4380.573 3282.907 3510.456 3832.665 3528.570 3234.669 \n      26       27       28       29       30       31       32       33 \n3726.523 3568.992 3543.295 3286.946 3547.228 3091.116 3348.770 3550.685 \n      34       35       36       37       38       39       40       41 \n3649.683 3584.667 4358.365 4004.618 3473.685 3646.349 3686.382 3433.145 \n      42       43       44       45       46       47       48       49 \n3840.178 3627.582 4102.980 3308.480 3785.068 3616.823 3521.615 3620.406 \n      50       51       52       53       54       55       56       57 \n4249.574 3480.928 3752.137 3620.406 4168.735 3579.941 3774.117 3444.264 \n      58       59       60       61       62       63       64       65 \n3861.936 3150.175 3942.338 3308.480 4332.949 3326.821 3726.647 3319.386 \n      66       67       68       69       70       71       72       73 \n3690.091 3438.661 3788.765 3382.561 4099.392 3821.660 3711.885 3646.936 \n      74       75       76       77       78       79       80       81 \n3982.659 3547.223 3858.429 3444.955 3741.432 3213.485 3967.934 3466.569 \n      82       83       84       85       86       87       88       89 \n3719.903 3708.201 3971.549 3627.823 4161.456 3913.139 3722.836 3832.665 \n      90       91       92       93       94       95       96       97 \n3785.068 3947.038 4042.282 3345.161 3554.255 3433.358 4264.409 3748.477 \n      98       99      100      101      102      103      104      105 \n3884.079 2980.693 3781.480 3671.813 4336.307 3091.663 4004.618 3825.399 \n     106      107      108      109      110      111      112      113 \n3649.683 3724.236 4004.618 3223.682 4000.892 3570.903 4084.993 3660.980 \n     114      115      116      117      118      119      120      121 \n4092.056 4158.140 3847.595 3404.175 4325.323 3429.959 3722.836 3415.036 \n     122      123      124      125      126      127      128      129 \n4172.287 3094.759 4037.976 3150.955 4052.101 3591.249 3821.927 3499.815 \n     130      131      132      133      134      135      136      137 \n4152.595 3620.406 4037.358 3807.130 3961.028 3488.327 3547.223 3572.963 \n     138      139      140      141      142      143      144      145 \n4277.969 3235.117 3697.517 3551.367 3415.036 3129.468 3455.744 3470.758 \n     146      147      148      149      150      151      152      153 \n3638.615 3748.477 3557.933 3730.674 3734.055 3396.713 4012.327 4593.082 \n     154      155      156      157      158      159      160      161 \n5645.496 4729.996 5136.843 4932.508 4621.302 4846.576 5180.825 4577.078 \n     162      163      164      165      166      167      168      169 \n5095.145 4761.861 5247.505 4761.861 4898.577 4820.575 5201.160 4621.302 \n     170      171      172      173      174      175      176      177 \n5214.684 4776.450 5222.623 4974.450 4932.508 4880.489 5167.427 4679.518 \n     178      179      180      181      182      183      184      185 \n5040.932 4922.395 5022.862 4766.228 5206.763 5258.638 4722.075 4724.430 \n     186      187      188      189      190      191      192      193 \n5771.046 5116.634 5387.019 4735.779 5541.519 4587.236 4968.045 4605.370 \n     194      195      196      197      198      199      200      201 \n5462.316 4657.534 5048.826 5366.684 4876.212 4693.765 5444.335 4663.424 \n     202      203      204      205      206      207      208      209 \n5167.427 4748.112 4990.454 4784.344 5282.509 4966.475 5224.788 4641.637 \n     210      211      212      213      214      215      216      217 \n5152.685 4750.440 5310.513 4623.504 5160.634 4798.020 5563.784 4982.443 \n     218      219      220      221      222      223      224      225 \n5735.175 4888.419 5601.704 5008.480 5230.580 5048.826 5286.750 5286.750 \n     226      227      228      229      230      231      232      233 \n5038.686 5048.826 5591.689 4722.075 5387.019 4806.013 5482.561 4854.479 \n     234      235      236      237      238      239      240      241 \n5286.750 4872.577 5418.451 4727.795 5773.337 4992.494 4956.406 4763.990 \n     242      243      244      245      246      247      248      249 \n5771.046 5100.756 5737.430 4854.479 5454.431 4942.658 5434.276 5193.320 \n     250      251      252      253      254      255      256      257 \n5132.584 4602.212 5552.219 5126.721 5719.477 5113.215 5360.403 4832.086 \n     258      259      260      261      262      263      264      265 \n5221.639 4838.691 5270.998 4659.771 4885.198 5084.950 5547.870 5007.110 \n     266      267      268      269      270      271      273      274 \n5645.496 4912.317 5591.689 5201.160 5420.707 4761.861 4896.367 5330.669 \n     275      276      277      278      279      280      281      282 \n4908.772 5169.908 3540.254 3934.937 3803.451 3583.949 4015.194 3676.252 \n     283      284      285      286      287      288      289      290 \n3235.614 3723.470 3799.872 4058.951 3547.688 4029.896 3250.283 3807.980 \n     291      292      293      294      295      296      297      298 \n3342.480 4080.931 4051.660 3239.137 3616.917 3672.117 3147.253 3441.403 \n     299      300      301      302      303      304      305      306 \n3173.539 3839.989 3617.364 3869.332 3836.911 3946.146 3496.263 4255.776 \n     307      308      309      310      311      312      313      314 \n3173.539 4299.292 3191.862 3986.602 3745.120 3519.817 3690.368 4510.159 \n     315      316      317      318      319      320      321      322 \n3302.642 4237.616 4292.771 3338.444 3861.969 3478.892 3643.068 3880.767 \n     323      324      325      326      327      328      329      330 \n3488.846 4361.987 3558.318 3585.133 3446.958 3971.751 3456.344 4150.211 \n     331      332      333      334      335      336      337      338 \n3301.799 3832.867 3276.822 4186.569 3960.980 3865.558 4190.532 3206.875 \n     339      340      341      342      343      344 \n3453.107 4270.520 3833.665 3620.764 4202.192 3840.266 \n\n\n\n\n\nOut-of-sample / test prediction:\n\ntoppenguins &lt;- penguins |&gt; slice_max(body_mass_g, n=10)\npredict(m, newdata=toppenguins)\n\n       1        2        3        4        5        6        7        8 \n5214.684 5771.046 5387.019 5420.707 5482.561 5547.870 4898.577 5201.160 \n       9       10       11 \n5591.689 5601.704 5591.689 \n\n\n\n\n\nFor just lm:\n\nmethods(class=\"lm\")\n\n [1] add1           alias          anova          case.names     coerce        \n [6] confint        cooks.distance deviance       dfbeta         dfbetas       \n[11] drop1          dummy.coef     effects        extractAIC     family        \n[16] formula        fortify        hatvalues      influence      initialize    \n[21] kappa          labels         logLik         model.frame    model.matrix  \n[26] nobs           plot           predict        print          proj          \n[31] qqnorm         qr             residuals      rstandard      rstudent      \n[36] show           simulate       slotsFromS3    summary        variable.names\n[41] vcov          \nsee '?methods' for accessing help and source code\n\n\nEven more for other models\n\n\n\nYour turn!\n. . .\nApplications to course project:\n\nBuild models to explore and understand data\n\n\n\n\nFor more:\n\nAdditional STA and CIS classes\n\nSTA 9708: Basic Inferential Statistics\nSTA 9700: Regression (lm and similar)\nand many more!"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#where-are-we",
    "href": "slides/2025-04-29/09a_modeling_I.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\n\nStatistical Analysis\n\nTidy Data Manipulation\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#goals-for-this-video",
    "href": "slides/2025-04-29/09a_modeling_I.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nFormula Syntax\nClassical Statistical Models with R\nKey Accessor Functions"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#formula-notation",
    "href": "slides/2025-04-29/09a_modeling_I.html#formula-notation",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Formula Notation",
    "text": "Formula Notation\nR was designed for statistical analysis (originally called S)\n\nMajor contributions\n\ndata.frame / tidy structure\nFormula language (“Wilkinson-Rogers notation”)"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#formula-notation-1",
    "href": "slides/2025-04-29/09a_modeling_I.html#formula-notation-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Formula Notation",
    "text": "Formula Notation\nIn R, a formula is a special object defined by a ~\n\nMost common structure\n\ny ~ x1 + x2\n\nPredict variable y using x1 and x2\n\n\n\nModern R uses formulas in many other contexts\nVarious extensions provided by packages"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#modeling-functions",
    "href": "slides/2025-04-29/09a_modeling_I.html#modeling-functions",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\nBasic modeling function: lm (linear model)\n\nlibrary(palmerpenguins)\nlm(body_mass_g ~ flipper_length_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm  \n         -5780.83              49.69"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-1",
    "href": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\n\nlm(body_mass_g ~ flipper_length_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm  \n         -5780.83              49.69  \n\n\n\nProvide model (formula) and data (data.frame) instead of \\(X, y\\)\nBy default automatically includes an intercept term"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-2",
    "href": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\n\nlm(body_mass_g ~ flipper_length_mm + species, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm + species, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm   speciesChinstrap      speciesGentoo  \n         -4031.48              40.71            -206.51             266.81  \n\n\nAutomatically:\n\nEncodes categorical (factor) variables\n\n?C for details\n\nRemoves extra / redundant columns"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-3",
    "href": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\n\nlm(body_mass_g ~ flipper_length_mm*bill_depth_mm, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * bill_depth_mm, \n    data = penguins)\n\nCoefficients:\n                    (Intercept)                flipper_length_mm  \n                     -36097.064                          196.074  \n                  bill_depth_mm  flipper_length_mm:bill_depth_mm  \n                       1771.796                           -8.596  \n\n\n\n* creates both ‘main’ effects and interactions"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-4",
    "href": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\n\nlm(body_mass_g ~ flipper_length_mm*species, data=penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * species, data = penguins)\n\nCoefficients:\n                       (Intercept)                   flipper_length_mm  \n                         -2535.837                              32.832  \n                  speciesChinstrap                       speciesGentoo  \n                          -501.359                           -4251.444  \nflipper_length_mm:speciesChinstrap     flipper_length_mm:speciesGentoo  \n                             1.742                              21.791  \n\n\n\n* of continuous and categorical creates ANCOVA"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-5",
    "href": "slides/2025-04-29/09a_modeling_I.html#modeling-functions-5",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Modeling Functions",
    "text": "Modeling Functions\nMany extensions\n\nlibrary(mgcv)\ngam(body_mass_g ~ s(flipper_length_mm) + s(bill_depth_mm, by=species), data=penguins)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nbody_mass_g ~ s(flipper_length_mm) + s(bill_depth_mm, by = species)\n\nEstimated degrees of freedom:\n1.56 1.96 1.00 4.39  total = 9.91 \n\nGCV score: 106441.7     \n\n\nFits a mixed-effect non-linear regression"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#accessors",
    "href": "slides/2025-04-29/09a_modeling_I.html#accessors",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\nHelper functions to access fitted models:\n\nm &lt;- lm(body_mass_g ~ flipper_length_mm*bill_depth_mm + species, data=penguins)\ncoef(m)\n\n                    (Intercept)               flipper_length_mm \n                  -4844.4526376                      27.3153209 \n                  bill_depth_mm                speciesChinstrap \n                    200.0652179                    -131.5598847 \n                  speciesGentoo flipper_length_mm:bill_depth_mm \n                   1283.9149548                      -0.0900381"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#accessors-1",
    "href": "slides/2025-04-29/09a_modeling_I.html#accessors-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\n\nsummary(m)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm * bill_depth_mm + \n    species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-900.40 -238.12  -40.12  228.86 1085.32 \n\nCoefficients:\n                                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                     -4.844e+03  5.298e+03  -0.914   0.3611    \nflipper_length_mm                2.732e+01  2.699e+01   1.012   0.3123    \nbill_depth_mm                    2.001e+02  2.945e+02   0.679   0.4973    \nspeciesChinstrap                -1.316e+02  5.192e+01  -2.534   0.0117 *  \nspeciesGentoo                    1.284e+03  1.572e+02   8.166 6.51e-15 ***\nflipper_length_mm:bill_depth_mm -9.004e-02  1.495e+00  -0.060   0.9520    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 331.3 on 336 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.8319,    Adjusted R-squared:  0.8294 \nF-statistic: 332.5 on 5 and 336 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#accessors-2",
    "href": "slides/2025-04-29/09a_modeling_I.html#accessors-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\nIn-sample / training prediction:\n\npredict(m)\n\n       1        2        3        5        6        7        8        9 \n3536.088 3425.933 3767.175 3953.280 4114.393 3370.697 4059.188 3734.055 \n      10       11       12       13       14       15       16       17 \n4041.210 3370.937 3253.055 3359.674 4249.574 4409.196 3473.547 3949.683 \n      18       19       20       21       22       23       24       25 \n4310.849 3557.933 4380.573 3282.907 3510.456 3832.665 3528.570 3234.669 \n      26       27       28       29       30       31       32       33 \n3726.523 3568.992 3543.295 3286.946 3547.228 3091.116 3348.770 3550.685 \n      34       35       36       37       38       39       40       41 \n3649.683 3584.667 4358.365 4004.618 3473.685 3646.349 3686.382 3433.145 \n      42       43       44       45       46       47       48       49 \n3840.178 3627.582 4102.980 3308.480 3785.068 3616.823 3521.615 3620.406 \n      50       51       52       53       54       55       56       57 \n4249.574 3480.928 3752.137 3620.406 4168.735 3579.941 3774.117 3444.264 \n      58       59       60       61       62       63       64       65 \n3861.936 3150.175 3942.338 3308.480 4332.949 3326.821 3726.647 3319.386 \n      66       67       68       69       70       71       72       73 \n3690.091 3438.661 3788.765 3382.561 4099.392 3821.660 3711.885 3646.936 \n      74       75       76       77       78       79       80       81 \n3982.659 3547.223 3858.429 3444.955 3741.432 3213.485 3967.934 3466.569 \n      82       83       84       85       86       87       88       89 \n3719.903 3708.201 3971.549 3627.823 4161.456 3913.139 3722.836 3832.665 \n      90       91       92       93       94       95       96       97 \n3785.068 3947.038 4042.282 3345.161 3554.255 3433.358 4264.409 3748.477 \n      98       99      100      101      102      103      104      105 \n3884.079 2980.693 3781.480 3671.813 4336.307 3091.663 4004.618 3825.399 \n     106      107      108      109      110      111      112      113 \n3649.683 3724.236 4004.618 3223.682 4000.892 3570.903 4084.993 3660.980 \n     114      115      116      117      118      119      120      121 \n4092.056 4158.140 3847.595 3404.175 4325.323 3429.959 3722.836 3415.036 \n     122      123      124      125      126      127      128      129 \n4172.287 3094.759 4037.976 3150.955 4052.101 3591.249 3821.927 3499.815 \n     130      131      132      133      134      135      136      137 \n4152.595 3620.406 4037.358 3807.130 3961.028 3488.327 3547.223 3572.963 \n     138      139      140      141      142      143      144      145 \n4277.969 3235.117 3697.517 3551.367 3415.036 3129.468 3455.744 3470.758 \n     146      147      148      149      150      151      152      153 \n3638.615 3748.477 3557.933 3730.674 3734.055 3396.713 4012.327 4593.082 \n     154      155      156      157      158      159      160      161 \n5645.496 4729.996 5136.843 4932.508 4621.302 4846.576 5180.825 4577.078 \n     162      163      164      165      166      167      168      169 \n5095.145 4761.861 5247.505 4761.861 4898.577 4820.575 5201.160 4621.302 \n     170      171      172      173      174      175      176      177 \n5214.684 4776.450 5222.623 4974.450 4932.508 4880.489 5167.427 4679.518 \n     178      179      180      181      182      183      184      185 \n5040.932 4922.395 5022.862 4766.228 5206.763 5258.638 4722.075 4724.430 \n     186      187      188      189      190      191      192      193 \n5771.046 5116.634 5387.019 4735.779 5541.519 4587.236 4968.045 4605.370 \n     194      195      196      197      198      199      200      201 \n5462.316 4657.534 5048.826 5366.684 4876.212 4693.765 5444.335 4663.424 \n     202      203      204      205      206      207      208      209 \n5167.427 4748.112 4990.454 4784.344 5282.509 4966.475 5224.788 4641.637 \n     210      211      212      213      214      215      216      217 \n5152.685 4750.440 5310.513 4623.504 5160.634 4798.020 5563.784 4982.443 \n     218      219      220      221      222      223      224      225 \n5735.175 4888.419 5601.704 5008.480 5230.580 5048.826 5286.750 5286.750 \n     226      227      228      229      230      231      232      233 \n5038.686 5048.826 5591.689 4722.075 5387.019 4806.013 5482.561 4854.479 \n     234      235      236      237      238      239      240      241 \n5286.750 4872.577 5418.451 4727.795 5773.337 4992.494 4956.406 4763.990 \n     242      243      244      245      246      247      248      249 \n5771.046 5100.756 5737.430 4854.479 5454.431 4942.658 5434.276 5193.320 \n     250      251      252      253      254      255      256      257 \n5132.584 4602.212 5552.219 5126.721 5719.477 5113.215 5360.403 4832.086 \n     258      259      260      261      262      263      264      265 \n5221.639 4838.691 5270.998 4659.771 4885.198 5084.950 5547.870 5007.110 \n     266      267      268      269      270      271      273      274 \n5645.496 4912.317 5591.689 5201.160 5420.707 4761.861 4896.367 5330.669 \n     275      276      277      278      279      280      281      282 \n4908.772 5169.908 3540.254 3934.937 3803.451 3583.949 4015.194 3676.252 \n     283      284      285      286      287      288      289      290 \n3235.614 3723.470 3799.872 4058.951 3547.688 4029.896 3250.283 3807.980 \n     291      292      293      294      295      296      297      298 \n3342.480 4080.931 4051.660 3239.137 3616.917 3672.117 3147.253 3441.403 \n     299      300      301      302      303      304      305      306 \n3173.539 3839.989 3617.364 3869.332 3836.911 3946.146 3496.263 4255.776 \n     307      308      309      310      311      312      313      314 \n3173.539 4299.292 3191.862 3986.602 3745.120 3519.817 3690.368 4510.159 \n     315      316      317      318      319      320      321      322 \n3302.642 4237.616 4292.771 3338.444 3861.969 3478.892 3643.068 3880.767 \n     323      324      325      326      327      328      329      330 \n3488.846 4361.987 3558.318 3585.133 3446.958 3971.751 3456.344 4150.211 \n     331      332      333      334      335      336      337      338 \n3301.799 3832.867 3276.822 4186.569 3960.980 3865.558 4190.532 3206.875 \n     339      340      341      342      343      344 \n3453.107 4270.520 3833.665 3620.764 4202.192 3840.266"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#accessors-3",
    "href": "slides/2025-04-29/09a_modeling_I.html#accessors-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\nOut-of-sample / test prediction:\n\ntoppenguins &lt;- penguins |&gt; slice_max(body_mass_g, n=10)\npredict(m, newdata=toppenguins)\n\n       1        2        3        4        5        6        7        8 \n5214.684 5771.046 5387.019 5420.707 5482.561 5547.870 4898.577 5201.160 \n       9       10       11 \n5591.689 5601.704 5591.689"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#accessors-4",
    "href": "slides/2025-04-29/09a_modeling_I.html#accessors-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Accessors",
    "text": "Accessors\nFor just lm:\n\nmethods(class=\"lm\")\n\n [1] add1           alias          anova          case.names     coerce        \n [6] confint        cooks.distance deviance       dfbeta         dfbetas       \n[11] drop1          dummy.coef     effects        extractAIC     family        \n[16] formula        fortify        hatvalues      influence      initialize    \n[21] kappa          labels         logLik         model.frame    model.matrix  \n[26] nobs           plot           predict        print          proj          \n[31] qqnorm         qr             residuals      rstandard      rstudent      \n[36] show           simulate       slotsFromS3    summary        variable.names\n[41] vcov          \nsee '?methods' for accessing help and source code\n\n\nEven more for other models"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#looking-ahead",
    "href": "slides/2025-04-29/09a_modeling_I.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\nYour turn!\n\nApplications to course project:\n\nBuild models to explore and understand data"
  },
  {
    "objectID": "slides/2025-04-29/09a_modeling_I.html#learning-more",
    "href": "slides/2025-04-29/09a_modeling_I.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more:\n\nAdditional STA and CIS classes\n\nSTA 9708: Basic Inferential Statistics\nSTA 9700: Regression (lm and similar)\nand many more!"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html",
    "href": "slides/2025-04-29/09b_modeling_II.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\n\nStatistical Analysis\n\nTidy Data Manipulation\npython Basics\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nWhat is Predictive Modeling?\nThe tidymodels Ecosystem\n\n\n\n\n\nStrength of R:\n\nThousands of authors contributing packages to CRAN\n\n. . .\nWeakness of R:\n\nThousands of authors contributing slightly incompatible packages to CRAN\n\n. . .\nNo two modeling packages have exactly the same API. Makes changing between interfaces cumbersome\n\n\n\ntidymodels attemps to provide a uniform interface to a wide variety of predictive Machine Learning tools\nAdvantages:\n\nEasy to swap out different algorithms to find the best\n\nDisadvantages:\n\nHarder to take advantage of the strengths of each approach\n\n\n\n\nStatistics / Data Science:\n\nFind the model that fits the data best\nModel should capture all important data features\nInterpretability\nHistory: Grounded in lab sciences where experiments are expensive and data is limited\n\n\n\n\nMachine Learning:\n\nFind the model that predicts the data best\nNo “perfect” model - just the best one we’ve found so far\nBlack-box techniques are great, if effective\nHistory: Silicon Valley “at scale”\n\nValidation based on of-of-sample or test predictions\n\n\n\nHow to check whether a model predicts well?\n. . .\nNeed more data! But where to get more data?\n\nActually get more data (hard, expensive, slow)\nSplit data into parts - test/training split\nCross-Validation\nResampling\n\n. . .\nToday, we’ll primarily use a combination: Test/Train split & Cross-Validation!\n\n\n\n\nCross-Validation is done on the estimator, not the fitted algorithm\n\n\n\ntidymodels workflow:\n\nInitial Split\nPre-Process\nFit (many) models\nSelect best\nRefit\nTest Set Assessment\n\ntidymodels is very punny, so a bit hard to tell which step is which…\n\n\n\n\nlibrary(tidymodels); library(readr)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n\n\n✔ broom        1.0.8     ✔ rsample      1.3.0\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.8     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.1     ✔ yardstick    1.3.2\n✔ recipes      1.3.0     \n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n\nhotels &lt;- \n  read_csv(\"https://tidymodels.org/start/case-study/hotels.csv\") |&gt;\n  mutate(across(where(is.character), as.factor))\n\nRows: 50000 Columns: 23\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): hotel, children, meal, country, market_segment, distribution_chan...\ndbl  (11): lead_time, stays_in_weekend_nights, stays_in_week_nights, adults,...\ndate  (1): arrival_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(hotels)\n\nRows: 50,000\nColumns: 23\n$ hotel                          &lt;fct&gt; City_Hotel, City_Hotel, Resort_Hotel, R…\n$ lead_time                      &lt;dbl&gt; 217, 2, 95, 143, 136, 67, 47, 56, 80, 6…\n$ stays_in_weekend_nights        &lt;dbl&gt; 1, 0, 2, 2, 1, 2, 0, 0, 0, 2, 1, 0, 1, …\n$ stays_in_week_nights           &lt;dbl&gt; 3, 1, 5, 6, 4, 2, 2, 3, 4, 2, 2, 1, 2, …\n$ adults                         &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 1, 2, …\n$ children                       &lt;fct&gt; none, none, none, none, none, none, chi…\n$ meal                           &lt;fct&gt; BB, BB, BB, HB, HB, SC, BB, BB, BB, BB,…\n$ country                        &lt;fct&gt; DEU, PRT, GBR, ROU, PRT, GBR, ESP, ESP,…\n$ market_segment                 &lt;fct&gt; Offline_TA/TO, Direct, Online_TA, Onlin…\n$ distribution_channel           &lt;fct&gt; TA/TO, Direct, TA/TO, TA/TO, Direct, TA…\n$ is_repeated_guest              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_cancellations         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_bookings_not_canceled &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ reserved_room_type             &lt;fct&gt; A, D, A, A, F, A, C, B, D, A, A, D, A, …\n$ assigned_room_type             &lt;fct&gt; A, K, A, A, F, A, C, A, D, A, D, D, A, …\n$ booking_changes                &lt;dbl&gt; 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ deposit_type                   &lt;fct&gt; No_Deposit, No_Deposit, No_Deposit, No_…\n$ days_in_waiting_list           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ customer_type                  &lt;fct&gt; Transient-Party, Transient, Transient, …\n$ average_daily_rate             &lt;dbl&gt; 80.75, 170.00, 8.00, 81.00, 157.60, 49.…\n$ required_car_parking_spaces    &lt;fct&gt; none, none, none, none, none, none, non…\n$ total_of_special_requests      &lt;dbl&gt; 1, 3, 2, 1, 4, 1, 1, 1, 1, 1, 0, 1, 0, …\n$ arrival_date                   &lt;date&gt; 2016-09-01, 2017-08-25, 2016-11-19, 20…\n\n\n\n\n\n\n# Stratified sampling to ensure balance\nsplits      &lt;- initial_split(hotels, \n                             strata = children)\n\nhotel_train &lt;- training(splits)\nhotel_test  &lt;- testing(splits)\n\nhotel_train\n\n# A tibble: 37,500 × 23\n   hotel   lead_time stays_in_weekend_nig…¹ stays_in_week_nights adults children\n   &lt;fct&gt;       &lt;dbl&gt;                  &lt;dbl&gt;                &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;   \n 1 City_H…       217                      1                    3      2 none    \n 2 City_H…         2                      0                    1      2 none    \n 3 Resort…        95                      2                    5      2 none    \n 4 Resort…       143                      2                    6      2 none    \n 5 Resort…       136                      1                    4      2 none    \n 6 City_H…        67                      2                    2      2 none    \n 7 Resort…        47                      0                    2      2 children\n 8 City_H…        56                      0                    3      0 children\n 9 City_H…        80                      0                    4      2 none    \n10 City_H…         6                      2                    2      2 children\n# ℹ 37,490 more rows\n# ℹ abbreviated name: ¹​stays_in_weekend_nights\n# ℹ 17 more variables: meal &lt;fct&gt;, country &lt;fct&gt;, market_segment &lt;fct&gt;,\n#   distribution_channel &lt;fct&gt;, is_repeated_guest &lt;dbl&gt;,\n#   previous_cancellations &lt;dbl&gt;, previous_bookings_not_canceled &lt;dbl&gt;,\n#   reserved_room_type &lt;fct&gt;, assigned_room_type &lt;fct&gt;, booking_changes &lt;dbl&gt;,\n#   deposit_type &lt;fct&gt;, days_in_waiting_list &lt;dbl&gt;, customer_type &lt;fct&gt;, …\n\n\n\n\n\n\nlibrary(recipes)\n\n\nholidays &lt;- c(\"AllSouls\", \"AshWednesday\", \"ChristmasEve\", \"Easter\", \n              \"ChristmasDay\", \"GoodFriday\", \"NewYearsDay\", \"PalmSunday\")\n\nlr_recipe &lt;- \n  recipe(children ~ ., data = hotels) |&gt; \n  step_date(arrival_date) |&gt; \n  step_holiday(arrival_date, holidays = holidays) |&gt; \n  step_rm(arrival_date) |&gt; \n  step_dummy(all_nominal_predictors()) |&gt; \n  step_zv(all_predictors()) |&gt; \n  step_normalize(all_predictors())\n\nlr_recipe\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:    1\npredictor: 22\n\n\n\n\n\n── Operations \n\n\n• Date features from: arrival_date\n\n\n• Holiday features from: arrival_date\n\n\n• Variables removed: arrival_date\n\n\n• Dummy variables from: all_nominal_predictors()\n\n\n• Zero variance filter on: all_predictors()\n\n\n• Centering and scaling for: all_predictors()\n\n\n\n\n\n\nlr_model &lt;- \n  logistic_reg(penalty = tune(), mixture = 1) |&gt; \n  set_engine(\"glmnet\")\n\nlr_model\n\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n\n\n\n\n\nFind a grid of parameters\n\nlr_reg_grid &lt;- data.frame(penalty = 10^seq(-4, -1, length.out = 30))\n\nPerform CV splits:\n\nlr_folds &lt;- vfold_cv(hotel_train, v = 5)\n\n\n\n\nDefine a workflow:\n\nlr_workflow &lt;-  \n  workflow() |&gt; \n  add_model(lr_model) |&gt; \n  add_recipe(lr_recipe)\n\nFit workflow to a grid of parameters:\n\nlr_results &lt;- \n  lr_workflow |&gt; \n  tune_grid(grid = lr_reg_grid,\n            control = control_grid(save_pred = TRUE, \n                                   save_workflow=TRUE),\n            resamples = lr_folds,\n            metrics = metric_set(roc_auc))\n\nℹ The workflow being saved contains a recipe, which is 6.79 Mb in ℹ memory. If\nthis was not intentional, please set the control setting ℹ `save_workflow =\nFALSE`.\n\n\n\n\n\nVisual examination\n\nlr_results |&gt; \n  collect_metrics() |&gt; \n  ggplot(aes(x = penalty, y = mean)) + \n  geom_point() + \n  geom_line() + \n  ylab(\"Area under the ROC Curve\") +\n  scale_x_log10(labels = scales::label_number())\n\n\n\n\n\n\n\n\n\n\n\n\nlr_results |&gt; show_best()\n\nWarning in show_best(lr_results): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\n\n# A tibble: 5 × 7\n   penalty .metric .estimator  mean     n std_err .config              \n     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n1 0.00137  roc_auc binary     0.877     5 0.00296 Preprocessor1_Model12\n2 0.00174  roc_auc binary     0.877     5 0.00310 Preprocessor1_Model13\n3 0.00108  roc_auc binary     0.876     5 0.00285 Preprocessor1_Model11\n4 0.00221  roc_auc binary     0.876     5 0.00326 Preprocessor1_Model14\n5 0.000853 roc_auc binary     0.876     5 0.00280 Preprocessor1_Model10\n\nlr_best &lt;- lr_results |&gt; select_best()\n\nWarning in select_best(lr_results): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\nlr_best\n\n# A tibble: 1 × 2\n  penalty .config              \n    &lt;dbl&gt; &lt;chr&gt;                \n1 0.00137 Preprocessor1_Model12\n\n\n\n\n\n\nlr_best_fit &lt;- lr_results |&gt; fit_best()\nlr_best_fit\n\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n6 Recipe Steps\n\n• step_date()\n• step_holiday()\n• step_rm()\n• step_dummy()\n• step_zv()\n• step_normalize()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  glmnet::glmnet(x = maybe_matrix(x), y = y, family = \"binomial\",      alpha = ~1) \n\n    Df  %Dev   Lambda\n1    0  0.00 0.078680\n2    1  2.44 0.071690\n3    2  5.20 0.065320\n4    3  7.59 0.059520\n5    3  9.78 0.054230\n6    4 12.20 0.049410\n7    4 13.95 0.045020\n8    5 15.58 0.041020\n9    5 17.01 0.037380\n10   5 18.12 0.034060\n11   5 19.01 0.031030\n12   6 19.98 0.028270\n13   6 20.86 0.025760\n14   7 21.58 0.023470\n15   8 22.23 0.021390\n16   8 23.01 0.019490\n17   8 23.61 0.017760\n18   9 24.16 0.016180\n19  10 24.73 0.014740\n20  10 25.19 0.013430\n21  11 25.61 0.012240\n22  13 26.00 0.011150\n23  13 26.37 0.010160\n24  14 26.70 0.009259\n25  17 27.04 0.008436\n26  20 27.43 0.007687\n27  22 27.91 0.007004\n28  24 28.39 0.006382\n29  27 28.87 0.005815\n30  28 29.32 0.005298\n31  32 29.72 0.004828\n32  38 30.12 0.004399\n33  41 30.59 0.004008\n34  45 31.03 0.003652\n35  45 31.41 0.003327\n36  49 31.76 0.003032\n37  50 32.06 0.002762\n38  55 32.33 0.002517\n39  59 32.58 0.002293\n40  63 32.80 0.002090\n41  69 33.01 0.001904\n42  70 33.19 0.001735\n43  74 33.35 0.001581\n44  76 33.48 0.001440\n45  80 33.60 0.001312\n46  84 33.71 0.001196\n\n...\nand 36 more lines.\n\n\n\n\n\n\npredict(lr_best_fit, hotel_test)\n\n# A tibble: 12,500 × 1\n   .pred_class\n   &lt;fct&gt;      \n 1 none       \n 2 none       \n 3 none       \n 4 none       \n 5 none       \n 6 none       \n 7 none       \n 8 none       \n 9 none       \n10 none       \n# ℹ 12,490 more rows\n\n\n\naugment(lr_best_fit, hotel_test)\n\n# A tibble: 12,500 × 26\n   .pred_class .pred_children .pred_none hotel  lead_time stays_in_weekend_nig…¹\n   &lt;fct&gt;                &lt;dbl&gt;      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;                  &lt;dbl&gt;\n 1 none                0.0175      0.983 City_…         1                      1\n 2 none                0.0593      0.941 City_…       205                      0\n 3 none                0.0204      0.980 City_…       134                      0\n 4 none                0.0483      0.952 City_…         5                      2\n 5 none                0.0277      0.972 Resor…       230                      2\n 6 none                0.111       0.889 Resor…        48                      1\n 7 none                0.0581      0.942 Resor…       151                      3\n 8 none                0.0289      0.971 City_…         1                      0\n 9 none                0.0151      0.985 City_…        61                      2\n10 none                0.0483      0.952 Resor…         4                      0\n# ℹ 12,490 more rows\n# ℹ abbreviated name: ¹​stays_in_weekend_nights\n# ℹ 20 more variables: stays_in_week_nights &lt;dbl&gt;, adults &lt;dbl&gt;,\n#   children &lt;fct&gt;, meal &lt;fct&gt;, country &lt;fct&gt;, market_segment &lt;fct&gt;,\n#   distribution_channel &lt;fct&gt;, is_repeated_guest &lt;dbl&gt;,\n#   previous_cancellations &lt;dbl&gt;, previous_bookings_not_canceled &lt;dbl&gt;,\n#   reserved_room_type &lt;fct&gt;, assigned_room_type &lt;fct&gt;, …\n\n\n\n\n\n\nFeature Importance Scores\nModel Stacking\nProbabilistic Predictions\nUncertainty Bounds (Conformal Inference)\nMultilevel (Mixed-Effect) Models\nFairness Audits\n\n\n\n\nApplications to course project:\n\n\nTwo variables are statistically independent if one cannot be used to predict the other\nMany questions take the form “Is \\(X\\) related to \\(Y\\)?”\nBuild a model to predict \\(Y\\) from \\(X\\)\n\nIf model doesn’t use \\(X\\) (small coefficient or importance), unlikely to be related\nMove beyond simple linear correlation\n\nAlso consider occlusion studies\n\n\n\n\n\nFor more:\n\nModeling - future STA and CIS classes\ntidymodels - Case Study\n\n. . .\nTo see more worked examples of predictive models, check out the tidymodels Gallery"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#where-are-we",
    "href": "slides/2025-04-29/09b_modeling_II.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\n\nStatistical Analysis\n\nTidy Data Manipulation\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#goals-for-this-video",
    "href": "slides/2025-04-29/09b_modeling_II.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nWhat is Predictive Modeling?\nThe tidymodels Ecosystem"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#tidymodels",
    "href": "slides/2025-04-29/09b_modeling_II.html#tidymodels",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tidymodels",
    "text": "tidymodels\nStrength of R:\n\nThousands of authors contributing packages to CRAN\n\n\nWeakness of R:\n\nThousands of authors contributing slightly incompatible packages to CRAN\n\n\n\nNo two modeling packages have exactly the same API. Makes changing between interfaces cumbersome"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#tidymodels-1",
    "href": "slides/2025-04-29/09b_modeling_II.html#tidymodels-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tidymodels",
    "text": "tidymodels\ntidymodels attemps to provide a uniform interface to a wide variety of predictive Machine Learning tools\nAdvantages:\n\nEasy to swap out different algorithms to find the best\n\nDisadvantages:\n\nHarder to take advantage of the strengths of each approach"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#ml-vs-statistical-pipelines",
    "href": "slides/2025-04-29/09b_modeling_II.html#ml-vs-statistical-pipelines",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "ML vs Statistical Pipelines",
    "text": "ML vs Statistical Pipelines\nStatistics / Data Science:\n\nFind the model that fits the data best\nModel should capture all important data features\nInterpretability\nHistory: Grounded in lab sciences where experiments are expensive and data is limited"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#ml-vs-statistical-pipelines-1",
    "href": "slides/2025-04-29/09b_modeling_II.html#ml-vs-statistical-pipelines-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "ML vs Statistical Pipelines",
    "text": "ML vs Statistical Pipelines\nMachine Learning:\n\nFind the model that predicts the data best\nNo “perfect” model - just the best one we’ve found so far\nBlack-box techniques are great, if effective\nHistory: Silicon Valley “at scale”\n\nValidation based on of-of-sample or test predictions"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#validating-predictive-power",
    "href": "slides/2025-04-29/09b_modeling_II.html#validating-predictive-power",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Validating Predictive Power",
    "text": "Validating Predictive Power\nHow to check whether a model predicts well?\n\nNeed more data! But where to get more data?\n\nActually get more data (hard, expensive, slow)\nSplit data into parts - test/training split\nCross-Validation\nResampling\n\n\n\nToday, we’ll primarily use a combination: Test/Train split & Cross-Validation!"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#cross-validation",
    "href": "slides/2025-04-29/09b_modeling_II.html#cross-validation",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Cross-Validation",
    "text": "Cross-Validation\n\nCross-Validation is done on the estimator, not the fitted algorithm"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#tidymodels-2",
    "href": "slides/2025-04-29/09b_modeling_II.html#tidymodels-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tidymodels",
    "text": "tidymodels\ntidymodels workflow:\n\nInitial Split\nPre-Process\nFit (many) models\nSelect best\nRefit\nTest Set Assessment\n\ntidymodels is very punny, so a bit hard to tell which step is which…"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#acquire-data",
    "href": "slides/2025-04-29/09b_modeling_II.html#acquire-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Acquire Data",
    "text": "Acquire Data\n\nlibrary(tidymodels); library(readr)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n\n\n✔ broom        1.0.8     ✔ rsample      1.3.0\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.8     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.1     ✔ yardstick    1.3.2\n✔ recipes      1.3.0     \n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n\nhotels &lt;- \n  read_csv(\"https://tidymodels.org/start/case-study/hotels.csv\") |&gt;\n  mutate(across(where(is.character), as.factor))\n\nRows: 50000 Columns: 23\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): hotel, children, meal, country, market_segment, distribution_chan...\ndbl  (11): lead_time, stays_in_weekend_nights, stays_in_week_nights, adults,...\ndate  (1): arrival_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(hotels)\n\nRows: 50,000\nColumns: 23\n$ hotel                          &lt;fct&gt; City_Hotel, City_Hotel, Resort_Hotel, R…\n$ lead_time                      &lt;dbl&gt; 217, 2, 95, 143, 136, 67, 47, 56, 80, 6…\n$ stays_in_weekend_nights        &lt;dbl&gt; 1, 0, 2, 2, 1, 2, 0, 0, 0, 2, 1, 0, 1, …\n$ stays_in_week_nights           &lt;dbl&gt; 3, 1, 5, 6, 4, 2, 2, 3, 4, 2, 2, 1, 2, …\n$ adults                         &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 1, 2, …\n$ children                       &lt;fct&gt; none, none, none, none, none, none, chi…\n$ meal                           &lt;fct&gt; BB, BB, BB, HB, HB, SC, BB, BB, BB, BB,…\n$ country                        &lt;fct&gt; DEU, PRT, GBR, ROU, PRT, GBR, ESP, ESP,…\n$ market_segment                 &lt;fct&gt; Offline_TA/TO, Direct, Online_TA, Onlin…\n$ distribution_channel           &lt;fct&gt; TA/TO, Direct, TA/TO, TA/TO, Direct, TA…\n$ is_repeated_guest              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_cancellations         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_bookings_not_canceled &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ reserved_room_type             &lt;fct&gt; A, D, A, A, F, A, C, B, D, A, A, D, A, …\n$ assigned_room_type             &lt;fct&gt; A, K, A, A, F, A, C, A, D, A, D, D, A, …\n$ booking_changes                &lt;dbl&gt; 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ deposit_type                   &lt;fct&gt; No_Deposit, No_Deposit, No_Deposit, No_…\n$ days_in_waiting_list           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ customer_type                  &lt;fct&gt; Transient-Party, Transient, Transient, …\n$ average_daily_rate             &lt;dbl&gt; 80.75, 170.00, 8.00, 81.00, 157.60, 49.…\n$ required_car_parking_spaces    &lt;fct&gt; none, none, none, none, none, none, non…\n$ total_of_special_requests      &lt;dbl&gt; 1, 3, 2, 1, 4, 1, 1, 1, 1, 1, 0, 1, 0, …\n$ arrival_date                   &lt;date&gt; 2016-09-01, 2017-08-25, 2016-11-19, 20…"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#initial-split",
    "href": "slides/2025-04-29/09b_modeling_II.html#initial-split",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Initial Split",
    "text": "Initial Split\n\n# Stratified sampling to ensure balance\nsplits      &lt;- initial_split(hotels, \n                             strata = children)\n\nhotel_train &lt;- training(splits)\nhotel_test  &lt;- testing(splits)\n\nhotel_train\n\n# A tibble: 37,500 × 23\n   hotel   lead_time stays_in_weekend_nig…¹ stays_in_week_nights adults children\n   &lt;fct&gt;       &lt;dbl&gt;                  &lt;dbl&gt;                &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;   \n 1 City_H…       217                      1                    3      2 none    \n 2 City_H…         2                      0                    1      2 none    \n 3 Resort…        95                      2                    5      2 none    \n 4 Resort…       143                      2                    6      2 none    \n 5 Resort…       136                      1                    4      2 none    \n 6 City_H…        67                      2                    2      2 none    \n 7 Resort…        47                      0                    2      2 children\n 8 City_H…        56                      0                    3      0 children\n 9 City_H…        80                      0                    4      2 none    \n10 City_H…         6                      2                    2      2 children\n# ℹ 37,490 more rows\n# ℹ abbreviated name: ¹​stays_in_weekend_nights\n# ℹ 17 more variables: meal &lt;fct&gt;, country &lt;fct&gt;, market_segment &lt;fct&gt;,\n#   distribution_channel &lt;fct&gt;, is_repeated_guest &lt;dbl&gt;,\n#   previous_cancellations &lt;dbl&gt;, previous_bookings_not_canceled &lt;dbl&gt;,\n#   reserved_room_type &lt;fct&gt;, assigned_room_type &lt;fct&gt;, booking_changes &lt;dbl&gt;,\n#   deposit_type &lt;fct&gt;, days_in_waiting_list &lt;dbl&gt;, customer_type &lt;fct&gt;, …"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#pre-process",
    "href": "slides/2025-04-29/09b_modeling_II.html#pre-process",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Pre-Process",
    "text": "Pre-Process\n\nlibrary(recipes)\n\n\nholidays &lt;- c(\"AllSouls\", \"AshWednesday\", \"ChristmasEve\", \"Easter\", \n              \"ChristmasDay\", \"GoodFriday\", \"NewYearsDay\", \"PalmSunday\")\n\nlr_recipe &lt;- \n  recipe(children ~ ., data = hotels) |&gt; \n  step_date(arrival_date) |&gt; \n  step_holiday(arrival_date, holidays = holidays) |&gt; \n  step_rm(arrival_date) |&gt; \n  step_dummy(all_nominal_predictors()) |&gt; \n  step_zv(all_predictors()) |&gt; \n  step_normalize(all_predictors())\n\nlr_recipe\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:    1\npredictor: 22\n\n\n\n\n\n── Operations \n\n\n• Date features from: arrival_date\n\n\n• Holiday features from: arrival_date\n\n\n• Variables removed: arrival_date\n\n\n• Dummy variables from: all_nominal_predictors()\n\n\n• Zero variance filter on: all_predictors()\n\n\n• Centering and scaling for: all_predictors()"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#fit-models",
    "href": "slides/2025-04-29/09b_modeling_II.html#fit-models",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Fit Models",
    "text": "Fit Models\n\nlr_model &lt;- \n  logistic_reg(penalty = tune(), mixture = 1) |&gt; \n  set_engine(\"glmnet\")\n\nlr_model\n\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#select-best",
    "href": "slides/2025-04-29/09b_modeling_II.html#select-best",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Select Best",
    "text": "Select Best\nFind a grid of parameters\n\nlr_reg_grid &lt;- data.frame(penalty = 10^seq(-4, -1, length.out = 30))\n\nPerform CV splits:\n\nlr_folds &lt;- vfold_cv(hotel_train, v = 5)"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#select-best-1",
    "href": "slides/2025-04-29/09b_modeling_II.html#select-best-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Select Best",
    "text": "Select Best\nDefine a workflow:\n\nlr_workflow &lt;-  \n  workflow() |&gt; \n  add_model(lr_model) |&gt; \n  add_recipe(lr_recipe)\n\nFit workflow to a grid of parameters:\n\nlr_results &lt;- \n  lr_workflow |&gt; \n  tune_grid(grid = lr_reg_grid,\n            control = control_grid(save_pred = TRUE, \n                                   save_workflow=TRUE),\n            resamples = lr_folds,\n            metrics = metric_set(roc_auc))\n\nℹ The workflow being saved contains a recipe, which is 6.79 Mb in ℹ memory. If\nthis was not intentional, please set the control setting ℹ `save_workflow =\nFALSE`."
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#select-best-2",
    "href": "slides/2025-04-29/09b_modeling_II.html#select-best-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Select Best",
    "text": "Select Best\nVisual examination\n\nlr_results |&gt; \n  collect_metrics() |&gt; \n  ggplot(aes(x = penalty, y = mean)) + \n  geom_point() + \n  geom_line() + \n  ylab(\"Area under the ROC Curve\") +\n  scale_x_log10(labels = scales::label_number())"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#select-best-3",
    "href": "slides/2025-04-29/09b_modeling_II.html#select-best-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Select Best",
    "text": "Select Best\n\nlr_results |&gt; show_best()\n\nWarning in show_best(lr_results): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\n\n# A tibble: 5 × 7\n   penalty .metric .estimator  mean     n std_err .config              \n     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n1 0.00137  roc_auc binary     0.877     5 0.00296 Preprocessor1_Model12\n2 0.00174  roc_auc binary     0.877     5 0.00310 Preprocessor1_Model13\n3 0.00108  roc_auc binary     0.876     5 0.00285 Preprocessor1_Model11\n4 0.00221  roc_auc binary     0.876     5 0.00326 Preprocessor1_Model14\n5 0.000853 roc_auc binary     0.876     5 0.00280 Preprocessor1_Model10\n\nlr_best &lt;- lr_results |&gt; select_best()\n\nWarning in select_best(lr_results): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\nlr_best\n\n# A tibble: 1 × 2\n  penalty .config              \n    &lt;dbl&gt; &lt;chr&gt;                \n1 0.00137 Preprocessor1_Model12"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#refit-best-model",
    "href": "slides/2025-04-29/09b_modeling_II.html#refit-best-model",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Refit Best Model",
    "text": "Refit Best Model\n\nlr_best_fit &lt;- lr_results |&gt; fit_best()\nlr_best_fit\n\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n6 Recipe Steps\n\n• step_date()\n• step_holiday()\n• step_rm()\n• step_dummy()\n• step_zv()\n• step_normalize()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  glmnet::glmnet(x = maybe_matrix(x), y = y, family = \"binomial\",      alpha = ~1) \n\n    Df  %Dev   Lambda\n1    0  0.00 0.078680\n2    1  2.44 0.071690\n3    2  5.20 0.065320\n4    3  7.59 0.059520\n5    3  9.78 0.054230\n6    4 12.20 0.049410\n7    4 13.95 0.045020\n8    5 15.58 0.041020\n9    5 17.01 0.037380\n10   5 18.12 0.034060\n11   5 19.01 0.031030\n12   6 19.98 0.028270\n13   6 20.86 0.025760\n14   7 21.58 0.023470\n15   8 22.23 0.021390\n16   8 23.01 0.019490\n17   8 23.61 0.017760\n18   9 24.16 0.016180\n19  10 24.73 0.014740\n20  10 25.19 0.013430\n21  11 25.61 0.012240\n22  13 26.00 0.011150\n23  13 26.37 0.010160\n24  14 26.70 0.009259\n25  17 27.04 0.008436\n26  20 27.43 0.007687\n27  22 27.91 0.007004\n28  24 28.39 0.006382\n29  27 28.87 0.005815\n30  28 29.32 0.005298\n31  32 29.72 0.004828\n32  38 30.12 0.004399\n33  41 30.59 0.004008\n34  45 31.03 0.003652\n35  45 31.41 0.003327\n36  49 31.76 0.003032\n37  50 32.06 0.002762\n38  55 32.33 0.002517\n39  59 32.58 0.002293\n40  63 32.80 0.002090\n41  69 33.01 0.001904\n42  70 33.19 0.001735\n43  74 33.35 0.001581\n44  76 33.48 0.001440\n45  80 33.60 0.001312\n46  84 33.71 0.001196\n\n...\nand 36 more lines."
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#test-set-assessment",
    "href": "slides/2025-04-29/09b_modeling_II.html#test-set-assessment",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Test Set Assessment",
    "text": "Test Set Assessment\n\npredict(lr_best_fit, hotel_test)\n\n# A tibble: 12,500 × 1\n   .pred_class\n   &lt;fct&gt;      \n 1 none       \n 2 none       \n 3 none       \n 4 none       \n 5 none       \n 6 none       \n 7 none       \n 8 none       \n 9 none       \n10 none       \n# ℹ 12,490 more rows\n\n\n\naugment(lr_best_fit, hotel_test)\n\n# A tibble: 12,500 × 26\n   .pred_class .pred_children .pred_none hotel  lead_time stays_in_weekend_nig…¹\n   &lt;fct&gt;                &lt;dbl&gt;      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;                  &lt;dbl&gt;\n 1 none                0.0175      0.983 City_…         1                      1\n 2 none                0.0593      0.941 City_…       205                      0\n 3 none                0.0204      0.980 City_…       134                      0\n 4 none                0.0483      0.952 City_…         5                      2\n 5 none                0.0277      0.972 Resor…       230                      2\n 6 none                0.111       0.889 Resor…        48                      1\n 7 none                0.0581      0.942 Resor…       151                      3\n 8 none                0.0289      0.971 City_…         1                      0\n 9 none                0.0151      0.985 City_…        61                      2\n10 none                0.0483      0.952 Resor…         4                      0\n# ℹ 12,490 more rows\n# ℹ abbreviated name: ¹​stays_in_weekend_nights\n# ℹ 20 more variables: stays_in_week_nights &lt;dbl&gt;, adults &lt;dbl&gt;,\n#   children &lt;fct&gt;, meal &lt;fct&gt;, country &lt;fct&gt;, market_segment &lt;fct&gt;,\n#   distribution_channel &lt;fct&gt;, is_repeated_guest &lt;dbl&gt;,\n#   previous_cancellations &lt;dbl&gt;, previous_bookings_not_canceled &lt;dbl&gt;,\n#   reserved_room_type &lt;fct&gt;, assigned_room_type &lt;fct&gt;, …"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#other-tidymodels-tools",
    "href": "slides/2025-04-29/09b_modeling_II.html#other-tidymodels-tools",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Other tidymodels tools",
    "text": "Other tidymodels tools\n\nFeature Importance Scores\nModel Stacking\nProbabilistic Predictions\nUncertainty Bounds (Conformal Inference)\nMultilevel (Mixed-Effect) Models\nFairness Audits"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#looking-ahead",
    "href": "slides/2025-04-29/09b_modeling_II.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\nApplications to course project:\n\n\nTwo variables are statistically independent if one cannot be used to predict the other\nMany questions take the form “Is \\(X\\) related to \\(Y\\)?”\nBuild a model to predict \\(Y\\) from \\(X\\)\n\nIf model doesn’t use \\(X\\) (small coefficient or importance), unlikely to be related\nMove beyond simple linear correlation\n\nAlso consider occlusion studies"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#learning-more",
    "href": "slides/2025-04-29/09b_modeling_II.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more:\n\nModeling - future STA and CIS classes\ntidymodels - Case Study\n\n\nTo see more worked examples of predictive models, check out the tidymodels Gallery"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html",
    "href": "slides/2025-04-29/11_python_basics_syntax.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nBasic Syntax of python\npython Containers\nFunction Calls in python\n\n\n\n\n\nLike R, python has literal syntax for basic types\n\nintegers\nreal numbers\nstrings\n\n\n3\n3.5\n\"abc\"\n\nFor basic types, essentially unchanged\n\n\n\npython only assigns with the = operator (no &lt;-)\n\nx = \"abc\"\ny = 3.5 + 200\nz = 200\nx\n\n'abc'\n\n\nFunctions are defined differently (later)\n\n\n\npython variable names are similar to R:\n\nAny lower/upper letters\nNumbers and underscores not at start\n\n. . .\nPython convention is to name variables and functions in\nsnake_case\nwith CamelCase for types (later)\n. . .\nNo analogy to R backticks (non-syntactic names)\n\n\n\nBasic arithmetic looks like R: +, -, *, /\nDifferences:\n\n^ is bitwise XOR: use ** instead\n// integer division (in R, %/%)\n% division remainder (in R, %%)\n\n\ninterest_rate = 0.03 # 3% Annual rate\nmonthly_rate = (1 + interest_rate) ** (1/12) - 1\n\n\n\n\nIn python, scalars are real (not just length-1 vectors)\n\nlen(5)\n\nTypeError: object of type 'int' has no len()\n\n\nvs equivalent R:\n\nlength(5)\n\n[1] 1\n\n\n. . .\nThree primary containers in python\n\nlist\nset\ndict\n\n\n\n\nA python list is (like R):\n\nan ordered container\nof arbitrary types\n\n\nx = [1, 3.5, \"fish\", [\"a\", \"different\", \"list\"]]\n\n. . .\nUnlike R, python is zero-based!\n\nx[2] # Third item!\n\n'fish'\n\n\n\n\n\n\nx = [1, 3.5, \"fish\", [\"a\", \"different\", \"list\"]]\n\n1 in x\n\nTrue\n\n2 in x\n\nFalse\n\n\"list\" in x \n\nFalse\n\ndel x[2] # Remove _third_ item!\nx\n\n[1, 3.5, ['a', 'different', 'list']]\n\n\n\n\n\nA python set is:\n\nan unordered container\nof arbitrary types\nwithout duplicates\n\n\nx = {1, 3.5, \"fish\", 3.5}\nx\n\n{1, 3.5, 'fish'}\n\n\nNote no repeat in x (3.5)\nCan’t put lists inside sets\n\n\n\nTo check if item is in set, use in operator:\n\nx\n\n{1, 3.5, 'fish'}\n\n2 in x\n\nFalse\n\n1 in x\n\nTrue\n\n\nSet operations:\n\nx = {1, 2, 3}\ny = {3, 4, 5}\nx & y # Intersection\n\n{3}\n\nx | y # Union\n\n{1, 2, 3, 4, 5}\n\nx - y # Set difference\n\n{1, 2}\n\n\n\n\n\nA python dict is:\n\nAn unordered mapping\nkey =&gt; value pairs\n\nIncredibly useful for ‘look-ups’\n\nx = {\"Zicklin\": \"Business\", \"Weissman\": \"A&S\", \"Marxe\": \"Public Affairs\"}\nx[\"Zicklin\"]\n\n'Business'\n\n\n. . .\nSome rules about what the keys can be - strings are a good baseline\n\n\n\n\nx\n\n{'Zicklin': 'Business', 'Weissman': 'A&S', 'Marxe': 'Public Affairs'}\n\nx[\"Zicklin\"]\n\n'Business'\n\n\"Zicklin\" in x\n\nTrue\n\n\"Baruch\" in x\n\nFalse\n\ndel x[\"Zicklin\"] # Remove (delete) a pair\nx\n\n{'Weissman': 'A&S', 'Marxe': 'Public Affairs'}\n\nx[\"Baruch\"] = \"Awesome\" # Set value\nx[\"Baruch\"]\n\n'Awesome'\n\n\n\n\n\nA tuple is a ‘frozen’ list\n\nx = [1, 2, 3]\ny = (1, 2, 3)\n\ndel x[0]\ndel y[0]\n\nTypeError: 'tuple' object doesn't support item deletion\n\n\nVery common behind the scenes\n\n\n\n\nUse Basic Syntax ✅\nManipulate Containers ✅\nIterate on Containers\nCall Functions\nControl Flow\n\n\n\n\nSee Section 3.1 of Python for Data Science"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#python-syntax-literals",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#python-syntax-literals",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "python Syntax: Literals",
    "text": "python Syntax: Literals\nLike R, python has literal syntax for basic types\n\nintegers\nreal numbers\nstrings\n\n\n3\n\n3\n\n3.5\n\n3.5\n\n\"abc\"\n\n'abc'"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#python-syntax-assignment",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#python-syntax-assignment",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "python Syntax: Assignment",
    "text": "python Syntax: Assignment\npython only assigns with the = operator (no &lt;-)\n\nx = \"abc\"\nx\n\n'abc'"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#python-syntax-names",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#python-syntax-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "python Syntax: Names",
    "text": "python Syntax: Names"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#python-syntax-assignment-1",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#python-syntax-assignment-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "python Syntax: Assignment",
    "text": "python Syntax: Assignment"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#python-vs-r",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#python-vs-r",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "python vs R",
    "text": "python vs R"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#syntax-literals",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#syntax-literals",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Syntax: Literals",
    "text": "Syntax: Literals\nLike R, python has literal syntax for basic types\n\nintegers\nreal numbers\nstrings\n\n\n3\n3.5\n\"abc\"\n\nFor basic types, essentially unchanged"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#syntax-assignment",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#syntax-assignment",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Syntax: Assignment",
    "text": "Syntax: Assignment\npython only assigns with the = operator (no &lt;-)\n\nx = \"abc\"\ny = 3.5 + 200\nz = 200\nx\n\n'abc'\n\n\nFunctions are defined differently (later)"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#syntax-names",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#syntax-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Syntax: Names",
    "text": "Syntax: Names\npython variable names are similar to R:\n\nAny lower/upper letters\nNumbers and underscores not at start\n\n\nPython convention is to name variables and functions in\nsnake_case\nwith CamelCase for types (later)\n\n\nNo analogy to R backticks (non-syntactic names)"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#syntax-arithmetic",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#syntax-arithmetic",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Syntax: Arithmetic",
    "text": "Syntax: Arithmetic\nBasic arithmetic looks like R: +, -, *, /\nDifferences:\n\n^ is bitwise XOR: use ** instead\n// integer division (in R, %/%)\n% division remainder (in R, %%)\n\n\ninterest_rate = 0.03 # 3% Annual rate\nmonthly_rate = (1 + interest_rate) ** (1/12) - 1"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#containers",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#containers",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Containers",
    "text": "Containers\nIn python, scalars are real (not just length-1 vectors)\n\nlen(5)\n\nTypeError: object of type 'int' has no len()\n\n\nvs equivalent R:\n\nlength(5)\n\n[1] 1\n\n\n\nThree primary containers in python\n\nlist\nset\ndict"
  },
  {
    "objectID": "slides/2025-04-29/09b_modeling_II.html#tidymodels-tools",
    "href": "slides/2025-04-29/09b_modeling_II.html#tidymodels-tools",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tidymodels tools",
    "text": "tidymodels tools\n\nFeature Importance Scores\nModel Stacking\nProbabilistic Predictions\nUncertainty Bounds (Conformal Inference)\nMultilevel (Mixed-Effect) Models\nFairness Audits"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#list-objects",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#list-objects",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "list Objects",
    "text": "list Objects\nA python list is (like R):\n\nan ordered container\nof arbitrary types\n\n\nx = [1, 3.5, \"fish\", [\"a\", \"different\", \"list\"]]\n\n\nUnlike R, python is zero-based!\n\nx[2] # Third item!\n\n'fish'"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#set-objects",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#set-objects",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "set Objects",
    "text": "set Objects\nA python set is:\n\nan unordered container\nof arbitrary types\nwithout duplicates\n\n\nx = {1, 3.5, \"fish\", 3.5}\nx\n\n{1, 3.5, 'fish'}\n\n\nNote no repeat in x (3.5)\nCan’t put lists inside sets"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#dict-objects",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#dict-objects",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "dict Objects",
    "text": "dict Objects\nA python dict is:\n\nAn unordered mapping\nkey =&gt; value pairs\n\nIncredibly useful for ‘look-ups’\n\nx = {\"Zicklin\": \"Business\", \"Weissman\": \"A&S\", \"Marxe\": \"Public Affairs\"}\nx[\"Zicklin\"]\n\n'Business'\n\n\n\nSome rules about what the keys can be - strings are a good baseline"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#dict-objects-1",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#dict-objects-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "dict Objects",
    "text": "dict Objects\n\nx\n\n{'Zicklin': 'Business', 'Weissman': 'A&S', 'Marxe': 'Public Affairs'}\n\nx[\"Zicklin\"]\n\n'Business'\n\n\"Zicklin\" in x\n\nTrue\n\n\"Baruch\" in x\n\nFalse\n\ndel x[\"Zicklin\"] # Remove (delete) a pair\nx\n\n{'Weissman': 'A&S', 'Marxe': 'Public Affairs'}\n\nx[\"Baruch\"] = \"Awesome\" # Set value\nx[\"Baruch\"]\n\n'Awesome'"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#list-objects-1",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#list-objects-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "list Objects",
    "text": "list Objects\n\nx = [1, 3.5, \"fish\", [\"a\", \"different\", \"list\"]]\n\n1 in x\n\nTrue\n\n2 in x\n\nFalse\n\n\"list\" in x \n\nFalse\n\ndel x[2] # Remove _third_ item!\nx\n\n[1, 3.5, ['a', 'different', 'list']]"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#set-objects-1",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#set-objects-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "set Objects",
    "text": "set Objects\nTo check if item is in set, use in operator:\n\nx\n\n{1, 3.5, 'fish'}\n\n2 in x\n\nFalse\n\n1 in x\n\nTrue\n\n\nSet operations:\n\nx = {1, 2, 3}\ny = {3, 4, 5}\nx & y # Intersection\n\n{3}\n\nx | y # Union\n\n{1, 2, 3, 4, 5}\n\nx - y # Set difference\n\n{1, 2}"
  },
  {
    "objectID": "slides/2025-04-29/11_python_basics_syntax.html#tuple",
    "href": "slides/2025-04-29/11_python_basics_syntax.html#tuple",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tuple",
    "text": "tuple\nA tuple is a ‘frozen’ list\n\nx = [1, 2, 3]\ny = (1, 2, 3)\n\ndel x[0]\ndel y[0]\n\nTypeError: 'tuple' object doesn't support item deletion\n\n\nVery common behind the scenes"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html",
    "href": "slides/2025-04-29/12_python_basics_control.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nBlock-based Control Flow\nIterating over Containers\nFunction Calls\nDefining Functions\n\n\n\n\n\nRecall in R, “blocks” of code were delimited by braces {}\n\nx &lt;- -3\nif(x &gt; 0){\n    print(\"x is positive\")\n} else {\n    print(\"x is negative\")\n}\n\n[1] \"x is negative\"\n\n\n\n\n\npython uses indented blocks instead:\n\nx = 1\nif x &gt; 0:\n    print(\"x is positive\")\nelse:\n    print(\"x is negative\")\n\nx is positive\n\n\nNo explicit end - just next non-indented line\n\n\n\nIf you’ve used good formatting in R, won’t be a huge shift\n. . .\nTricky at command line (have to manually indent whole blocks):\n\nnotebook based execution preferred\n\n. . .\nYou must be consistent (number of spaces, tabs vs spaces)\n\nRecommendation: 4 spaces per ‘level’\n\n\n\n\nNesting requires multiple indents:\n\nx = 100\nif x &gt; 0:\n    print(\"x is positive\")\n    \n    if x &gt;= 100: \n        print(\"x has three digits\")\nelse:\n    print(\"x is negative\")\n\nx is positive\nx has three digits\n\n\n\n\n\npython provides an elif where in R we used else if:\n\nx = 0\nif x &gt; 0:\n    print(\"x is positive\")\nelif x &lt; 0:\n    print(\"x is negative\")\nelse: \n    print(\"x is zero\")\n\nx is zero\n\n\nNeither elif or else are required, but else must be last\n\n\n\nUnlike R, explicit loops are common (and good!) in python\n\nlist_of_numbers = [1, 2, 3]\nfor number in list_of_numbers:\n    print(\"The number is\", number)\n\nThe number is 1\nThe number is 2\nThe number is 3\n\n\n\n\n\nLoops over lists and tuples are “natural”\n\nmy_tuple = (1, 2, \"fish\", [\"bottle\", \"of\", \"rum\"])\nfor item in my_tuple:\n    print(item)\n\n1\n2\nfish\n['bottle', 'of', 'rum']\n\n\n\n\n\nOften we want to loop and count: enumerate\n\nmy_courses = [\"STA 9750\", \"STA 9708\", \"STA 9700\"]\nfor num, course in enumerate(my_courses):\n    print(\"Course Number\", num, \"is\", course)\n\nCourse Number 0 is STA 9750\nCourse Number 1 is STA 9708\nCourse Number 2 is STA 9700\n\n\n. . .\nRecall 0-based, so you may prefer\n\nmy_courses = [\"STA 9750\", \"STA 9708\", \"STA 9700\"]\nfor num, course in enumerate(my_courses):\n    print(\"Course Number\", num + 1, \"is\", course)\n\nCourse Number 1 is STA 9750\nCourse Number 2 is STA 9708\nCourse Number 3 is STA 9700\n\n\n\n\n\nset objects are looped in an unpredictable order\n\nmy_set = {\"cat\", \"dog\", \"cow\", \"horse\"}\nfor num, animal in enumerate(my_set):\n    print(\"Animal Number\", num + 1, \"is\", animal)\n\nAnimal Number 1 is dog\nAnimal Number 2 is cow\nAnimal Number 3 is horse\nAnimal Number 4 is cat\n\n\nOften but not always order of creation\n\nCan’t depend on this\n\n\n\n\nBy default, a dict loops on its keys only\n\nanimals = {\n    \"dog\": \"Canis familiaris\",\n    \"cat\": \"Felis catus\", \n    \"human\": \"Homo sapiens\",\n    \"cow\": \"Bos taurus\"\n}\nfor english in animals: \n    print(\"The Latin name for\", english, \"is\", animals[english])\n\nThe Latin name for dog is Canis familiaris\nThe Latin name for cat is Felis catus\nThe Latin name for human is Homo sapiens\nThe Latin name for cow is Bos taurus\n\n\n\n\n\nTo loop on key-value pairs use the .items() method\n\nanimals = {\n    \"dog\": \"Canis familiaris\",\n    \"cat\": \"Felis catus\", \n    \"human\": \"Homo sapiens\",\n    \"cow\": \"Bos taurus\"\n}\nfor english, latin in animals.items(): \n    print(\"The Latin name for\", english, \"is\", latin)\n\nThe Latin name for dog is Canis familiaris\nThe Latin name for cat is Felis catus\nThe Latin name for human is Homo sapiens\nThe Latin name for cow is Bos taurus\n\n\n(We will cover methods in more detail later)\n\n\n\npython allows compact a loop syntax called a comprehension\n\nx = [1, 2, 3, 2, 1]\nx_sq = [n**2 for n in x]\n\nCreates and captures n**2 into a list automatically!\n. . .\nMuch nicer than:\n\nx = [1, 2, 3, 2, 1]\nx_sq = []\nfor n in x:\n    x_sq.append(n**2)\n\n\n\n\nAlso supports set and dict comprehensions:\n\nx = [1, 2, 3, 2, 1]\n[n**2 for n in x] # List comprehension\n\n[1, 4, 9, 4, 1]\n\n{n**2 for n in x} # Set comprehension (removes dupes)\n\n{1, 4, 9}\n\n{n:n**2 for n in x} # Dict comprehension (key-value)\n\n{1: 1, 2: 4, 3: 9}\n\n\n\n\n\nComprehensions can even nest conditionals:\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_squares = [n**2 for n in x if n % 2 == 0] \neven_squares\n\n[4, 16, 36, 64, 100]\n\n\n. . .\nYou can do a lot inside a comprehension, but don’t go crazy\n\n\n\nBasic function calls look like R:\n\nfunction_name(argument1, argument2)\n\nYou have already seen the print() and enumerate() functions\n\n\n\nYou can get help with the built-in help function:\n\nhelp(print)\nhelp(enumerate)\n\n\n\n\nSometimes, we pass a named (‘keyword’) argument:\n\nprint(1, 2, 3, sep=\"\\n\")\n\n1\n2\n3\n\n\n\n\n\nKeyword arguments must match exactly and must come last\n\nprint(1, 2, 3, sep=\"\\n\", 4)\n\npositional argument follows keyword argument (&lt;string&gt;, line 1)\n\n\n. . .\n\nprint(1, 2, 3, s=\"\\n\")\n\nTypeError: 's' is an invalid keyword argument for print()\n\n\n\n\n\nDefine custom functions with a def statement (not =)\n\ndef say_hello(name):\n    print(\"Hello\", name, \"! It's great to meet you!\")\n\nsay_hello(\"Michael\")\n\nHello Michael ! It's great to meet you!\n\n\n\n\n\nOptional arguments require defaults:\n\ndef say_hello(name, message = \"It's great to meet you!\"):\n    print(\"Hello\", name, \"!\", message)\n\nsay_hello(\"Michael\")\n\nHello Michael ! It's great to meet you!\n\nsay_hello(\"Michael\", \"Welcome to STA 9750!\")\n\nHello Michael ! Welcome to STA 9750!\n\n\n\n\n\nCommon to use None (roughly equivalent to R NULL) for ‘missing’-type default values\n\ndef say_hello(name, message = None):\n    if message: \n        print(\"Hello\", name, \"!\", message)\n    else: \n        print(\"Hello\", name, \"!\")\n\nsay_hello(\"Michael\")\n\nHello Michael !\n\nsay_hello(\"Michael\", \"Welcome to STA 9750!\")\n\nHello Michael ! Welcome to STA 9750!\n\n\n\n\n\n\ndef say_hello(name, message = None):\n    if message: \n        print(\"Hello\", name, \"!\", message)\n    else: \n        print(\"Hello\", name, \"!\")\n\nstudents = [\"Alice\", \"Bob\", \"Carol\"]\n\n[say_hello(s) for s in students]\n\nHello Alice !\nHello Bob !\nHello Carol !\n[None, None, None]\n\n\n\n\n\nOr even\n\n[say_hello(s, \"You are Student Number#\" + str(num)) \n  for num,s in enumerate(students)]\n\nHello Alice ! You are Student Number#0\nHello Bob ! You are Student Number#1\nHello Carol ! You are Student Number#2\n[None, None, None]\n\n\nThis is too complex - a plain loop is more readable here\n\n\n\n\nUse Basic Syntax ✅\nManipulate Containers ✅\nIterate on Containers ✅\nCall Functions ✅\nControl Flow ✅\n\n. . .\nNext, moving beyond basic python to data analysis:\n\nPackages\nThe “Object Model”\nWeb Scraping and Data Import\n\n\n\n\nSee Chapter 3 of Python for Data Science"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#control-flow",
    "href": "slides/2025-04-29/12_python_basics_control.html#control-flow",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Control Flow",
    "text": "Control Flow\nRecall in R, “blocks” of code were delimited by braces {}\n\nx &lt;- -3\nif(x &gt; 0){\n    print(\"x is positive\")\n} else {\n    print(\"x is negative\")\n}\n\n[1] \"x is negative\""
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#control-flow-1",
    "href": "slides/2025-04-29/12_python_basics_control.html#control-flow-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Control Flow",
    "text": "Control Flow\npython uses indented blocks instead:\n\nx = 1\nif x &gt; 0:\n    print(\"x is positive\")\nelse:\n    print(\"x is negative\")\n\nx is positive\n\n\nNo explicit end - just next non-indented line"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#control-flow-2",
    "href": "slides/2025-04-29/12_python_basics_control.html#control-flow-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Control Flow",
    "text": "Control Flow\nIf you’ve used good formatting in R, won’t be a huge shift\n\nTricky at command line (have to manually indent whole blocks):\n\nnotebook based execution preferred\n\n\n\nYou must be consistent (number of spaces, tabs vs spaces)\n\nRecommendation: 4 spaces per ‘level’"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#control-flow-3",
    "href": "slides/2025-04-29/12_python_basics_control.html#control-flow-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Control Flow",
    "text": "Control Flow\nNesting requires multiple indents:\n\nx = 100\nif x &gt; 0:\n    print(\"x is positive\")\n    \n    if x &gt;= 100: \n        print(\"x has three digits\")\nelse:\n    print(\"x is negative\")\n\nx is positive\nx has three digits"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#control-flow-4",
    "href": "slides/2025-04-29/12_python_basics_control.html#control-flow-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Control Flow",
    "text": "Control Flow\npython provides an elif where in R we used else if:\n\nx = 0\nif x &gt; 0:\n    print(\"x is positive\")\nelif x &lt; 0:\n    print(\"x is negative\")\nelse: \n    print(\"x is zero\")\n\nx is zero\n\n\nNeither elif or else are required, but else must be last"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#looping",
    "href": "slides/2025-04-29/12_python_basics_control.html#looping",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looping",
    "text": "Looping\nUnlike R, explicit loops are common (and good!) in python\n\nlist_of_numbers = [1, 2, 3]\nfor number in list_of_numbers:\n    print(\"The number is\", number)\n\nThe number is 1\nThe number is 2\nThe number is 3"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#looping-1",
    "href": "slides/2025-04-29/12_python_basics_control.html#looping-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looping",
    "text": "Looping\nLoops over lists and tuples are “natural”\n\nmy_tuple = (1, 2, \"fish\", [\"bottle\", \"of\", \"rum\"])\nfor item in my_tuple:\n    print(item)\n\n1\n2\nfish\n['bottle', 'of', 'rum']"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#looping-2",
    "href": "slides/2025-04-29/12_python_basics_control.html#looping-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looping",
    "text": "Looping\nOften we want to loop and count: enumerate\n\nmy_courses = [\"STA 9750\", \"STA 9708\", \"STA 9700\"]\nfor num, course in enumerate(my_courses):\n    print(\"Course Number\", num, \"is\", course)\n\nCourse Number 0 is STA 9750\nCourse Number 1 is STA 9708\nCourse Number 2 is STA 9700\n\n\n\nRecall 0-based, so you may prefer\n\nmy_courses = [\"STA 9750\", \"STA 9708\", \"STA 9700\"]\nfor num, course in enumerate(my_courses):\n    print(\"Course Number\", num + 1, \"is\", course)\n\nCourse Number 1 is STA 9750\nCourse Number 2 is STA 9708\nCourse Number 3 is STA 9700"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#looping-sets",
    "href": "slides/2025-04-29/12_python_basics_control.html#looping-sets",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looping sets",
    "text": "Looping sets\nset objects are looped in an unpredictable order\n\nmy_set = {\"cat\", \"dog\", \"cow\", \"horse\"}\nfor num, animal in enumerate(my_set):\n    print(\"Animal Number\", num + 1, \"is\", animal)\n\nAnimal Number 1 is dog\nAnimal Number 2 is cow\nAnimal Number 3 is horse\nAnimal Number 4 is cat\n\n\nOften but not always order of creation\n\nCan’t depend on this"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#looping-dicts",
    "href": "slides/2025-04-29/12_python_basics_control.html#looping-dicts",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looping dicts",
    "text": "Looping dicts\nBy default, a dict loops on its keys only\n\nanimals = {\n    \"dog\": \"Canis familiaris\",\n    \"cat\": \"Felis catus\", \n    \"human\": \"Homo sapiens\",\n    \"cow\": \"Bos taurus\"\n}\nfor english in animals: \n    print(\"The Latin name for\", english, \"is\", animals[english])\n\nThe Latin name for dog is Canis familiaris\nThe Latin name for cat is Felis catus\nThe Latin name for human is Homo sapiens\nThe Latin name for cow is Bos taurus"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#looping-dicts-1",
    "href": "slides/2025-04-29/12_python_basics_control.html#looping-dicts-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looping dicts",
    "text": "Looping dicts\nTo loop on key-value pairs use the .items() method\n\nanimals = {\n    \"dog\": \"Canis familiaris\",\n    \"cat\": \"Felis catus\", \n    \"human\": \"Homo sapiens\",\n    \"cow\": \"Bos taurus\"\n}\nfor english, latin in animals.items(): \n    print(\"The Latin name for\", english, \"is\", latin)\n\nThe Latin name for dog is Canis familiaris\nThe Latin name for cat is Felis catus\nThe Latin name for human is Homo sapiens\nThe Latin name for cow is Bos taurus\n\n\n(We will cover methods in more detail later)"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#comprehensions",
    "href": "slides/2025-04-29/12_python_basics_control.html#comprehensions",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Comprehensions",
    "text": "Comprehensions\npython allows compact a loop syntax called a comprehension\n\nx = [1, 2, 3, 2, 1]\nx_sq = [n**2 for n in x]\n\nCreates and captures n**2 into a list automatically!\n\nMuch nicer than:\n\nx = [1, 2, 3, 2, 1]\nx_sq = []\nfor n in x:\n    x_sq.append(n**2)"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#comprehensions-1",
    "href": "slides/2025-04-29/12_python_basics_control.html#comprehensions-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Comprehensions",
    "text": "Comprehensions\nAlso supports set and dict comprehensions:\n\nx = [1, 2, 3, 2, 1]\n[n**2 for n in x] # List comprehension\n\n[1, 4, 9, 4, 1]\n\n{n**2 for n in x} # Set comprehension (removes dupes)\n\n{1, 4, 9}\n\n{n:n**2 for n in x} # Dict comprehension (key-value)\n\n{1: 1, 2: 4, 3: 9}"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#comprehensions-2",
    "href": "slides/2025-04-29/12_python_basics_control.html#comprehensions-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Comprehensions",
    "text": "Comprehensions\nComprehensions can even nest conditionals:\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_squares = [n**2 for n in x if n % 2 == 0] \neven_squares\n\n[4, 16, 36, 64, 100]\n\n\n\nYou can do a lot inside a comprehension, but don’t go crazy"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#function-calls",
    "href": "slides/2025-04-29/12_python_basics_control.html#function-calls",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Function calls",
    "text": "Function calls\nBasic function calls look like R:\n\nfunction_name(argument1, argument2)\n\nYou have already seen the print() and enumerate() functions"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#function-help",
    "href": "slides/2025-04-29/12_python_basics_control.html#function-help",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Function help",
    "text": "Function help\nYou can get help with the built-in help function:\n\nhelp(print)\nhelp(enumerate)"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#keyword-arguments",
    "href": "slides/2025-04-29/12_python_basics_control.html#keyword-arguments",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Keyword Arguments",
    "text": "Keyword Arguments\nSometimes, we pass a named (‘keyword’) argument:\n\nprint(1, 2, 3, sep=\"\\n\")\n\n1\n2\n3"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#keyword-arguments-1",
    "href": "slides/2025-04-29/12_python_basics_control.html#keyword-arguments-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Keyword Arguments",
    "text": "Keyword Arguments\nKeyword arguments must match exactly and must come last\n\nprint(1, 2, 3, sep=\"\\n\", 4)\n\npositional argument follows keyword argument (&lt;string&gt;, line 1)\n\n\n\n\nprint(1, 2, 3, s=\"\\n\")\n\nTypeError: 's' is an invalid keyword argument for print()"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#defining-functions",
    "href": "slides/2025-04-29/12_python_basics_control.html#defining-functions",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Defining Functions",
    "text": "Defining Functions\nDefine custom functions with a def statement (not =)\n\ndef say_hello(name):\n    print(\"Hello\", name, \"! It's great to meet you!\")\n\nsay_hello(\"Michael\")\n\nHello Michael ! It's great to meet you!"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#defining-functions-1",
    "href": "slides/2025-04-29/12_python_basics_control.html#defining-functions-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Defining Functions",
    "text": "Defining Functions\nOptional arguments require defaults:\n\ndef say_hello(name, message = \"It's great to meet you!\"):\n    print(\"Hello\", name, \"!\", message)\n\nsay_hello(\"Michael\")\n\nHello Michael ! It's great to meet you!\n\nsay_hello(\"Michael\", \"Welcome to STA 9750!\")\n\nHello Michael ! Welcome to STA 9750!"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#defining-functions-2",
    "href": "slides/2025-04-29/12_python_basics_control.html#defining-functions-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Defining Functions",
    "text": "Defining Functions\nCommon to use None (roughly equivalent to R NULL) for ‘missing’-type default values\n\ndef say_hello(name, message = None):\n    if message: \n        print(\"Hello\", name, \"!\", message)\n    else: \n        print(\"Hello\", name, \"!\")\n\nsay_hello(\"Michael\")\n\nHello Michael !\n\nsay_hello(\"Michael\", \"Welcome to STA 9750!\")\n\nHello Michael ! Welcome to STA 9750!"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#put-it-together",
    "href": "slides/2025-04-29/12_python_basics_control.html#put-it-together",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Put it Together!",
    "text": "Put it Together!\n\ndef say_hello(name, message = None):\n    if message: \n        print(\"Hello\", name, \"!\", message)\n    else: \n        print(\"Hello\", name, \"!\")\n\nstudents = [\"Alice\", \"Bob\", \"Carol\"]\n\n[say_hello(s) for s in students]\n\nHello Alice !\nHello Bob !\nHello Carol !\n[None, None, None]"
  },
  {
    "objectID": "slides/2025-04-29/12_python_basics_control.html#put-it-together-1",
    "href": "slides/2025-04-29/12_python_basics_control.html#put-it-together-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Put it Together!",
    "text": "Put it Together!\nOr even\n\n[say_hello(s, \"You are Student Number#\" + str(num)) \n  for num,s in enumerate(students)]\n\nHello Alice ! You are Student Number#0\nHello Bob ! You are Student Number#1\nHello Carol ! You are Student Number#2\n[None, None, None]\n\n\nThis is too complex - a plain loop is more readable here"
  }
]