[
  {
    "objectID": "slides/2025-05-06/13_python_basics_objects.html#where-are-we",
    "href": "slides/2025-05-06/13_python_basics_objects.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-05-06/13_python_basics_objects.html#goals-for-this-video",
    "href": "slides/2025-05-06/13_python_basics_objects.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:"
  },
  {
    "objectID": "slides/2025-05-06/13_python_basics_objects.html#looking-ahead",
    "href": "slides/2025-05-06/13_python_basics_objects.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead"
  },
  {
    "objectID": "slides/2025-05-06/13_python_basics_objects.html#learning-more",
    "href": "slides/2025-05-06/13_python_basics_objects.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More"
  },
  {
    "objectID": "slides/2025-05-06/11_python_basics_syntax.html#where-are-we",
    "href": "slides/2025-05-06/11_python_basics_syntax.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-05-06/11_python_basics_syntax.html#goals-for-this-video",
    "href": "slides/2025-05-06/11_python_basics_syntax.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:"
  },
  {
    "objectID": "slides/2025-05-06/11_python_basics_syntax.html#looking-ahead",
    "href": "slides/2025-05-06/11_python_basics_syntax.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead"
  },
  {
    "objectID": "slides/2025-05-06/11_python_basics_syntax.html#learning-more",
    "href": "slides/2025-05-06/11_python_basics_syntax.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#where-are-we",
    "href": "slides/2025-04-29/09_modeling.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\n\nStatistical Analysis\n\nTidy Data Manipulation\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#goals-for-this-video",
    "href": "slides/2025-04-29/09_modeling.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#looking-ahead",
    "href": "slides/2025-04-29/09_modeling.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead"
  },
  {
    "objectID": "slides/2025-04-29/09_modeling.html#learning-more",
    "href": "slides/2025-04-29/09_modeling.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#where-are-we",
    "href": "slides/2025-04-22/07_dplyr_join.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#goals-for-this-video",
    "href": "slides/2025-04-22/07_dplyr_join.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nIdentify suitable keys\nUnderstand different types of join operators\nSpecify columns to be used in joins"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#looking-ahead",
    "href": "slides/2025-04-22/07_dplyr_join.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables ✅\nReshape Tables with pivot Operations"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#learning-more",
    "href": "slides/2025-04-22/07_dplyr_join.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 19 - “Joins” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#where-are-we",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#goals-for-this-video",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nUnderstand “grouped” dplyr operations\nUse nested/compound group structures\nApply rowwise() operations"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#group_by",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by",
    "text": "group_by\nSo far, we have applied vectorized operations to data.frames:\n\nselect: Keep and drop columns\nmutate: Create new columns\nfilter: Keep and drop rows\n\n\nFor each of these, we have operated on the whole data set\nOften, we instead want to operate on chunks of the data at a time"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#group_by-1",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#group_by-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by",
    "text": "group_by\nRecall our penguins:\n\npenguins\n\n\n\n# A tibble: 344 × 3\n  species bill_length_mm body_mass_g\n  &lt;fct&gt;            &lt;dbl&gt;       &lt;int&gt;\n1 Adelie            39.1        3750\n2 Adelie            39.5        3800\n3 Adelie            40.3        3250\n# ℹ 341 more rows\n\n\n\nHeaviest penguin:\n\npenguins |&gt; slice_max(body_mass_g)\n\n\n\n# A tibble: 1 × 3\n  species bill_length_mm body_mass_g\n  &lt;fct&gt;            &lt;dbl&gt;       &lt;int&gt;\n1 Gentoo            49.2        6300"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#group_by-2",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#group_by-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by",
    "text": "group_by\nHow can we get the heaviest penguin of each species?\n\nConceptually:\n\nSplit the data into three groups\nApply slice_max to each group separately\nCombine the three rows back together\n\n\n\nSometimes called the split-apply-combine paradigm"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#group_by-3",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#group_by-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "group_by",
    "text": "group_by\nImplemented using the group_by adverb\n\nDoesn’t do anything on its own\nChanges the behavior of other functions\n\n\n\npenguins |&gt; group_by(species) |&gt; slice_max(body_mass_g)\n\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe           43.2          19                 197        4775\n2 Chinstrap Dream            52            20.7               210        4800\n3 Gentoo    Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#looking-closer",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#looking-closer",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Closer",
    "text": "Looking Closer\nLet’s take this step-by-step\n\npenguins |&gt; group_by(species)\n\n# A tibble: 344 × 8\n# Groups:   species [3]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nSame data as before, but here # Groups: species[3]"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\ngroup_by changes behavior of aggregating functions:\n\nmin(), max(), n(), sum(), prod(), etc.\n\nMany other operations use these internally"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-1",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nRecall\n\npenguins |&gt; slice_max(body_mass_g)\n\nis equivalent to:\n\npenguins |&gt; filter(body_mass_g == max(body_mass_g, na.rm=TRUE))\n\nor even\n\npenguins |&gt; \n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n    filter(body_mass_g == mass_max)"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-2",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nLooking at the first step\n\npenguins |&gt; \n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n\n\n\n# A tibble: 344 × 3\n  species body_mass_g mass_max\n  &lt;fct&gt;         &lt;int&gt;    &lt;int&gt;\n1 Adelie         3750     6300\n2 Adelie         3800     6300\n3 Adelie         3250     6300\n# ℹ 341 more rows"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-3",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nWith group_by, a different max for each group\n\npenguins |&gt; \n    group_by(species) |&gt;\n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n\n\n\n# A tibble: 344 × 3\n# Groups:   species [3]\n  species body_mass_g mass_max\n  &lt;fct&gt;         &lt;int&gt;    &lt;int&gt;\n1 Adelie         3750     4775\n2 Adelie         3800     4775\n3 Adelie         3250     4775\n# ℹ 341 more rows"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-4",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nHence,\n\npenguins |&gt; \n    group_by(species) |&gt;\n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n    filter(body_mass_g == mass_max)\n\n\npenguins |&gt; group_by(species) |&gt; slice_max(body_mass_g)\n\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe           43.2          19                 197        4775\n2 Chinstrap Dream            52            20.7               210        4800\n3 Gentoo    Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\ngives a 3 row answer (one per group)"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Compound Grouping",
    "text": "Compound Grouping\nCan apply group_by to create “compound” groups\n\npenguins |&gt; group_by(species, year)\n\n# A tibble: 344 × 8\n# Groups:   species, year [9]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\\(9 = 3 \\times 3\\) groups"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping-1",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Compound Grouping",
    "text": "Compound Grouping\nGrouped operations apply as before:\n\npenguins |&gt; \n    group_by(species, year) |&gt; \n    slice_max(body_mass_g)\n\n# A tibble: 9 × 8\n# Groups:   species, year [9]\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Torgersen           39.2          19.6               195        4675\n2 Adelie    Torgersen           42.9          17.6               196        4700\n3 Adelie    Biscoe              43.2          19                 197        4775\n4 Chinstrap Dream               49.2          18.2               195        4400\n5 Chinstrap Dream               52            20.7               210        4800\n6 Chinstrap Dream               50.8          18.5               201        4450\n7 Gentoo    Biscoe              49.2          15.2               221        6300\n8 Gentoo    Biscoe              51.1          16.3               220        6000\n9 Gentoo    Biscoe              48.8          16.2               222        6000\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping-2",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#compound-grouping-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Compound Grouping",
    "text": "Compound Grouping\nMissing ‘combinations’ automatically dropped:\n\npenguins |&gt; \n    group_by(species, island) \n\n\n\n# A tibble: 344 × 4\n# Groups:   species, island [5]\n   species island    body_mass_g sex   \n   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt; &lt;fct&gt; \n 1 Adelie  Torgersen        3750 male  \n 2 Adelie  Torgersen        3800 female\n 3 Adelie  Torgersen        3250 female\n 4 Adelie  Torgersen          NA &lt;NA&gt;  \n 5 Adelie  Torgersen        3450 female\n 6 Adelie  Torgersen        3650 male  \n 7 Adelie  Torgersen        3625 female\n 8 Adelie  Torgersen        4675 male  \n 9 Adelie  Torgersen        3475 &lt;NA&gt;  \n10 Adelie  Torgersen        4250 &lt;NA&gt;  \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#stopping-grouped-operations",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#stopping-grouped-operations",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Stopping grouped operations",
    "text": "Stopping grouped operations\nOnce you are done with grouped operations, ungroup\n\npenguins |&gt; \n    group_by(species, island) |&gt;\n    slice_max(body_mass_g) |&gt;\n    ungroup()\n\n# A tibble: 5 × 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe              43.2          19                 197        4775\n2 Adelie    Dream               39.8          19.1               184        4650\n3 Adelie    Torgersen           42.9          17.6               196        4700\n4 Chinstrap Dream               52            20.7               210        4800\n5 Gentoo    Biscoe              49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#grouping-on-numeric-variables",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#grouping-on-numeric-variables",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Grouping on Numeric Variables",
    "text": "Grouping on Numeric Variables\nIn general, grouping on continuous variables is a bad choice:\n\n\n# A tibble: 344 × 8\n# Groups:   body_mass_g [95]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n(Analogy: Checking exact equality of continuous random variables)"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#grouping-on-numeric-variables-1",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#grouping-on-numeric-variables-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Grouping on Numeric Variables",
    "text": "Grouping on Numeric Variables\nBetter choices:\n\nGroup on quantiles (ntile) or cut points (cut)"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#rowwise-operations",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#rowwise-operations",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "rowwise Operations",
    "text": "rowwise Operations\nRarely, you may need to apply an operation to each row separately without vectorization\nrowwise lets you do so - makes each row its own group\n\npenguins |&gt; rowwise()\n\n\n\n# A tibble: 344 × 4\n# Rowwise: \n  sex    island    flipper_length_mm body_mass_g\n  &lt;fct&gt;  &lt;fct&gt;                 &lt;int&gt;       &lt;int&gt;\n1 male   Torgersen               181        3750\n2 female Torgersen               186        3800\n# ℹ 342 more rows\n\n\n\nNote: This is a bit dangerous - vectorization is important for data integrity"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#looking-ahead",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows\nJoin Multiple Tables\nReshape Tables with pivot Operations"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#learning-more",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Sections 3.5-3.6 - “Groups” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#where-are-we",
    "href": "slides/2025-04-01/03_dplyr_filter.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#goals-for-this-video",
    "href": "slides/2025-04-01/03_dplyr_filter.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nfilter out rows in a tidy way\nApply Boolean operators\nslice and dice to find maxima and minima"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nWhile select is used for column selection, filter is used for row selection\n\npenguins |&gt; filter(bill_length_mm &gt; 40)\n\n\nSimilar syntax to select:\n\nNo need to quote column names\nData is first (piped) argument\nLater arguments specify action\n\n\n\nInstead of names, provide logical tests (filters)"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-1",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nContrast\n\npenguins |&gt; filter(bill_length_mm &gt; 40)\n\nwith\n\npenguins[penguins$bill_length_mm &gt; 40, ]"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-2",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nMultiple filters give the intersection:\n\npenguins |&gt; filter(bill_length_mm &gt; 40, sex == \"female\")\n\n\nUse logical operators to get the union:\n\npenguins |&gt; filter(bill_length_mm &gt; 40 | sex == \"female\")"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-3",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nPipes are very useful for multi-step operations\n\npenguins |&gt; filter(bill_length_mm &gt; 40) |&gt; select(species)\n\n\nCompare to\n\nselect(filter(penguins, bill_length_mm &gt; 40), species)\n\nPiped form reads left to right instead of inside out"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-4",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nCan use more complex comparisons in filter:\n\npenguins |&gt; filter(body_mass_g &gt; mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 149 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.2          19.6               195        4675\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           34.6          21.1               198        4400\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Dream               39.8          19.1               184        4650\n 6 Adelie  Dream               44.1          19.7               196        4400\n 7 Adelie  Dream               39.6          18.8               190        4600\n 8 Adelie  Biscoe              40.1          18.9               188        4300\n 9 Adelie  Biscoe              41.3          21.1               195        4400\n10 Adelie  Torgersen           41.8          19.4               198        4450\n# ℹ 139 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nWhat would happen without na.rm=TRUE? Why?"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#filter-5",
    "href": "slides/2025-04-01/03_dplyr_filter.html#filter-5",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "filter",
    "text": "filter\nCommon mistake - using only a single equals sign for equality\n\npenguins |&gt; filter(sex = \"female\")\n\nError in `filter()`:\n! We detected a named input.\nℹ This usually means that you've used `=` instead of `==`.\nℹ Did you mean `sex == \"female\"`?"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#slice-functions",
    "href": "slides/2025-04-01/03_dplyr_filter.html#slice-functions",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "slice functions",
    "text": "slice functions\nThe slice_* family extend filter:\n\npenguins |&gt; slice_max(body_mass_g, n=1)\n\n# A tibble: 1 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Gentoo  Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nEquivalent to:\n\npenguins |&gt; filter(body_mass_g == max(body_mass_g, na.rm=TRUE))"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#slice-functions-1",
    "href": "slides/2025-04-01/03_dplyr_filter.html#slice-functions-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "slice functions",
    "text": "slice functions\nStandard slices:\n\nslice_min\nslice_max\nslice_head\nslice_tail\n\n\nSpecify one of:\n\nn= to get top/bottom \\(n\\)\nprop= to select a fraction"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#slice-functions-2",
    "href": "slides/2025-04-01/03_dplyr_filter.html#slice-functions-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "slice functions",
    "text": "slice functions\nslice_sample: random subset of your data\n\nUseful if exploring a large data set\n\n\npenguins |&gt; slice_sample(n=10)\n\n# A tibble: 10 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Chinstrap Dream              46.4          18.6               190        3450\n 2 Gentoo    Biscoe             44            13.6               208        4350\n 3 Adelie    Biscoe             40.6          18.6               183        3550\n 4 Gentoo    Biscoe             50.4          15.7               222        5750\n 5 Adelie    Biscoe             39.7          18.9               184        3550\n 6 Gentoo    Biscoe             49.6          16                 225        5700\n 7 Adelie    Torgers…           36.2          17.2               187        3150\n 8 Gentoo    Biscoe             41.7          14.7               210        4700\n 9 Gentoo    Biscoe             46.1          13.2               211        4500\n10 Adelie    Biscoe             42.7          18.3               196        4075\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#looking-ahead",
    "href": "slides/2025-04-01/03_dplyr_filter.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nSelecting Columns ✅\nSelecting Rows ✅\nTransforming Columns"
  },
  {
    "objectID": "slides/2025-04-01/03_dplyr_filter.html#learning-more",
    "href": "slides/2025-04-01/03_dplyr_filter.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 3 - “Data Transformation” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#where-are-we",
    "href": "slides/2025-04-01/01_tidy.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\n\nVariables and “Calculator Math”\nVectors\nData Frames\n\nData Visualization\nR Programming\nData Manipulation\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#goals-for-this-video",
    "href": "slides/2025-04-01/01_tidy.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nIntroduce the concept of Tidy Data\nIdentify Key Aspects of Tidy Data\nLearn to Diagnose Non-Tidy Data"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#data-frames-in-r",
    "href": "slides/2025-04-01/01_tidy.html#data-frames-in-r",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Data Frames in R",
    "text": "Data Frames in R\ndata.frame - R’s tabular data storage\n\nlibrary(palmerpenguins)\nhead(penguins)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#data-frames-in-r-1",
    "href": "slides/2025-04-01/01_tidy.html#data-frames-in-r-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Data Frames in R",
    "text": "Data Frames in R\npalmerpenguins\n\n\n344 penguins observed on the Palmer Islands (Antarctica)\n3 species, 3 islands, 3 years\n4 numeric variables\nOne categorial (factor) variable (sex)"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#data-frames-in-r-2",
    "href": "slides/2025-04-01/01_tidy.html#data-frames-in-r-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Data Frames in R",
    "text": "Data Frames in R\nKey features:\n\n\nTabular (rows and columns) structure\nEntries in the same column are all of the same type\nColumns may be different types"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#data-frames-in-r-3",
    "href": "slides/2025-04-01/01_tidy.html#data-frames-in-r-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Data Frames in R",
    "text": "Data Frames in R\nCan be manipulated using standard R syntax:\n\ntable(penguins[penguins$bill_length_mm &gt; 40, \"species\"])\n\n\n   Adelie Chinstrap    Gentoo \n       51        68       123 \n\n\n\n\n$ extracts a column as a vector\ndf[row index, column index]\n\nLogical row indexing to select rows where bill_length_mm &gt; 40\nColumn indexing by name to select a single column"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#what-is-tidy-data",
    "href": "slides/2025-04-01/01_tidy.html#what-is-tidy-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "What is Tidy Data?",
    "text": "What is Tidy Data?\n“Tidy Data”:\n\nPrinciples to make data manipulation safe and easy\nDecrease chance of errors\nIncrease productivity\n\n\nWhat does it mean to be tidy?\n\n\nEverything in its proper place"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy-data-1",
    "href": "slides/2025-04-01/01_tidy.html#tidy-data-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\nRecall our penguins:\n\n\n  species bill_length_mm flipper_length_mm body_mass_g    sex\n1  Adelie           39.1               181        3750   male\n2  Adelie           39.5               186        3800 female\n3  Adelie           40.3               195        3250 female\n4  Adelie             NA                NA          NA   &lt;NA&gt;\n5  Adelie           36.7               193        3450 female\n6  Adelie           39.3               190        3650   male\n\n\n\nKey features:\n\n\nEach row is one observation (🐧)\nEach column has one and only one fact\nAll values are in the table\n\nNot hiding in row and column names"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy-data-2",
    "href": "slides/2025-04-01/01_tidy.html#tidy-data-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\n\n\nFigure from R for Data Science by H. Wickham"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy---why",
    "href": "slides/2025-04-01/01_tidy.html#tidy---why",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy - Why?",
    "text": "Tidy - Why?\nWhy emphasize tidy data?\n\nMinimize distractions:\n\nFree to focus on analysis not code\n\n\n\nOnce data is “tidy”, you can focus on the real questions\n\n\nFirst goal for data pre-processing (“tidying up”)"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy---who-and-when",
    "href": "slides/2025-04-01/01_tidy.html#tidy---who-and-when",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy - Who (and When)?",
    "text": "Tidy - Who (and When)?\nThe name and principles of “tidy data” were popularized by H. Wickham (2014)\n\nCore ideas are much older, dating back to (at least) Codd’s Relational Model in the 1970s, now ubiquitous in relational databases (SQL)\n\n\nNow found in:\n\nPython (pandas)\nJulia (DataFrames)\nRust (polars)\nand more"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#tidy---how-and-where",
    "href": "slides/2025-04-01/01_tidy.html#tidy---how-and-where",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy - How (and Where)?",
    "text": "Tidy - How (and Where)?\ntidyverse - Packages for Manipulating Tidy Data:\n\n\nggplot2: Visualization\ndplyr: SQL-like operations\ntidyr: Reshaping and cleaning data\nreadr: Ingest tidy data into R\nTidy manipulation of different data types:\n\nstringr, forcats, lubridate\n\n\n\n\nMore helpers in the background (tibble, vctrs, …)"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#aside-tibbles",
    "href": "slides/2025-04-01/01_tidy.html#aside-tibbles",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Aside: tibbles",
    "text": "Aside: tibbles\nYou will sometimes see tibble (tbl_df) as a synonym for data.frame\n\nMinor differences in output formatting\nFewer edge cases"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#some-untidy-examples",
    "href": "slides/2025-04-01/01_tidy.html#some-untidy-examples",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Some Untidy Examples",
    "text": "Some Untidy Examples\nBaruch college business core enrollment:\n\n\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400\n\n\n\nTidy! ✅\n\n\n\nEach row is one unit (a class) 👍\nColumns are well-typed 👍\nOne piece of information per column 👍"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#some-untidy-examples-1",
    "href": "slides/2025-04-01/01_tidy.html#some-untidy-examples-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Some Untidy Examples",
    "text": "Some Untidy Examples\n\n\n# A tibble: 6 × 3\n  Semester Course     Enrollment  \n  &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;       \n1 Fall     Accounting \"200 of 250\"\n2 Fall     Law        \"100 of 125\"\n3 Fall     Statistics \"200 of 200\"\n4 Spring   Accounting \"300 of 350\"\n5 Spring   Law        \" 50 of 100\"\n6 Spring   Statistics \"400 of 400\"\n\n\n\nUntidy! ❌\n\n\nMultiple pieces of information per cell (Enrollment)"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#some-untidy-examples-2",
    "href": "slides/2025-04-01/01_tidy.html#some-untidy-examples-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Some Untidy Examples",
    "text": "Some Untidy Examples\n\n\n# A tibble: 12 × 4\n   Semester Course     Number Type      \n   &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     \n 1 Fall     Accounting    200 Enrollment\n 2 Fall     Accounting    250 Cap       \n 3 Fall     Law           100 Enrollment\n 4 Fall     Law           125 Cap       \n 5 Fall     Statistics    200 Enrollment\n 6 Fall     Statistics    200 Cap       \n 7 Spring   Accounting    300 Enrollment\n 8 Spring   Accounting    350 Cap       \n 9 Spring   Law            50 Enrollment\n10 Spring   Law           100 Cap       \n11 Spring   Statistics    400 Enrollment\n12 Spring   Statistics    400 Cap       \n\n\n\nUntidy! ❌\n\n\nMixing two pieces of information (Enrollments and Caps)\nTip: When one unit spans multiple rows, likely untidy"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#some-untidy-examples-3",
    "href": "slides/2025-04-01/01_tidy.html#some-untidy-examples-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Some Untidy Examples",
    "text": "Some Untidy Examples\n\n\n# A tibble: 6 × 3\n  Semester Course     Enrollment\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt;\n1 Fall     Accounting        200\n2 Fall     Law               100\n3 Fall     Statistics        200\n# ℹ 3 more rows\n\n\nand\n\n\n# A tibble: 6 × 3\n  Semester Course       Cap\n  &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;\n1 Fall     Accounting   250\n2 Fall     Law          125\n3 Fall     Statistics   200\n# ℹ 3 more rows\n\n\n\n[A little bit] Untidy! ❌\n\n\nData spread across multiple tables"
  },
  {
    "objectID": "slides/2025-04-01/01_tidy.html#looking-ahead",
    "href": "slides/2025-04-01/01_tidy.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\nFor now, we’ll provide you with tidy data\n\nUpcoming topics:\n\n\nVisualizing Tidy Data (Week 3)\nStatistical Models of Tidy Data (Week 4)\nManipulating Tidy Data (Week 5)\nTaking Untidy Web Data and Making it Tidy (Week 7)"
  },
  {
    "objectID": "objectives.html",
    "href": "objectives.html",
    "title": "STA 9750 - OMSBA - Course Learning Objectives",
    "section": "",
    "text": "This course provides an understanding of the principles and concepts of using computer tools for data analysis and visualization. Students will learn to use a scientific programming language (such as R) to import and export data from and into spreadsheets or other statistical software packages. They will gain experience in analyzing both quantitative and qualitative data, and statistical modelling techniques will be introduced. Written reports will prepare students for clear communication of their analysis in professional settings. This course is designed primarily for Masters’ students in statistics and quantitative methods and modeling (QMM), and those interested in carrying out sophisticated statistical analyses of data using statistical software."
  },
  {
    "objectID": "objectives.html#official-course-description",
    "href": "objectives.html#official-course-description",
    "title": "STA 9750 - OMSBA - Course Learning Objectives",
    "section": "",
    "text": "This course provides an understanding of the principles and concepts of using computer tools for data analysis and visualization. Students will learn to use a scientific programming language (such as R) to import and export data from and into spreadsheets or other statistical software packages. They will gain experience in analyzing both quantitative and qualitative data, and statistical modelling techniques will be introduced. Written reports will prepare students for clear communication of their analysis in professional settings. This course is designed primarily for Masters’ students in statistics and quantitative methods and modeling (QMM), and those interested in carrying out sophisticated statistical analyses of data using statistical software."
  },
  {
    "objectID": "objectives.html#program-learning-goals",
    "href": "objectives.html#program-learning-goals",
    "title": "STA 9750 - OMSBA - Course Learning Objectives",
    "section": "Program Learning Goals",
    "text": "Program Learning Goals\nThis course contributes to the program learning goals of several MS programs offered by the Zicklin School of Business.\n\nMS in Business Analytics\nThis course contributes to the following Program Learning Goals for the MS in Business Analytics:\n\nMSBA Program Learning Goals\n\n\n\n\n\n\n\nSTA 9750 - OMSBA Learning Goal\nMSBA Learning Goal\nDescription\n\n\n\n\n✓\nData Management\nStudents will be able to apply methods, tools, and software for acquiring, managing/storing, and accessing structured and unstructured data. Students will also demonstrate knowledge of the strategic uses of data.\n\n\n✓\nFoundational Statistical / Quantitative Skills\nStudents will be able to prepare data for statistical analysis, perform basic exploratory and descriptive analysis as well as employ foundational statistical techniques needed to analyze data.\n\n\n✓\nAdvanced Statistical/Quantitative Skills\nStudents will be able to build and interpret advanced predictive models. Students will be able to combine business rules and mathematical models to optimize business decisions from data.\n\n\n\nEthical Awareness\nStudents will be able to articulate an understanding of ethical issues in all phases of business analytics with particular emphasis on the new possibilities afforded by the emergence of big data.\n\n\n✓\nProfessional Communication\nStudents will be able to explain complex analytical models and their results orally and in writing to technical and non technical/lay audiences.\n\n\n✓\nKnowledge Integration\nStudents will be able to apply the three key types of analytics (descriptive, predictive, and prescriptive) in a business domain to add value to business decision-making.\n\n\n\n\n\nMS in Quantitative Methods & Modeling\nThis course contributes to the following Program Learning Goals for the MS in Quantitative Methods & Modeling:\n\nMSQMM Program Learning Goals\n\n\n\n\n\n\n\nSTA 9750 - OMSBA Learning Goal\nMSQMM Learning Goal\nDescription\n\n\n\n\n✓\nOperations Research & Mathematical Modeling\nStudents will be able to effectively model, evaluate, and solve quantitative (business) problems using quantitative modeling methods (e.g. deterministic and probabilistic operations research techniques).\n\n\n✓\nStatistics\nStudents will be able to correctly apply appropriate statistical methods when defining, solving, and analyzing problems.\n\n\n✓\nTechnology Competency\nStudents will be able to use current technological tools, including spreadsheets and specialized software, when solving problems.\n\n\n✓\nProfessional Communication\nStudents will be able to effectively communicate their problem solving methods and solutions to technical and non-technical audiences.\n\n\n\n\n\nMS in Statistics\nThis course contributes to the following Program Learning Goals for the MS in Statistics:\n\nMS Statistics Program Learning Goals\n\n\n\n\n\n\n\nSTA 9750 - OMSBA Learning Goal\nMS Stat Learning Goal\nDescription\n\n\n\n\n✓\nGeneral Statistical Competence\nStudents will be able to apply appropriate probability models and statistical techniques when analyzing problems from business and other fields.\n\n\n✓\nStatistical Practice\nStudents will become familiar with the standard tools of statistical practice for multiple regression, along with the tools of a subset of specialized statistical areas such as multivariate analysis, applied sampling, time series analysis, experimental design, data mining, categorical analysis, and/or stochastic processes.\n\n\n✓\nTechnology Competency\nStudents will learn to use one or more of the benchmark statistical software platforms, such as SAS or R."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to the offering of STA 9750 - OMSBA as a part of the Online MSBA at Zicklin School of Business, Baruch College CUNY.\nFor now, this shell holds only slides for recording of course materials. It will eventually host extended worked examples, supplemental data sets, and interactive activities."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "STA 9750 - OMSBA - Slides",
    "section": "",
    "text": "This site hosts the following slides:\n\nTidy Data\nTidy Column Selection\nTidy Row Selection\nTidy Column Manipulation\nGroupwise Operations\nSummarizing Group Statistics\nJoining Multiple Tables\nReshaping Tidy Data\nBasic Statistical Analysis\nInstalling python\npython Basics: Syntax\npython Basics: Control Flow\npython Basics: Objects\npython Basics: Control Flow\n\nMore will be added later."
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#where-are-we",
    "href": "slides/2025-04-01/02_dplyr_select.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#goals-for-this-video",
    "href": "slides/2025-04-01/02_dplyr_select.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nIntroduce the dplyr package and the pipe operator (|&gt;)\nselect and rename columns in a tidy way\nUse advanced selectors for groups of columns"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#tidy-data",
    "href": "slides/2025-04-01/02_dplyr_select.html#tidy-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Data",
    "text": "Tidy Data\nRecall our definition of “tidy” data - everything in its proper place:\n\n\nOne and only one type of information per column\nOne and only one observation per row\nNo values ‘hiding’ in column or row names\n\n\n\nReturn of the palmerpenguins:\n\n\n# A tibble: 344 × 3\n  species island    bill_length_mm\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;\n1 Adelie  Torgersen           39.1\n2 Adelie  Torgersen           39.5\n# ℹ 342 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#tidy-tools-for-tidy-data",
    "href": "slides/2025-04-01/02_dplyr_select.html#tidy-tools-for-tidy-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Tidy Tools for Tidy Data",
    "text": "Tidy Tools for Tidy Data\ntidyverse - Tools for manipulating tidy data\n\nMake sure to load the tidyverse package before using\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nSafe to ignore messages about conflicts"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#tidyverse-packages",
    "href": "slides/2025-04-01/02_dplyr_select.html#tidyverse-packages",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "tidyverse Packages",
    "text": "tidyverse Packages\n\n\n\n\n\ntidyverse tools have excellent documentation\n\nVisit tidyverse.org for overall information\nIndividual packages: ggplot2.tidyverse.org, dplyr.tidyverse.org, etc.\n\n\n\nFunction Reference - Details of specific functions\nVignettes / Articles - Big picture tutorials"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#dplyr",
    "href": "slides/2025-04-01/02_dplyr_select.html#dplyr",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "dplyr",
    "text": "dplyr\nYou have already seen one tidyverse package: ggplot2\n\nToday we start with dplyr - ‘grammar of data manipulation’"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select",
    "href": "slides/2025-04-01/02_dplyr_select.html#select",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nThe select function can be used to select certain columns\n\nselect(penguins, species, bill_length_mm, body_mass_g, sex)\n\n# A tibble: 344 × 4\n   species bill_length_mm body_mass_g sex   \n   &lt;fct&gt;            &lt;dbl&gt;       &lt;int&gt; &lt;fct&gt; \n 1 Adelie            39.1        3750 male  \n 2 Adelie            39.5        3800 female\n 3 Adelie            40.3        3250 female\n 4 Adelie            NA            NA &lt;NA&gt;  \n 5 Adelie            36.7        3450 female\n 6 Adelie            39.3        3650 male  \n 7 Adelie            38.9        3625 female\n 8 Adelie            39.2        4675 male  \n 9 Adelie            34.1        3475 &lt;NA&gt;  \n10 Adelie            42          4250 &lt;NA&gt;  \n# ℹ 334 more rows\n\n\n\nArguments: data =&gt; columns we want"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-1",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nContrast\n\nselect(penguins, species, bill_length_mm, body_mass_g, sex)\n\nwith\n\npenguins[,c(\"species\", \"bill_length_mm\", \"body_mass_g\", \"sex\")]\n\n\n\nKey differences:\n\nNo quotes around column names\nPass names as arguments, not 1 vector"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#put-that-in-your-pipe",
    "href": "slides/2025-04-01/02_dplyr_select.html#put-that-in-your-pipe",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Put that in your Pipe",
    "text": "Put that in your Pipe\nR supports piped operations - feeding the output of one function into another\n\nselect(penguins, species, bill_length_mm, body_mass_g, sex)\n\nis equivalent to\n\npenguins |&gt; select(species, bill_length_mm, body_mass_g, sex)\n\n\nRead |&gt; as “and then”\ndplyr plays very nicely with pipes"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-2",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nLike vector indexing, negative sign drops columns:\n\npenguins |&gt; select(-species)\n\n# A tibble: 344 × 7\n   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex    year\n   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n 1 Torge…           39.1          18.7               181        3750 male   2007\n 2 Torge…           39.5          17.4               186        3800 fema…  2007\n 3 Torge…           40.3          18                 195        3250 fema…  2007\n 4 Torge…           NA            NA                  NA          NA &lt;NA&gt;   2007\n 5 Torge…           36.7          19.3               193        3450 fema…  2007\n 6 Torge…           39.3          20.6               190        3650 male   2007\n 7 Torge…           38.9          17.8               181        3625 fema…  2007\n 8 Torge…           39.2          19.6               195        4675 male   2007\n 9 Torge…           34.1          18.1               193        3475 &lt;NA&gt;   2007\n10 Torge…           42            20.2               190        4250 &lt;NA&gt;   2007\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-3",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\n: operator selects a range of columns\n\npenguins |&gt; select(bill_length_mm:body_mass_g)\n\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# ℹ 334 more rows\n\n\nYou can also use c here"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-4",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-4",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nselect also supports several “smart” helpers to pick columns\n\npenguins |&gt; select(contains(\"bill\"))\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            &lt;dbl&gt;         &lt;dbl&gt;\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-5",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-5",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nSee ?dplyr_tidy_select for more helpers\n\npenguins |&gt; select(ends_with(\"mm\"))\n\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm flipper_length_mm\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1           39.1          18.7               181\n 2           39.5          17.4               186\n 3           40.3          18                 195\n 4           NA            NA                  NA\n 5           36.7          19.3               193\n 6           39.3          20.6               190\n 7           38.9          17.8               181\n 8           39.2          19.6               195\n 9           34.1          18.1               193\n10           42            20.2               190\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-6",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-6",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nHelpers can be combined using & (intersection) and | (union) operations:\n\npenguins |&gt; select(contains(\"bill\") | ends_with(\"g\"))\n\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm body_mass_g\n            &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;\n 1           39.1          18.7        3750\n 2           39.5          17.4        3800\n 3           40.3          18          3250\n 4           NA            NA            NA\n 5           36.7          19.3        3450\n 6           39.3          20.6        3650\n 7           38.9          17.8        3625\n 8           39.2          19.6        4675\n 9           34.1          18.1        3475\n10           42            20.2        4250\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-7",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-7",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nPredicate operator can select columns based on properties of values\n\npenguins |&gt; select(where(is.numeric))\n\n\nAlso: is.character and is.factor\n\n\nCan be extended to more complex checks:\n\nPass a custom function\n(Not covered here; see docs for examples)"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#select-8",
    "href": "slides/2025-04-01/02_dplyr_select.html#select-8",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "select",
    "text": "select\nwhere combines nicely with other selectors:\n\npenguins |&gt; select(where(is.numeric) & ends_with(\"mm\"))"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#rename",
    "href": "slides/2025-04-01/02_dplyr_select.html#rename",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "rename",
    "text": "rename\nUse rename to change column names:\n\npenguins |&gt; \n    select(where(is.numeric) & ends_with(\"mm\")) |&gt;\n    rename(`Bill Length (mm)`=bill_length_mm, \n           `Bill Depth (mm)`=bill_depth_mm,\n           `Flipper Length (mm)`=flipper_length_mm)\n\n\n\n\n\n\nBill Length (mm)\nBill Depth (mm)\nFlipper Length (mm)\n\n\n\n\n39.1\n18.7\n181\n\n\n39.5\n17.4\n186\n\n\n40.3\n18.0\n195\n\n\nNA\nNA\nNA\n\n\n36.7\n19.3\n193\n\n\n39.3\n20.6\n190\n\n\n\n\n\n\n\nParticularly useful for formatting output"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#rename-1",
    "href": "slides/2025-04-01/02_dplyr_select.html#rename-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "rename",
    "text": "rename\nrename tips:\n\n\nUse backticks (`) to surround ‘non-syntactic’ names\nUseful to make names useful R variables pre-analysis\nUseful to make names proper English post-analysis"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#looking-ahead",
    "href": "slides/2025-04-01/02_dplyr_select.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nSelecting Columns ✅\nSelecting Rows\nTransforming Columns"
  },
  {
    "objectID": "slides/2025-04-01/02_dplyr_select.html#learning-more",
    "href": "slides/2025-04-01/02_dplyr_select.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 3 - “Data Transformation” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#where-are-we",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#goals-for-this-video",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:\n\n\nmutate rows to safely transform data\nPerform conditional transformations\nCompute running and cumulative statistics\nApply simple aggregation and window functions"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate",
    "text": "mutate\nSo far we have only subsetted our data. Can we create new columns?\n\n\npenguins |&gt; \n    mutate(body_mass_lb = body_mass_g / 453) |&gt;\n    select(contains(\"body\"))\n\n# A tibble: 344 × 2\n   body_mass_g body_mass_lb\n         &lt;int&gt;        &lt;dbl&gt;\n 1        3750         8.28\n 2        3800         8.39\n 3        3250         7.17\n 4          NA        NA   \n 5        3450         7.62\n 6        3650         8.06\n 7        3625         8.00\n 8        4675        10.3 \n 9        3475         7.67\n10        4250         9.38\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate-1",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate",
    "text": "mutate\n\npenguins |&gt; \n    mutate(body_mass_lb = body_mass_g / 453) |&gt;\n    select(contains(\"body\"))\n\nSimilar syntax to select and filter\n\nPut name on the left of the =\nIf you omit a name, unhelpful default:\n\npenguins |&gt; mutate(body_mass_g / 453) |&gt; select(contains(\"body\"))\n\n\n\n# A tibble: 344 × 2\n  body_mass_g `body_mass_g/453`\n        &lt;int&gt;             &lt;dbl&gt;\n1        3750              8.28\n2        3800              8.39\n3        3250              7.17\n# ℹ 341 more rows"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate-2",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate",
    "text": "mutate\nCan change columns “in place” by careful renaming:\n\npenguins |&gt; \n    select(where(is.character) | where(is.factor)) |&gt;\n    mutate(species = toupper(species)) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 3\n  species island    sex   \n  &lt;chr&gt;   &lt;fct&gt;     &lt;fct&gt; \n1 ADELIE  Torgersen male  \n2 ADELIE  Torgersen female\n3 ADELIE  Torgersen female\n4 ADELIE  Torgersen &lt;NA&gt;  \n5 ADELIE  Torgersen female\n\n\n\nUse this sparingly - destroys ‘original’ values"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate-3",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate",
    "text": "mutate\nCan do arbitrary vectorized operations and access recently created columns:\n\npenguins |&gt; \n    select(where(is.numeric)) |&gt;\n    mutate(weight_kg = body_mass_g / 1000,\n           height_m = body_height_mm / 1000, \n           bmi = weight_kg / height_m^2)\n\n(Sadly, don’t actually have height data)"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#mutate-helpers",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#mutate-helpers",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "mutate helpers",
    "text": "mutate helpers\n?mutate lists several helpful functions:\n\nif_else, case_when\ncumsum, cummean\nlead, lag\nmin_rank, dense_rank"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#complex-transforms",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#complex-transforms",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Complex Transforms",
    "text": "Complex Transforms\nUse case_when for transforms that depend on other values:\n\npenguins |&gt;\n  mutate(cuteness_level = \n    case_when(\n        species == \"Adelie\" ~ \"Exceptionally\", \n        species == \"Gentoo\" ~ \"Remarkably\",\n        species == \"Chinstrap\" ~ \"Stunningly\"\n    )) |&gt;\n  select(species, cuteness_level, body_mass_g) |&gt; \n  slice_head(n=5)\n\n# A tibble: 5 × 3\n  species cuteness_level body_mass_g\n  &lt;fct&gt;   &lt;chr&gt;                &lt;int&gt;\n1 Adelie  Exceptionally         3750\n2 Adelie  Exceptionally         3800\n3 Adelie  Exceptionally         3250\n4 Adelie  Exceptionally           NA\n5 Adelie  Exceptionally         3450"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#complex-transforms-1",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#complex-transforms-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Complex Transforms",
    "text": "Complex Transforms\ncase_when specifies a series of tests. First one passed is used:\n\ncase_when(\n    test1 ~ value1, \n    test2 ~ value2\n    ...\n)\n\nUse TRUE for default values"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#cumulative-stats",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#cumulative-stats",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Cumulative Stats",
    "text": "Cumulative Stats\nThe cum* family of functions compute cumulative values\n\ncummean\ncummax, cummin\ncumsum, cumprod\n\n\nThese depend on the order of the data\nYou may want to use arrange to order data first"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#cumulative-stats-1",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#cumulative-stats-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Cumulative Stats",
    "text": "Cumulative Stats\n\npenguins |&gt;\n    arrange(body_mass_g) |&gt; # Defaults to increasing; use desc() to reverse\n    mutate(average_mass = cummean(body_mass_g), \n           number_of_penguins = row_number()) |&gt;\n    select(species, \n           body_mass_g,\n           average_mass,  \n           number_of_penguins) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 4\n  species   body_mass_g average_mass number_of_penguins\n  &lt;fct&gt;           &lt;int&gt;        &lt;dbl&gt;              &lt;int&gt;\n1 Chinstrap        2700         2700                  1\n2 Adelie           2850         2775                  2\n3 Adelie           2850         2800                  3\n4 Adelie           2900         2825                  4\n5 Adelie           2900         2840                  5\n\n\nRolling statistics are a bit trickier - look into RcppRoll"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#ranking",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#ranking",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Ranking",
    "text": "Ranking\nTo assign ranks, use the *_rank functions:\n\npenguins |&gt;\n    mutate(body_mass_rank = min_rank(body_mass_g)) |&gt;\n    select(contains(\"body_mass\")) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 2\n  body_mass_g body_mass_rank\n        &lt;int&gt;          &lt;int&gt;\n1        3750            121\n2        3800            130\n3        3250             29\n4          NA             NA\n5        3450             61\n\n\n\nmin_rank and dense_rank differ in treatment of ties"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#ranking-1",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#ranking-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Ranking",
    "text": "Ranking\npercent_rank and cume_dist for CDF-type ranking\n\npenguins |&gt;\n    mutate(body_mass_pct_rank = round(percent_rank(body_mass_g), 2),\n           body_mass_cdf      = round(cume_dist(body_mass_g), 2)) |&gt;\n    select(contains(\"body_mass\")) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 3\n  body_mass_g body_mass_pct_rank body_mass_cdf\n        &lt;int&gt;              &lt;dbl&gt;         &lt;dbl&gt;\n1        3750               0.35          0.37\n2        3800               0.38          0.41\n3        3250               0.08          0.1 \n4          NA              NA            NA   \n5        3450               0.18          0.2 \n\n\nCDF: cume_dist \\(\\leq\\) vs percent_rank \\(&lt;\\)"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#ranking-2",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#ranking-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Ranking",
    "text": "Ranking\nUse ntile to split data into quartiles, deciles, etc.\n\npenguins |&gt;\n    mutate(body_mass_decile = ntile(body_mass_g, 10)) |&gt;\n    select(contains(\"body_mass\")) |&gt;\n    slice_head(n=5)\n\n# A tibble: 5 × 2\n  body_mass_g body_mass_decile\n        &lt;int&gt;            &lt;int&gt;\n1        3750                4\n2        3800                4\n3        3250                1\n4          NA               NA\n5        3450                2"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#looking-ahead",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nSelecting Columns ✅\nSelecting Rows ✅\nTransforming Columns ✅\n\n\nNow it’s your turn!\nTime to apply these tools to flights leaving NYC"
  },
  {
    "objectID": "slides/2025-04-01/04_dplyr_mutate.html#learning-more",
    "href": "slides/2025-04-01/04_dplyr_mutate.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 3 - “Data Transformation” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#where-are-we",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#goals-for-this-video",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "In this video:\n\n\nCombine multiple rows using summarize\nCompute overall and group-wise summary statistics"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#group_by",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "You have already seen group_by modify the operation of ‘aggregation’ functions:\n\nmin, max\nmean, sum,\nntile\n\netc\n. . .\nNo reduction in data complexity unless combined with filter"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "group_by and summarize \\(\\implies\\) summary statistics\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   avg_mass\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\n. . .\nUnlike filter, these are new rows:\n\nOne row summarizing each group\nNot a subset of old rows"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "penguins |&gt; \n    group_by(species) |&gt; \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   avg_mass\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\nWhat happened to other features (e.g., flipper_length_mm)?\n. . .\nsummarize only keeps:\n\nGrouping variables (species)\nCreated variables (avg_mass)\n\nAll other data is dropped"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize-2",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#group_by-summarize-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Can perform multiple summaries at once:\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE), \n              sd_mass = sd(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 3\n  species   avg_mass sd_mass\n  &lt;fct&gt;        &lt;dbl&gt;   &lt;dbl&gt;\n1 Adelie       3701.    459.\n2 Chinstrap    3733.    384.\n3 Gentoo       5076.    504.\n\n\nImportant to do all summaries in one call"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-helpers",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-helpers",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "The n() function will count the number of rows in a group\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE), \n              n = n(), \n              mass_se = mass_sd / sqrt(n))\n\n# A tibble: 3 × 5\n  species   mass_avg mass_sd     n mass_se\n  &lt;fct&gt;        &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n1 Adelie       3701.    459.   152    37.2\n2 Chinstrap    3733.    384.    68    46.6\n3 Gentoo       5076.    504.   124    45.3"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-helpers-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-helpers-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "cur_group() returns the current group name\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE), \n              n = n(), \n              mass_se = mass_sd / sqrt(n), \n              species_cap = toupper(cur_group()))\n\n# A tibble: 3 × 6\n  species   mass_avg mass_sd     n mass_se species_cap\n  &lt;fct&gt;        &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;      \n1 Adelie       3701.    459.   152    37.2 1          \n2 Chinstrap    3733.    384.    68    46.6 2          \n3 Gentoo       5076.    504.   124    45.3 3          \n\n\nCan also use species directly"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-removes-grouping",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-removes-grouping",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize removes grouping",
    "text": "summarize removes grouping\nsummarize removes the last level of grouping\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   mass_avg\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\nNo grouping remains"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-removes-grouping-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-removes-grouping-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize removes grouping",
    "text": "summarize removes grouping\nsummarize removes the last level of grouping\n\npenguins |&gt; \n    group_by(species, sex) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex    mass_avg\n  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;\n1 Adelie    female    3369.\n2 Adelie    male      4043.\n3 Adelie    &lt;NA&gt;      3540 \n4 Chinstrap female    3527.\n5 Chinstrap male      3939.\n6 Gentoo    female    4680.\n7 Gentoo    male      5485.\n8 Gentoo    &lt;NA&gt;      4588.\n\n\nGrouping by species still active"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-removes-grouping-2",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-removes-grouping-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize removes grouping",
    "text": "summarize removes grouping\nAdvice:\n\ngroup_by should be as close to summarize as possible\nungroup and re-group_by defensively"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-column-names",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-column-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize column names",
    "text": "summarize column names\nLike mutate, you should always give summarize column names\nDefaults are unhelpful:\n\npenguins |&gt; \n    group_by(species) |&gt;\n    summarize(sd(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   `sd(body_mass_g, na.rm = TRUE)`\n  &lt;fct&gt;                               &lt;dbl&gt;\n1 Adelie                               459.\n2 Chinstrap                            384.\n3 Gentoo                               504."
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-multiple-columns",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-multiple-columns",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize multiple columns",
    "text": "summarize multiple columns\nRemember the selection helpers from select\n\npenguins |&gt; \n    select(where(is.numeric))\n\n# A tibble: 344 × 5\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;int&gt;\n 1           39.1          18.7               181        3750  2007\n 2           39.5          17.4               186        3800  2007\n 3           40.3          18                 195        3250  2007\n 4           NA            NA                  NA          NA  2007\n 5           36.7          19.3               193        3450  2007\n 6           39.3          20.6               190        3650  2007\n 7           38.9          17.8               181        3625  2007\n 8           39.2          19.6               195        4675  2007\n 9           34.1          18.1               193        3475  2007\n10           42            20.2               190        4250  2007\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-multiple-columns-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-multiple-columns-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize multiple columns",
    "text": "summarize multiple columns\nCan be used inside summarize as well\n\nsafe_mean &lt;- function(x) mean(x, na.rm=TRUE)\npenguins |&gt; \n    group_by(species) |&gt;\n    summarize(across(where(is.numeric), safe_mean))\n\n# A tibble: 3 × 6\n  species   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie              38.8          18.3              190.       3701. 2008.\n2 Chinstrap           48.8          18.4              196.       3733. 2008.\n3 Gentoo              47.5          15.0              217.       5076. 2008."
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-without-group_by",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-without-group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "summarize without group_by",
    "text": "summarize without group_by\nWithout group_by, summarize takes summaries of the entire data set:\n\npenguins |&gt; \n    summarize(n=n(), \n              across(where(is.numeric), safe_mean))\n\n# A tibble: 1 × 6\n      n bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1   344           43.9          17.2              201.       4202. 2008."
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#summarize-and-group_by",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#summarize-and-group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "summarize computes summary statistics of a population\n\nmeans, standard deviations, counts, etc.\n\ngroup_by changes these to conditional summary statistics\n\nE.g., mean of body mass, conditional on adelie species\n\n. . .\nMany steps of real data analysis fits this pattern\nIf you dive deeper into split-apply-combine, can determine group-wise models as well (e.g., different trends for different groups)"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#looking-ahead",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Apply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables\nReshape Tables with pivot Operations"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#learning-more",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "For more, check out Sections 3.5-3.6 - “Groups” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-29/08_tidyr_pivot.html#where-are-we",
    "href": "slides/2025-04-29/08_tidyr_pivot.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-29/08_tidyr_pivot.html#goals-for-this-video",
    "href": "slides/2025-04-29/08_tidyr_pivot.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:"
  },
  {
    "objectID": "slides/2025-04-29/08_tidyr_pivot.html#looking-ahead",
    "href": "slides/2025-04-29/08_tidyr_pivot.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables ✅\nReshape Tables with pivot Operations ✅"
  },
  {
    "objectID": "slides/2025-04-29/08_tidyr_pivot.html#learning-more",
    "href": "slides/2025-04-29/08_tidyr_pivot.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More\nFor more, check out Chapter 5 - “Tidying” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-29/10_python_install.html#where-are-we",
    "href": "slides/2025-04-29/10_python_install.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-29/10_python_install.html#goals-for-this-video",
    "href": "slides/2025-04-29/10_python_install.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:"
  },
  {
    "objectID": "slides/2025-04-29/10_python_install.html#looking-ahead",
    "href": "slides/2025-04-29/10_python_install.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead"
  },
  {
    "objectID": "slides/2025-04-29/10_python_install.html#learning-more",
    "href": "slides/2025-04-29/10_python_install.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More"
  },
  {
    "objectID": "slides/2025-05-06/12_python_basics_control.html#where-are-we",
    "href": "slides/2025-05-06/12_python_basics_control.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-05-06/12_python_basics_control.html#goals-for-this-video",
    "href": "slides/2025-05-06/12_python_basics_control.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:"
  },
  {
    "objectID": "slides/2025-05-06/12_python_basics_control.html#looking-ahead",
    "href": "slides/2025-05-06/12_python_basics_control.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead"
  },
  {
    "objectID": "slides/2025-05-06/12_python_basics_control.html#learning-more",
    "href": "slides/2025-05-06/12_python_basics_control.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More"
  },
  {
    "objectID": "slides/2025-05-06/14_python_packages.html#where-are-we",
    "href": "slides/2025-05-06/14_python_packages.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Where are We?",
    "text": "Where are We?\n\n\nR Basics\nData Visualization\nR Programming\nTidy Data Manipulation\npython Basics\n\nInstalling python\nBasic Syntax and Control Flow\npython Objects\nUsing Packages\n\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-05-06/14_python_packages.html#goals-for-this-video",
    "href": "slides/2025-05-06/14_python_packages.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Goals for this Video",
    "text": "Goals for this Video\nIn this video:"
  },
  {
    "objectID": "slides/2025-05-06/14_python_packages.html#looking-ahead",
    "href": "slides/2025-05-06/14_python_packages.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Looking Ahead",
    "text": "Looking Ahead"
  },
  {
    "objectID": "slides/2025-05-06/14_python_packages.html#learning-more",
    "href": "slides/2025-05-06/14_python_packages.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Learning More",
    "text": "Learning More"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html",
    "href": "slides/2025-04-22/07_dplyr_join.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nIdentify suitable keys\nUnderstand different types of join operators\nSpecify columns to be used in joins\n\n\n\n\n\nOften in data analysis, we combine data from multiple sources to create new insights\njoins provide us a unified framework for combining data sets\n\n\n\n\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\n\n\n\nPartial alignment on name\nMissing:\n\nKeith (Richards) of the Rolling Stones in band_members\nMick (Jagger) as a guitarist in band_instruments\n\n\n\n\nRecall the concept of a key - a unique identifier in a table\n\nIdeally a single column (e.g., Employee ID)\nSometimes several columns (name + birth date)\n\nIn our example, name is a key we can use\n\n\n\nRecall our two data sets\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nMick\nStones\n\n\nPaul\nbass\nJohn\nBeatles\n\n\nKeith\nguitar\nPaul\nBeatles\n\n\n\n\n\n\nTo use name as a key, reorder rows so that name matches\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nJohn\nBeatles\n\n\nPaul\nbass\nPaul\nBeatles\n\n\nKeith\nguitar\n\n\n\n\n\n\nMick\nStones\n\n\n\n\n\n\nNote that Keith and Mick don’t have a matching row\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nJohn\nBeatles\n\n\nPaul\nbass\nPaul\nBeatles\n\n\nKeith\nguitar\n\n\n\n\n\n\nMick\nStones\n\n\n\n\n\n\nWe will definitely keep\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nJohn\nBeatles\n\n\nPaul\nbass\nPaul\nBeatles\n\n\n\nNeed to decide on unmatched rows\n\n\n\ninner_join - keep only rows with matches\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\n\n\n\n\nfull_join - keep all rows and fill with NA\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nKeith\nguitar\nNA\n\n\nMick\nNA\nStones\n\n\n\n\n\n\nleft_join - keep unmatched rows from first (“left”) table\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nKeith\nguitar\nNA\n\n\n\n\n\n\nright_join - keep unmatched rows from first (“right”) table\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nMick\nNA\nStones\n\n\n\n\n\n\nFigure from R for Data Science\n\nFigure from R for Data Science\n\n\n\nIn R, we specify joins with the join_by function\n\ninner_join(band_instruments, band_members, join_by(name == name))\n\njoin_by gives a “Join Specification”\n\nname == name are column names from first and second table\nBe explicit or R will “auto-guess” based on names matched\n\n\n\n\ninner_join discards unmatched rows\n\n\ninner_join(band_instruments, \n           band_members, \n           join_by(name == name))\n\n# A tibble: 2 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n\n\n\n\n\nfull_join keeps all rows\n\n\nfull_join(band_instruments, \n          band_members, \n          join_by(name == name))\n\n# A tibble: 4 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Keith guitar &lt;NA&gt;   \n4 Mick  &lt;NA&gt;   Stones \n\n\n\n\n\nleft_join keeps unmatched rows from first table\n\n\nleft_join(band_instruments, \n          band_members, \n          join_by(name == name))\n\n# A tibble: 3 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Keith guitar &lt;NA&gt;   \n\n\n\n\n\nright_join flips left_join\n\n\nright_join(band_instruments, \n           band_members, \n           join_by(name == name))\n\n# A tibble: 3 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Mick  &lt;NA&gt;   Stones \n\n\n\n\n\nType of join depends on treatment of missing values\n\nWhy is data missing?\nIf going to na.rm=TRUE, inner_join\nIf going to investigate further, full or left/right\n\n\n\n\n\nband_instruments2\n\n# A tibble: 3 × 2\n  artist plays \n  &lt;chr&gt;  &lt;chr&gt; \n1 John   guitar\n2 Paul   bass  \n3 Keith  guitar\n\n\nSame as before, but now name -&gt; artist\n\n\n\n\ninner_join(band_instruments2, \n           band_members, \n           join_by(artist == name))\n\n# A tibble: 2 × 3\n  artist plays  band   \n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  \n1 John   guitar Beatles\n2 Paul   bass   Beatles\n\n\n\n\n\nLet’s compute the z-scores of mass for our penguins by species\n\npenguin_stats &lt;- penguins |&gt;\n    group_by(species) |&gt;\n    summarize(mass_mean = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE))\n\npenguin_stats\n\n# A tibble: 3 × 3\n  species   mass_mean mass_sd\n  &lt;fct&gt;         &lt;dbl&gt;   &lt;dbl&gt;\n1 Adelie        3701.    459.\n2 Chinstrap     3733.    384.\n3 Gentoo        5076.    504.\n\n\n\n\n\n\npenguins |&gt;\n    inner_join(penguin_stats, \n               join_by(species == species)) |&gt;\n    select(species, body_mass_g, mass_mean, mass_sd)\n\n# A tibble: 344 × 4\n   species body_mass_g mass_mean mass_sd\n   &lt;fct&gt;         &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 Adelie         3750     3701.    459.\n 2 Adelie         3800     3701.    459.\n 3 Adelie         3250     3701.    459.\n 4 Adelie           NA     3701.    459.\n 5 Adelie         3450     3701.    459.\n 6 Adelie         3650     3701.    459.\n 7 Adelie         3625     3701.    459.\n 8 Adelie         4675     3701.    459.\n 9 Adelie         3475     3701.    459.\n10 Adelie         4250     3701.    459.\n# ℹ 334 more rows\n\n\n\n\n\n\npenguins |&gt;\n    inner_join(penguin_stats, \n               join_by(species == species)) |&gt;\n    mutate(mass_z = (body_mass_g - mass_mean) / mass_sd) |&gt;\n    select(species, body_mass_g, mass_z)\n\n# A tibble: 344 × 3\n   species body_mass_g mass_z\n   &lt;fct&gt;         &lt;int&gt;  &lt;dbl&gt;\n 1 Adelie         3750  0.108\n 2 Adelie         3800  0.217\n 3 Adelie         3250 -0.983\n 4 Adelie           NA NA    \n 5 Adelie         3450 -0.547\n 6 Adelie         3650 -0.110\n 7 Adelie         3625 -0.165\n 8 Adelie         4675  2.12 \n 9 Adelie         3475 -0.492\n10 Adelie         4250  1.20 \n# ℹ 334 more rows\n\n\n\n\n\nJoin onto summary statistics to get group (species) statistics\ninner_join since we know all penguins match to one species\n\n\n\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables ✅\nReshape Tables with pivot Operations\n\n\n\n\nFor more, check out Chapter 19 - “Joins” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#combining-tables",
    "href": "slides/2025-04-22/07_dplyr_join.html#combining-tables",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Combining Tables",
    "text": "Combining Tables\nOften in data analysis, we combine data from multiple sources to create new insights\njoins provide us a unified framework for combining data sets"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#new-example-data",
    "href": "slides/2025-04-22/07_dplyr_join.html#new-example-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "New Example Data",
    "text": "New Example Data\n\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#table-keys",
    "href": "slides/2025-04-22/07_dplyr_join.html#table-keys",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Table Keys",
    "text": "Table Keys\nRecall the concept of a key - a unique identifier in a table\n\nIdeally a single column (e.g., Employee ID)\nSometimes several columns (name + birth date)\n\nIn our example, name is a key we can use"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Join",
    "text": "Your First Join\nRecall our two data sets\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nMick\nStones\n\n\nPaul\nbass\nJohn\nBeatles\n\n\nKeith\nguitar\nPaul\nBeatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#specifying-joins",
    "href": "slides/2025-04-22/07_dplyr_join.html#specifying-joins",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Specifying Joins",
    "text": "Specifying Joins\nIn R, we specify joins with the join_by function\n\ninner_join(band_instruments, band_members, join_by(name == name))\n\njoin_by gives a “Join Specification”\n\nname == name are column names from first and second table\nBe explicit or R will “auto-guess” based on names matched"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#new-example-data-1",
    "href": "slides/2025-04-22/07_dplyr_join.html#new-example-data-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "New Example Data",
    "text": "New Example Data\nPartial alignment on name\nMissing:\n\nKeith (Richards) of the Rolling Stones in band_members\nMick (Jagger) as a guitarist in band_instruments"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join-1",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Join",
    "text": "Your First Join\nTo use name as a key, reorder rows so that name matches\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nJohn\nBeatles\n\n\nPaul\nbass\nPaul\nBeatles\n\n\nKeith\nguitar\n\n\n\n\n\n\nMick\nStones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join-2",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Join",
    "text": "Your First Join\nNote that Keith and Mick don’t have a matching row\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nJohn\nBeatles\n\n\nPaul\nbass\nPaul\nBeatles\n\n\nKeith\nguitar\n\n\n\n\n\n\nMick\nStones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join-3",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Join",
    "text": "Your First Join\nWe will definitely keep\n\n\n\n\n\n\n\n\n\nband_instruments\nband_members\n\n\n\n\nname\nplays\nname\nband\n\n\nJohn\nguitar\nJohn\nBeatles\n\n\nPaul\nbass\nPaul\nBeatles\n\n\n\nNeed to decide on unmatched rows"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join---inner-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join---inner-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "inner_join - keep only rows with matches\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join---full-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join---full-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "full_join - keep all rows and fill with NA\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nKeith\nguitar\nNA\n\n\nMick\nNA\nStones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join---left-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join---left-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "left_join - keep unmatched rows from first (“left”) table\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nKeith\nguitar\nNA"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-join---right-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-join---right-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "right_join - keep unmatched rows from first (“right”) table\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nMick\nNA\nStones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#types-of-joins",
    "href": "slides/2025-04-22/07_dplyr_join.html#types-of-joins",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Types of Joins",
    "text": "Types of Joins\nFigure from R for Data Science\n\nFigure from R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#inner_join",
    "href": "slides/2025-04-22/07_dplyr_join.html#inner_join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "inner_join",
    "text": "inner_join\ninner_join discards unmatched rows\n\n\ninner_join(band_instruments, \n           band_members, \n           join_by(name == name))\n\n# A tibble: 2 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#full_join",
    "href": "slides/2025-04-22/07_dplyr_join.html#full_join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "full_join",
    "text": "full_join\nfull_join keeps all rows\n\n\nfull_join(band_instruments, \n          band_members, \n          join_by(name == name))\n\n# A tibble: 4 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Keith guitar &lt;NA&gt;   \n4 Mick  &lt;NA&gt;   Stones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#left_join",
    "href": "slides/2025-04-22/07_dplyr_join.html#left_join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "left_join",
    "text": "left_join\nleft_join keeps unmatched rows from first table\n\n\nleft_join(band_instruments, \n          band_members, \n          join_by(name == name))\n\n# A tibble: 3 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Keith guitar &lt;NA&gt;"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#right_join",
    "href": "slides/2025-04-22/07_dplyr_join.html#right_join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "right_join",
    "text": "right_join\nright_join flips left_join\n\n\nright_join(band_instruments, \n           band_members, \n           join_by(name == name))\n\n# A tibble: 3 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Mick  &lt;NA&gt;   Stones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#picking-a-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#picking-a-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Picking a Join",
    "text": "Picking a Join\nType of join depends on treatment of missing values\n\nWhy is data missing?\nIf going to na.rm=TRUE, inner_join\nIf going to investigate further, full or left/right"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#specifying-alternate-column-names",
    "href": "slides/2025-04-22/07_dplyr_join.html#specifying-alternate-column-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Specifying Alternate Column Names",
    "text": "Specifying Alternate Column Names\n\ninner_join(band_instruments2, \n           band_members, \n           join_by(artist == name))\n\n# A tibble: 2 × 3\n  artist plays  band   \n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  \n1 John   guitar Beatles\n2 Paul   bass   Beatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#specifying-alternate-column-names-1",
    "href": "slides/2025-04-22/07_dplyr_join.html#specifying-alternate-column-names-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Specifying Alternate Column Names",
    "text": "Specifying Alternate Column Names\n\n\n# A tibble: 2 × 3\n  artist plays  band   \n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  \n1 John   guitar Beatles\n2 Paul   bass   Beatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores",
    "href": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Computing Z-Scores",
    "text": "Computing Z-Scores\nLet’s compute the z-scores of mass for our penguins by species\n\npenguin_stats &lt;- penguins |&gt;\n    group_by(species) |&gt;\n    summarize(mass_mean = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE))\n\npenguin_stats\n\n# A tibble: 3 × 3\n  species   mass_mean mass_sd\n  &lt;fct&gt;         &lt;dbl&gt;   &lt;dbl&gt;\n1 Adelie        3701.    459.\n2 Chinstrap     3733.    384.\n3 Gentoo        5076.    504."
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-1",
    "href": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Computing Z-Scores",
    "text": "Computing Z-Scores\n\npenguins |&gt;\n    inner_join(penguin_stats, \n               join_by(species == species)) |&gt;\n    select(species, body_mass_g, mass_mean, mass_sd)\n\n# A tibble: 344 × 4\n   species body_mass_g mass_mean mass_sd\n   &lt;fct&gt;         &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 Adelie         3750     3701.    459.\n 2 Adelie         3800     3701.    459.\n 3 Adelie         3250     3701.    459.\n 4 Adelie           NA     3701.    459.\n 5 Adelie         3450     3701.    459.\n 6 Adelie         3650     3701.    459.\n 7 Adelie         3625     3701.    459.\n 8 Adelie         4675     3701.    459.\n 9 Adelie         3475     3701.    459.\n10 Adelie         4250     3701.    459.\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-2",
    "href": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Computing Z-Scores",
    "text": "Computing Z-Scores\n\npenguins |&gt;\n    inner_join(penguin_stats, \n               join_by(species == species)) |&gt;\n    mutate(mass_z = (body_mass_g - mass_mean) / mass_sd) |&gt;\n    select(species, body_mass_g, mass_z)\n\n# A tibble: 344 × 3\n   species body_mass_g mass_z\n   &lt;fct&gt;         &lt;int&gt;  &lt;dbl&gt;\n 1 Adelie         3750  0.108\n 2 Adelie         3800  0.217\n 3 Adelie         3250 -0.983\n 4 Adelie           NA NA    \n 5 Adelie         3450 -0.547\n 6 Adelie         3650 -0.110\n 7 Adelie         3625 -0.165\n 8 Adelie         4675  2.12 \n 9 Adelie         3475 -0.492\n10 Adelie         4250  1.20 \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-3",
    "href": "slides/2025-04-22/07_dplyr_join.html#computing-z-scores-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Computing Z-Scores",
    "text": "Computing Z-Scores\nJoin onto summary statistics to get group (species) statistics\ninner_join since we know all penguins match to one species"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#specifying-column-names",
    "href": "slides/2025-04-22/07_dplyr_join.html#specifying-column-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Specifying Column Names",
    "text": "Specifying Column Names\n\nband_instruments2\n\n# A tibble: 3 × 2\n  artist plays \n  &lt;chr&gt;  &lt;chr&gt; \n1 John   guitar\n2 Paul   bass  \n3 Keith  guitar\n\n\nSame as before, but now name -&gt; artist"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html",
    "href": "slides/2025-04-22/06_dplyr_summarize.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nCombine multiple rows using summarize\nCompute overall and group-wise summary statistics\n\n\n\n\n\nYou have already seen group_by modify the operation of ‘aggregation’ functions:\n\nmin, max\nmean, sum,\nntile\n\netc\n. . .\nNo reduction in data complexity unless combined with filter\n\n\n\ngroup_by and summarize \\(\\implies\\) summary statistics\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   avg_mass\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\n. . .\nUnlike filter, these are new rows:\n\nOne row summarizing each group\nNot a subset of old rows\n\n\n\n\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   avg_mass\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\nWhat happened to other features (e.g., flipper_length_mm)?\n. . .\nsummarize only keeps:\n\nGrouping variables (species)\nCreated variables (avg_mass)\n\nAll other data is dropped\n\n\n\nCan perform multiple summaries at once:\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE), \n              sd_mass = sd(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 3\n  species   avg_mass sd_mass\n  &lt;fct&gt;        &lt;dbl&gt;   &lt;dbl&gt;\n1 Adelie       3701.    459.\n2 Chinstrap    3733.    384.\n3 Gentoo       5076.    504.\n\n\nImportant to do all summaries in one call\n\n\n\nThe n() function will count the number of rows in a group\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE), \n              n = n(), \n              mass_se = mass_sd / sqrt(n))\n\n# A tibble: 3 × 5\n  species   mass_avg mass_sd     n mass_se\n  &lt;fct&gt;        &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n1 Adelie       3701.    459.   152    37.2\n2 Chinstrap    3733.    384.    68    46.6\n3 Gentoo       5076.    504.   124    45.3\n\n\n\n\n\ncur_group() returns the current group name\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE), \n              n = n(), \n              mass_se = mass_sd / sqrt(n), \n              species_cap = toupper(cur_group()))\n\n# A tibble: 3 × 6\n  species   mass_avg mass_sd     n mass_se species_cap\n  &lt;fct&gt;        &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;      \n1 Adelie       3701.    459.   152    37.2 1          \n2 Chinstrap    3733.    384.    68    46.6 2          \n3 Gentoo       5076.    504.   124    45.3 3          \n\n\nCan also use species directly\n\n\n\nsummarize removes the last level of grouping\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   mass_avg\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\nNo grouping remains\n\n\n\nsummarize removes the last level of grouping\n\npenguins |&gt; \n    group_by(species, sex) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex    mass_avg\n  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;\n1 Adelie    female    3369.\n2 Adelie    male      4043.\n3 Adelie    &lt;NA&gt;      3540 \n4 Chinstrap female    3527.\n5 Chinstrap male      3939.\n# ℹ 3 more rows\n\n\nGrouping by species still active\n\n\n\nAdvice:\n\ngroup_by should be as close to summarize as possible\nungroup and re-group_by defensively\n\n\n\n\nLike mutate, give summarize column names\nDefaults are unhelpful:\n\npenguins |&gt; \n    group_by(species) |&gt;\n    summarize(sd(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   `sd(body_mass_g, na.rm = TRUE)`\n  &lt;fct&gt;                               &lt;dbl&gt;\n1 Adelie                               459.\n2 Chinstrap                            384.\n3 Gentoo                               504.\n\n\n\n\n\nRemember the selection helpers from select\n\npenguins |&gt; \n    select(where(is.numeric)) |&gt;\n    print(n=4)\n\n# A tibble: 344 × 5\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;int&gt;\n1           39.1          18.7               181        3750  2007\n2           39.5          17.4               186        3800  2007\n3           40.3          18                 195        3250  2007\n4           NA            NA                  NA          NA  2007\n# ℹ 340 more rows\n\n\n\n\n\nCan be used inside summarize as well\n\nsafe_mean &lt;- function(x) mean(x, na.rm=TRUE)\npenguins |&gt; \n    group_by(species) |&gt;\n    summarize(across(where(is.numeric), safe_mean))\n\n# A tibble: 3 × 6\n  species   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie              38.8          18.3              190.       3701. 2008.\n2 Chinstrap           48.8          18.4              196.       3733. 2008.\n3 Gentoo              47.5          15.0              217.       5076. 2008.\n\n\n\n\n\nWithout group_by, summarize takes summaries of the entire data set:\n\npenguins |&gt; \n    summarize(n=n(), \n              across(where(is.numeric), safe_mean))\n\n# A tibble: 1 × 6\n      n bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1   344           43.9          17.2              201.       4202. 2008.\n\n\n\n\n\nsummarize computes summary statistics of a population\n\nmeans, standard deviations, counts, etc.\n\ngroup_by changes these to conditional summary statistics\n\nE.g., mean of body mass, conditional on adelie species\n\n. . .\nMany steps of real data analysis fits this pattern\nIf you dive deeper into split-apply-combine, can determine group-wise models as well (e.g., different trends for different groups)\n\n\n\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables\nReshape Tables with pivot Operations\n\n\n\n\nFor more, check out Sections 3.5-3.6 - “Groups” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-inner-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-inner-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Inner Join",
    "text": "Your First Inner Join\ninner_join - keep only rows with matches\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-full-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-full-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Full Join",
    "text": "Your First Full Join\nfull_join - keep all rows and fill with NA\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nKeith\nguitar\nNA\n\n\nMick\nNA\nStones"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-left-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-left-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Left Join",
    "text": "Your First Left Join\nleft_join - keep unmatched rows from first (“left”) table\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nKeith\nguitar\nNA"
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#your-first-right-join",
    "href": "slides/2025-04-22/07_dplyr_join.html#your-first-right-join",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Your First Right Join",
    "text": "Your First Right Join\nright_join - keep unmatched rows from first (“right”) table\n\n\n\nname\nplays\nband\n\n\n\n\nJohn\nguitar\nBeatles\n\n\nPaul\nbass\nBeatles\n\n\nMick\nNA\nStones"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "summarize removes the last level of grouping\n\npenguins |&gt; \n    group_by(species) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   mass_avg\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n\n\nNo grouping remains"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "summarize removes the last level of grouping\n\npenguins |&gt; \n    group_by(species, sex) |&gt; \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex    mass_avg\n  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;\n1 Adelie    female    3369.\n2 Adelie    male      4043.\n3 Adelie    &lt;NA&gt;      3540 \n4 Chinstrap female    3527.\n5 Chinstrap male      3939.\n# ℹ 3 more rows\n\n\nGrouping by species still active"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping-2",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#removes-grouping-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Advice:\n\ngroup_by should be as close to summarize as possible\nungroup and re-group_by defensively"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#column-names",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#column-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Like mutate, give summarize column names\nDefaults are unhelpful:\n\npenguins |&gt; \n    group_by(species) |&gt;\n    summarize(sd(body_mass_g, na.rm=TRUE))\n\n# A tibble: 3 × 2\n  species   `sd(body_mass_g, na.rm = TRUE)`\n  &lt;fct&gt;                               &lt;dbl&gt;\n1 Adelie                               459.\n2 Chinstrap                            384.\n3 Gentoo                               504."
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#multiple-columns",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#multiple-columns",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Remember the selection helpers from select\n\npenguins |&gt; \n    select(where(is.numeric)) |&gt;\n    print(n=4)\n\n# A tibble: 344 × 5\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;int&gt;\n1           39.1          18.7               181        3750  2007\n2           39.5          17.4               186        3800  2007\n3           40.3          18                 195        3250  2007\n4           NA            NA                  NA          NA  2007\n# ℹ 340 more rows"
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#multiple-columns-1",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#multiple-columns-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Can be used inside summarize as well\n\nsafe_mean &lt;- function(x) mean(x, na.rm=TRUE)\npenguins |&gt; \n    group_by(species) |&gt;\n    summarize(across(where(is.numeric), safe_mean))\n\n# A tibble: 3 × 6\n  species   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie              38.8          18.3              190.       3701. 2008.\n2 Chinstrap           48.8          18.4              196.       3733. 2008.\n3 Gentoo              47.5          15.0              217.       5076. 2008."
  },
  {
    "objectID": "slides/2025-04-22/06_dplyr_summarize.html#without-group_by",
    "href": "slides/2025-04-22/06_dplyr_summarize.html#without-group_by",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Without group_by, summarize takes summaries of the entire data set:\n\npenguins |&gt; \n    summarize(n=n(), \n              across(where(is.numeric), safe_mean))\n\n# A tibble: 1 × 6\n      n bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1   344           43.9          17.2              201.       4202. 2008."
  },
  {
    "objectID": "slides/2025-04-22/07_dplyr_join.html#specifying-names",
    "href": "slides/2025-04-22/07_dplyr_join.html#specifying-names",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Specifying Names",
    "text": "Specifying Names\n\ninner_join(band_instruments2, \n           band_members, \n           join_by(artist == name))\n\n# A tibble: 2 × 3\n  artist plays  band   \n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  \n1 John   guitar Beatles\n2 Paul   bass   Beatles"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html",
    "href": "slides/2025-04-22/08_tidyr_pivot.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nIdentify wide and long format data\nPivot data from wide to long format\nPivot data from long to wide format\n\n\n\n\n\nRecall our Baruch enrollment example of tidy data ✅\n\n\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400\n\n\n\n\n\nWe can plot this\n\nggplot(D, aes(x=Semester, y=Enrollment, color=Course)) +\n    geom_jitter() + theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nNot easy to plot both Enrollment and Cap columns\n. . .\nNeed data in this “untidy” format\n\n\n# A tibble: 12 × 4\n   Semester Course     Number Type      \n   &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     \n 1 Fall     Accounting    200 Enrollment\n 2 Fall     Accounting    250 Cap       \n 3 Fall     Law           100 Enrollment\n 4 Fall     Law           125 Cap       \n 5 Fall     Statistics    200 Enrollment\n 6 Fall     Statistics    200 Cap       \n 7 Spring   Accounting    300 Enrollment\n 8 Spring   Accounting    350 Cap       \n 9 Spring   Law            50 Enrollment\n10 Spring   Law           100 Cap       \n11 Spring   Statistics    400 Enrollment\n12 Spring   Statistics    400 Cap       \n\n\n\n\n\n\nggplot(D2, aes(x=Semester, y=Number, shape=Type, color=Course)) +\n    geom_jitter() + theme_bw() + theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\nWe switched from a “wide” format to a “long” format\n\nNot absolute terms, relative to each other\nWide has more columns (tidier)\nLong is easier for certain plots\n\n\n\n\npivot operations can be used to switch between formats\n\npivot_longer combine columns\npivot_wider split a column\n\nSyntax is hard to remember - use ?pivot_wider and ?pivot_longer for examples\n\n\n\n\npivot_longer(D, \n             cols=c(Enrollment, Cap), \n             names_to=\"Type\",  # Quote since not a current column\n             values_to=\"Number\")\n\n\n\n# A tibble: 12 × 4\n  Semester Course     Type       Number\n  &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt;\n1 Fall     Accounting Enrollment    200\n2 Fall     Accounting Cap           250\n3 Fall     Law        Enrollment    100\n# ℹ 9 more rows\n\n\n\ncols to pivot\nnames_to: column where to put (old) column name\nvalues_to: column where to store old values\n\n\n\n\n\npivot_wider(D2, \n            id_cols = c(Semester, Course), \n            values_from = Number, \n            names_from = Type)\n\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400\n\n\n\nid_cols: columns kept in place\nnames_from: column where to get new column names\nvalues_from: column where to get values\n\n\n\n\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables ✅\nReshape Tables with pivot Operations ✅\n\n. . .\nNow it’s your turn!\n\n\n\nFor more, check out Chapter 5 - “Tidying” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#where-are-we",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#where-are-we",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#goals-for-this-video",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#goals-for-this-video",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "In this video:\n\n\nIdentify wide and long format data\nPivot data from wide to long format\nPivot data from long to wide format"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#looking-ahead",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#looking-ahead",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Apply Grouped Operations ✅\nSummarize Across Multiple Rows ✅\nJoin Multiple Tables ✅\nReshape Tables with pivot Operations ✅\n\n. . .\nNow it’s your turn!"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#learning-more",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#learning-more",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "For more, check out Chapter 5 - “Tidying” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Recall our Baruch enrollment example of tidy data ✅\n\n\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-1",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "We can plot this\n\nggplot(D, aes(x=Semester, y=Enrollment, color=Course)) +\n    geom_jitter() + theme_bw()"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-2",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-2",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "Not easy to plot both Enrollment and Cap columns\n. . .\nNeed data in this “untidy” format\n\n\n# A tibble: 12 × 4\n   Semester Course     Number Type      \n   &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     \n 1 Fall     Accounting    200 Enrollment\n 2 Fall     Accounting    250 Cap       \n 3 Fall     Law           100 Enrollment\n 4 Fall     Law           125 Cap       \n 5 Fall     Statistics    200 Enrollment\n 6 Fall     Statistics    200 Cap       \n 7 Spring   Accounting    300 Enrollment\n 8 Spring   Accounting    350 Cap       \n 9 Spring   Law            50 Enrollment\n10 Spring   Law           100 Cap       \n11 Spring   Statistics    400 Enrollment\n12 Spring   Statistics    400 Cap"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-3",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#tidy-data-3",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "ggplot(D2, aes(x=Semester, y=Number, shape=Type, color=Course)) +\n    geom_jitter() + theme_bw() + theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#wide-and-long-data",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#wide-and-long-data",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "We switched from a “wide” format to a “long” format\n\nNot absolute terms, relative to each other\nWide has more columns (tidier)\nLong is easier for certain plots"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#pivots",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#pivots",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "pivot operations can be used to switch between formats\n\npivot_longer combine columns\npivot_wider split a column\n\nSyntax is hard to remember - use ?pivot_wider and ?pivot_longer for examples"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#wide-to-long",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#wide-to-long",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "pivot_longer(D, \n             cols=c(Enrollment, Cap), \n             names_to=\"Type\",  # Quote since not a current column\n             values_to=\"Number\")\n\n\n\n# A tibble: 12 × 4\n  Semester Course     Type       Number\n  &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt;\n1 Fall     Accounting Enrollment    200\n2 Fall     Accounting Cap           250\n3 Fall     Law        Enrollment    100\n# ℹ 9 more rows\n\n\n\ncols to pivot\nnames_to: column where to put (old) column name\nvalues_to: column where to store old values"
  },
  {
    "objectID": "slides/2025-04-22/08_tidyr_pivot.html#long-to-wide",
    "href": "slides/2025-04-22/08_tidyr_pivot.html#long-to-wide",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "pivot_wider(D2, \n            id_cols = c(Semester, Course), \n            values_from = Number, \n            names_from = Type)\n\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400\n\n\n\nid_cols: columns kept in place\nnames_from: column where to get new column names\nvalues_from: column where to get values"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html",
    "href": "slides/2025-04-22/05_dplyr_groupby.html",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "",
    "text": "R Basics\nData Visualization\nR Programming\nTidy Data Manipulation\n\nSelecting Rows and Columns\nComputing Groupwise Summaries\nJoining Tables\nReshaping Tables\n\npython Basics\nWeb Scraping with python\n\n\n\n\n\nIn this video:\n\n\nUnderstand “grouped” dplyr operations\nUse nested/compound group structures\nApply rowwise() operations\n\n\n\n\n\nSo far, we have applied vectorized operations to data.frames:\n\nselect: Keep and drop columns\nmutate: Create new columns\nfilter: Keep and drop rows\n\n. . .\nFor each of these, we have operated on the whole data set\nOften, we instead want to operate on chunks of the data at a time\n\n\n\nRecall our penguins:\n\npenguins\n\n\n\n# A tibble: 344 × 3\n  species bill_length_mm body_mass_g\n  &lt;fct&gt;            &lt;dbl&gt;       &lt;int&gt;\n1 Adelie            39.1        3750\n2 Adelie            39.5        3800\n3 Adelie            40.3        3250\n# ℹ 341 more rows\n\n\n. . .\nHeaviest penguin:\n\npenguins |&gt; slice_max(body_mass_g)\n\n\n\n# A tibble: 1 × 3\n  species bill_length_mm body_mass_g\n  &lt;fct&gt;            &lt;dbl&gt;       &lt;int&gt;\n1 Gentoo            49.2        6300\n\n\n\n\n\nHow can we get the heaviest penguin of each species?\n. . .\nConceptually:\n\nSplit the data into three groups\nApply slice_max to each group separately\nCombine the three rows back together\n\n. . .\nSometimes called the split-apply-combine paradigm\n\n\n\nImplemented using the group_by adverb\n\nDoesn’t do anything on its own\nChanges the behavior of other functions\n\n. . .\n\npenguins |&gt; group_by(species) |&gt; slice_max(body_mass_g)\n\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe           43.2          19                 197        4775\n2 Chinstrap Dream            52            20.7               210        4800\n3 Gentoo    Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\nLet’s take this step-by-step\n\npenguins |&gt; group_by(species)\n\n# A tibble: 344 × 8\n# Groups:   species [3]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nSame data as before, but here # Groups: species[3]\n\n\n\ngroup_by changes behavior of aggregating functions:\n\nmin(), max(), n(), sum(), prod(), etc.\n\nMany other operations use these internally\n\n\n\nRecall\n\npenguins |&gt; slice_max(body_mass_g)\n\nis equivalent to:\n\npenguins |&gt; filter(body_mass_g == max(body_mass_g, na.rm=TRUE))\n\nor even\n\npenguins |&gt; \n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n    filter(body_mass_g == mass_max)\n\n\n\n\nLooking at the first step\n\npenguins |&gt; \n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n\n\n\n# A tibble: 344 × 3\n  species body_mass_g mass_max\n  &lt;fct&gt;         &lt;int&gt;    &lt;int&gt;\n1 Adelie         3750     6300\n2 Adelie         3800     6300\n3 Adelie         3250     6300\n# ℹ 341 more rows\n\n\n\n\n\nWith group_by, a different max for each group\n\npenguins |&gt; \n    group_by(species) |&gt;\n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n\n\n\n# A tibble: 344 × 3\n# Groups:   species [3]\n  species body_mass_g mass_max\n  &lt;fct&gt;         &lt;int&gt;    &lt;int&gt;\n1 Adelie         3750     4775\n2 Adelie         3800     4775\n3 Adelie         3250     4775\n# ℹ 341 more rows\n\n\n\n\n\nHence,\n\npenguins |&gt; \n    group_by(species) |&gt;\n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n    filter(body_mass_g == mass_max)\n\n\npenguins |&gt; group_by(species) |&gt; slice_max(body_mass_g)\n\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe           43.2          19                 197        4775\n2 Chinstrap Dream            52            20.7               210        4800\n3 Gentoo    Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\ngives a 3 row answer (one per group)\n\n\n\nOperations do not have to select only a single row like slice_max\n. . .\nTo get “above average” penguins for each species\n\npenguins |&gt; \n    group_by(species) |&gt; \n    filter(body_mass_g &gt; mean(body_mass_g, na.rm=TRUE))\n\n\n\n\nCan apply group_by to create “compound” groups\n\npenguins |&gt; group_by(species, year)\n\n# A tibble: 344 × 8\n# Groups:   species, year [9]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\\(9 = 3 \\times 3\\) groups\n\n\n\nGrouped operations apply as before:\n\npenguins |&gt; \n    group_by(species, year) |&gt; \n    slice_max(body_mass_g)\n\n# A tibble: 9 × 8\n# Groups:   species, year [9]\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Torgersen           39.2          19.6               195        4675\n2 Adelie    Torgersen           42.9          17.6               196        4700\n3 Adelie    Biscoe              43.2          19                 197        4775\n4 Chinstrap Dream               49.2          18.2               195        4400\n5 Chinstrap Dream               52            20.7               210        4800\n6 Chinstrap Dream               50.8          18.5               201        4450\n7 Gentoo    Biscoe              49.2          15.2               221        6300\n8 Gentoo    Biscoe              51.1          16.3               220        6000\n9 Gentoo    Biscoe              48.8          16.2               222        6000\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\nMissing ‘combinations’ automatically dropped:\n\npenguins |&gt; \n    group_by(species, island) \n\n\n\n# A tibble: 344 × 4\n# Groups:   species, island [5]\n   species island    body_mass_g sex   \n   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt; &lt;fct&gt; \n 1 Adelie  Torgersen        3750 male  \n 2 Adelie  Torgersen        3800 female\n 3 Adelie  Torgersen        3250 female\n 4 Adelie  Torgersen          NA &lt;NA&gt;  \n 5 Adelie  Torgersen        3450 female\n 6 Adelie  Torgersen        3650 male  \n 7 Adelie  Torgersen        3625 female\n 8 Adelie  Torgersen        4675 male  \n 9 Adelie  Torgersen        3475 &lt;NA&gt;  \n10 Adelie  Torgersen        4250 &lt;NA&gt;  \n# ℹ 334 more rows\n\n\n\n\n\nOnce you are done with grouped operations, ungroup\n\npenguins |&gt; \n    group_by(species, island) |&gt;\n    slice_max(body_mass_g) |&gt;\n    ungroup()\n\n# A tibble: 5 × 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe              43.2          19                 197        4775\n2 Adelie    Dream               39.8          19.1               184        4650\n3 Adelie    Torgersen           42.9          17.6               196        4700\n4 Chinstrap Dream               52            20.7               210        4800\n5 Gentoo    Biscoe              49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\nIn general, grouping on continuous variables is a bad choice:\n\npenguins |&gt; group_by(body_mass_g)\n\n# A tibble: 344 × 8\n# Groups:   body_mass_g [95]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n(Analogy: Checking exact equality of continuous random variables)\n\n\n\nBetter choices:\n\nGroup on quantiles (ntile) or cut points (cut)\n\n\npenguins |&gt;\n    mutate(mass_5ile = ntile(body_mass_g, 5)) |&gt;\n    group_by(mass_5ile) |&gt;\n    ...\n\n\n\n\nRarely, you may need to apply an operation to each row separately without vectorization\nrowwise lets you do so - makes each row its own group\n\npenguins |&gt; rowwise()\n\n\n\n# A tibble: 344 × 4\n# Rowwise: \n  sex    island    flipper_length_mm body_mass_g\n  &lt;fct&gt;  &lt;fct&gt;                 &lt;int&gt;       &lt;int&gt;\n1 male   Torgersen               181        3750\n2 female Torgersen               186        3800\n# ℹ 342 more rows\n\n\n. . .\nNote: This is a bit dangerous - vectorization is important for data integrity\n\n\n\n\nApply Grouped Operations ✅\nSummarize Across Multiple Rows\nJoin Multiple Tables\nReshape Tables with pivot Operations\n\n\n\n\nFor more, check out Sections 3.5-3.6 - “Groups” of R for Data Science"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-5",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#effects-of-group_by-5",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Effects of group_by",
    "text": "Effects of group_by\nOperations do not have to select only a single row like slice_max\n\nTo get “above average” penguins for each species\n\npenguins |&gt; \n    group_by(species) |&gt; \n    filter(body_mass_g &gt; mean(body_mass_g, na.rm=TRUE))"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#stopping-groups",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#stopping-groups",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Stopping groups",
    "text": "Stopping groups\nOnce you are done with grouped operations, ungroup\n\npenguins |&gt; \n    group_by(species, island) |&gt;\n    slice_max(body_mass_g) |&gt;\n    ungroup()\n\n# A tibble: 5 × 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe              43.2          19                 197        4775\n2 Adelie    Dream               39.8          19.1               184        4650\n3 Adelie    Torgersen           42.9          17.6               196        4700\n4 Chinstrap Dream               52            20.7               210        4800\n5 Gentoo    Biscoe              49.2          15.2               221        6300\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#numeric-variables",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#numeric-variables",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Numeric Variables",
    "text": "Numeric Variables\nIn general, grouping on continuous variables is a bad choice:\n\npenguins |&gt; group_by(body_mass_g)\n\n# A tibble: 344 × 8\n# Groups:   body_mass_g [95]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n(Analogy: Checking exact equality of continuous random variables)"
  },
  {
    "objectID": "slides/2025-04-22/05_dplyr_groupby.html#numeric-variables-1",
    "href": "slides/2025-04-22/05_dplyr_groupby.html#numeric-variables-1",
    "title": "Software Tools for Data AnalysisSTA 9750Michael Weylandt",
    "section": "Numeric Variables",
    "text": "Numeric Variables\nBetter choices:\n\nGroup on quantiles (ntile) or cut points (cut)\n\n\npenguins |&gt;\n    mutate(mass_5ile = ntile(body_mass_g, 5)) |&gt;\n    group_by(mass_5ile) |&gt;\n    ..."
  }
]