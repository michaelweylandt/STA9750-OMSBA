{
  "hash": "aca4568f7f8af4314d0b5f63992b75fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"STA 9750 </br> Statistical Modeling\"\nauthor: \"Michael Weylandt </br> Baruch College\"\nformat: revealjs\n---\n\n\n\n## Introduction\n\nIn this video: \n\n::: incremental\n\n- Selecting Columns\n- Selecting Rows\n- Modifying Columns and Creating New Columns\n\n:::\n. . . \n\nLater: \n\n- Computing Summary Statistics with Tidy Tools\n\n. . . \n\nBut first - review!\n\n# Review\n\n## Tidy Data\n\nTidy data - everything in its proper place: \n\n- One and only one type of information per column\n- One and only one observation per row\n- No values 'hiding' in column or row names\n\n. . . \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n# Tidy Tools\n\n## `tidyverse`\n\n`tidyverse` - Tools for manipulating tidy data\n\n. . . \n\nMake sure to load the `tidyverse` package before using\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nWill print some messages about conflicts - safe to ignore\n\n## `tidyverse`\n\n`Tidyverse` tools have _excellent_ documentation\n\n- Visit `tidyverse.org` for overall information\n- Individual packages: `ggplot2.tidyverse.org`, `dplyr.tidyverse.org`, *etc.*\n\n. . . \n\n- Function Reference - Detailed information on specific functions\n- Vignettes / Articles - Big picture tutorials\n\n## `dplyr`\n\nYou have already seen one `tidyverse` package: `ggplot2`\n\n. . . \n\nToday we start with `dplyr` - 'grammar of data manipulation'\n\n![](https://dplyr.tidyverse.org/logo.png)\n\n## `select`\n\nThe `select` function can be used to select certain columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins, species, bill_length_mm, body_mass_g, sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n   species bill_length_mm body_mass_g sex   \n   <fct>            <dbl>       <int> <fct> \n 1 Adelie            39.1        3750 male  \n 2 Adelie            39.5        3800 female\n 3 Adelie            40.3        3250 female\n 4 Adelie            NA            NA <NA>  \n 5 Adelie            36.7        3450 female\n 6 Adelie            39.3        3650 male  \n 7 Adelie            38.9        3625 female\n 8 Adelie            39.2        4675 male  \n 9 Adelie            34.1        3475 <NA>  \n10 Adelie            42          4250 <NA>  \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nFirst argument is data\n\nOther arguments are columns to be selected \n\n## `select`\n\nContrast\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins, species, bill_length_mm, body_mass_g, sex)\n```\n:::\n\n\n\nand\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins[,c(\"species\", \"bill_length_mm\", \"body_mass_g\", \"sex\")]\n```\n:::\n\n\n\nNo quotes around column names\n\n## `|>` - Put that in your Pipe\n\n`R` supports _piped_ operations - feeding the output of one function into another\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins, species, bill_length_mm, body_mass_g, sex)\n```\n:::\n\n\n\nis equivalent to \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> select(species, bill_length_mm, body_mass_g, sex)\n```\n:::\n\n\n\n. . . \n\nRead `|>` as \"and then\"\n\n`dplyr` plays _very nicely_ with pipes\n\n## `select`\n\nLike vector indexing, negative sign _drops_ columns: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> select(-species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 7\n   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex    year\n   <fct>           <dbl>         <dbl>             <int>       <int> <fct> <int>\n 1 Torge…           39.1          18.7               181        3750 male   2007\n 2 Torge…           39.5          17.4               186        3800 fema…  2007\n 3 Torge…           40.3          18                 195        3250 fema…  2007\n 4 Torge…           NA            NA                  NA          NA <NA>   2007\n 5 Torge…           36.7          19.3               193        3450 fema…  2007\n 6 Torge…           39.3          20.6               190        3650 male   2007\n 7 Torge…           38.9          17.8               181        3625 fema…  2007\n 8 Torge…           39.2          19.6               195        4675 male   2007\n 9 Torge…           34.1          18.1               193        3475 <NA>   2007\n10 Torge…           42            20.2               190        4250 <NA>   2007\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n## `select`\n\n`:` operator selects a _range_ of columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> select(bill_length_mm:body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            <dbl>         <dbl>             <int>       <int>\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n## `select`\n\n`select` also supports several \"smart\" helpers to pick columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> select(contains(\"bill\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            <dbl>         <dbl>\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n## `select`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> select(ends_with(\"mm\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm flipper_length_mm\n            <dbl>         <dbl>             <int>\n 1           39.1          18.7               181\n 2           39.5          17.4               186\n 3           40.3          18                 195\n 4           NA            NA                  NA\n 5           36.7          19.3               193\n 6           39.3          20.6               190\n 7           38.9          17.8               181\n 8           39.2          19.6               195\n 9           34.1          18.1               193\n10           42            20.2               190\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n## `select`\n\nHelpers can be combined using `&` (intersection) and `|` (union) operations:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> select(contains(\"bill\") | ends_with(\"g\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm body_mass_g\n            <dbl>         <dbl>       <int>\n 1           39.1          18.7        3750\n 2           39.5          17.4        3800\n 3           40.3          18          3250\n 4           NA            NA            NA\n 5           36.7          19.3        3450\n 6           39.3          20.6        3650\n 7           38.9          17.8        3625\n 8           39.2          19.6        4675\n 9           34.1          18.1        3475\n10           42            20.2        4250\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n## `select` \n\n_Predicate_ operator can select columns based on properties of values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> select(where(is.numeric))\n```\n:::\n\n\n\n## `select` \n\n`where` combines very nicely with other selectors \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> select(where(is.numeric) & ends_with(\"mm\"))\n```\n:::\n\n\n\n## `filter`\n\nWhile `select` is used for column selection, `filter` is used for row selection\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40)\n```\n:::\n\n\n\n. . . \n\nSimilar syntax to `select`: \n\n- No need to quote column names\n- Data is first (piped) argument\n- Later arguments specify action\n\n## `filter`\n\nContrast\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40)\n```\n:::\n\n\n\nwith \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins[penguins$bill_length_mm > 40, ]\n```\n:::\n\n\n\n## `filter`\n\nMultiple filters give the _intersection_:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40, sex == \"female\")\n```\n:::\n\n\n\n. . . \n\nUse logical operators to get the _union_: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40 | sex == \"female\")\n```\n:::\n\n\n\n## `filter`\n\nPipes are very useful for multi-step operations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40) |> select(species)\n```\n:::\n\n\n\n. . . \n\nCompare to \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(filter(penguins, bill_length_mm > 40), species)\n```\n:::\n\n\n\nPiped form lets us read left to right instead of inside out\n\n## `filter`\n\nCan use more complex comparisons in `filter`: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(penguins, body_mass_g > mean(body_mass_g, na.rm=TRUE))\n```\n:::\n\n\n\n. . . \n\nWhat would happen without `na.rm=TRUE`? \n\nYou will explore much more complicated examples in the accompanying activity. \n\n## `filter`\n\nCommon mistake - using only a single equals sign for equality\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(sex = \"female\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `filter()`:\n! We detected a named input.\nℹ This usually means that you've used `=` instead of `==`.\nℹ Did you mean `sex == \"female\"`?\n```\n\n\n:::\n:::\n\n\n\n## `filter` extensions\n\nFunctions implementing extensions of `filter`: \n\n- `slice_min`\n- `slice_max`\n- `slice_head`\n- `slice_tail`\n\n## `filter` extensions\n\n`slice_sample` is useful for getting a random subset of your data. \n\n- Useful if exploring a large data set\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> slice_sample(n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>     <fct>             <dbl>         <dbl>             <int>       <int>\n 1 Adelie    Dream              39.6          18.8               190        4600\n 2 Adelie    Torgers…           35.1          19.4               193        4200\n 3 Gentoo    Biscoe             49.3          15.7               217        5850\n 4 Chinstrap Dream              46.8          16.5               189        3650\n 5 Adelie    Dream              40.8          18.4               195        3900\n 6 Adelie    Dream              35.7          18                 202        3550\n 7 Adelie    Dream              38.8          20                 190        3950\n 8 Gentoo    Biscoe             47.7          15                 216        4750\n 9 Adelie    Biscoe             39.7          18.9               184        3550\n10 Adelie    Torgers…           42.8          18.5               195        4250\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n## `mutate`\n\nSo far we have only done subsetting. What about creating _new_ columns? \n\n. . . \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    mutate(body_mass_lb = body_mass_g / 453) |>\n    select(contains(\"body\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   body_mass_g body_mass_lb\n         <int>        <dbl>\n 1        3750         8.28\n 2        3800         8.39\n 3        3250         7.17\n 4          NA        NA   \n 5        3450         7.62\n 6        3650         8.06\n 7        3625         8.00\n 8        4675        10.3 \n 9        3475         7.67\n10        4250         9.38\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n## `mutate`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    mutate(body_mass_lb = body_mass_g / 453) |>\n    select(contains(\"body\"))\n```\n:::\n\n\n\nSimilar syntax to `select` and `filter`\n\n. . . \n\nTo name the new column, put name on the left of the `=`. \n\nIf you leave it out, you get an unhelpful default: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> mutate(body_mass_g / 453) |> select(contains(\"body\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n  body_mass_g `body_mass_g/453`\n        <int>             <dbl>\n1        3750              8.28\n2        3800              8.39\n3        3250              7.17\n# ℹ 341 more rows\n```\n\n\n:::\n:::\n\n\n\n## `mutate`\n\nCan change columns \"in place\" by careful renaming: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    select(where(is.character) | where(is.factor)) |>\n    mutate(species = toupper(species))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species island    sex   \n   <chr>   <fct>     <fct> \n 1 ADELIE  Torgersen male  \n 2 ADELIE  Torgersen female\n 3 ADELIE  Torgersen female\n 4 ADELIE  Torgersen <NA>  \n 5 ADELIE  Torgersen female\n 6 ADELIE  Torgersen male  \n 7 ADELIE  Torgersen female\n 8 ADELIE  Torgersen male  \n 9 ADELIE  Torgersen <NA>  \n10 ADELIE  Torgersen <NA>  \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n## `mutate`\n\nCan do arbitrary vectorized operations and access recently\ncreated columns:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    select(where(is.numeric)) |>\n    mutate(weight_kg = body_mass_g / 1000,\n           height_m = body_height_mm / 1000, \n           bmi = weight_kg / height_m^2)\n```\n:::\n\n\n\n(Sadly, don't actually have height data)\n\n## `mutate`\n\n`?mutate` has several helpful functions: \n\n- `cumsum`, `cummean`\n- `lead`, `lag`\n- `if_else`, `case_when`\n\n## `rename`\n\nUse of `mutate` to rename: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> mutate(Year = year) |> select(-year)\n```\n:::\n\n\n\n. . . \n\n`rename` combines both steps:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> rename(Year = year) \n```\n:::\n\n\n\nNo new functionality - clearer _intent_\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}