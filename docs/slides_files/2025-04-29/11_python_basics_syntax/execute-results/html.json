{
  "hash": "bb8549d63e09dc2e97d2f586b93a558a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntopic: \"`python` Basics: Syntax\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# {{< meta topic >}}\n\n## Where are We?\n\n::: {style=\"font-size: 85%;\"}\n- `R` Basics\n- Data Visualization\n- `R` Programming\n- Tidy Data Manipulation\n- [`python` Basics]{color=\"blue\"}\n  - Installing `python`\n  - [Basic Syntax and Control Flow]{color=\"blue\"}\n  - `python` Objects\n  - Using Packages\n- Web Scraping with `python`\n\n:::\n\n\n## Goals for this Video\n\nIn this video: \n\n::: incremental\n\n- Basic Syntax of `python`\n- `python` Containers\n- Function Calls in `python`\n\n:::\n\n## Syntax: Literals\n\nLike `R`, `python` has _literal_ syntax for basic types\n\n- integers\n- real numbers\n- strings\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n3\n3.5\n\"abc\"\n```\n:::\n\n\n\n\nFor basic types, essentially unchanged\n\n## Syntax: Assignment\n\n`python` only assigns with the `=` operator (no `<-`)\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = \"abc\"\ny = 3.5 + 200\nz = 200\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'abc'\n```\n\n\n:::\n:::\n\n\n\n\nFunctions are defined differently (later)\n\n## Syntax: Names\n\n`python` variable names are similar to `R`:\n\n- Any lower/upper letters\n- Numbers and underscores not at start\n\n. . . \n\nPython *convention* is to name variables and functions in \n\n`snake_case`\n\nwith `CamelCase` for types (later)\n\n. . . \n\nNo analogy to `R` backticks (non-syntactic names)\n\n## Syntax: Arithmetic\n\nBasic arithmetic looks like `R`: `+`, `-`, `*`, `/`\n\nDifferences: \n\n- `^` is bitwise `XOR`: use `**` instead\n- `//` integer division (in `R`, `%/%`)\n- `%` division remainder (in `R`, `%%`)\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninterest_rate = 0.03 # 3% Annual rate\nmonthly_rate = (1 + interest_rate) ** (1/12) - 1\n```\n:::\n\n\n\n\n## Containers\n\nIn `python`, scalars are real (not just length-1 vectors)\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlen(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTypeError: object of type 'int' has no len()\n```\n\n\n:::\n:::\n\n\n\n\n*vs* equivalent `R`: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n. . . \n\nThree primary _containers_ in `python`\n\n- `list`\n- `set`\n- `dict`\n\n## list Objects\n\nA `python` `list` is (like `R`):\n\n- an _ordered_ container \n- of arbitrary types\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = [1, 3.5, \"fish\", [\"a\", \"different\", \"list\"]]\n```\n:::\n\n\n\n\n. . . \n\nUnlike `R`, `python` is *zero-based*!\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx[2] # Third item!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'fish'\n```\n\n\n:::\n:::\n\n\n\n\n## list Objects\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = [1, 3.5, \"fish\", [\"a\", \"different\", \"list\"]]\n\n1 in x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTrue\n```\n\n\n:::\n\n```{.python .cell-code}\n2 in x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFalse\n```\n\n\n:::\n\n```{.python .cell-code}\n\"list\" in x \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFalse\n```\n\n\n:::\n\n```{.python .cell-code}\ndel x[2] # Remove _third_ item!\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1, 3.5, ['a', 'different', 'list']]\n```\n\n\n:::\n:::\n\n\n\n\n## set Objects\n\nA `python` `set` is:\n\n- an _unordered_ container \n- of arbitrary types\n- without duplicates\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = {1, 3.5, \"fish\", 3.5}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{1, 3.5, 'fish'}\n```\n\n\n:::\n:::\n\n\n\n\nNote no repeat in `x` (3.5)\n\nCan't put `list`s inside `set`s\n\n## set Objects\n\nTo check if item is in set, use `in` operator:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{1, 3.5, 'fish'}\n```\n\n\n:::\n\n```{.python .cell-code}\n2 in x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFalse\n```\n\n\n:::\n\n```{.python .cell-code}\n1 in x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTrue\n```\n\n\n:::\n:::\n\n\n\n\nSet operations: \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = {1, 2, 3}\ny = {3, 4, 5}\nx & y # Intersection\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{3}\n```\n\n\n:::\n\n```{.python .cell-code}\nx | y # Union\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{1, 2, 3, 4, 5}\n```\n\n\n:::\n\n```{.python .cell-code}\nx - y # Set difference\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{1, 2}\n```\n\n\n:::\n:::\n\n\n\n\n## dict Objects\n\nA `python` `dict` is:\n\n- An _unordered_ mapping\n- key => value pairs\n\n_Incredibly_ useful for 'look-ups'\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = {\"Zicklin\": \"Business\", \"Weissman\": \"A&S\", \"Marxe\": \"Public Affairs\"}\nx[\"Zicklin\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'Business'\n```\n\n\n:::\n:::\n\n\n\n\n. . . \n\nSome rules about what the _keys_ can be - strings are a good baseline\n\n## dict Objects\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{'Zicklin': 'Business', 'Weissman': 'A&S', 'Marxe': 'Public Affairs'}\n```\n\n\n:::\n\n```{.python .cell-code}\nx[\"Zicklin\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'Business'\n```\n\n\n:::\n\n```{.python .cell-code}\n\"Zicklin\" in x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTrue\n```\n\n\n:::\n\n```{.python .cell-code}\n\"Baruch\" in x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFalse\n```\n\n\n:::\n\n```{.python .cell-code}\ndel x[\"Zicklin\"] # Remove (delete) a pair\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{'Weissman': 'A&S', 'Marxe': 'Public Affairs'}\n```\n\n\n:::\n\n```{.python .cell-code}\nx[\"Baruch\"] = \"Awesome\" # Set value\nx[\"Baruch\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'Awesome'\n```\n\n\n:::\n:::\n\n\n\n\n## tuple\n\nA tuple is a 'frozen' list\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = [1, 2, 3]\ny = (1, 2, 3)\n\ndel x[0]\ndel y[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTypeError: 'tuple' object doesn't support item deletion\n```\n\n\n:::\n:::\n\n\n\n\nVery common behind the scenes\n\n## Looking Ahead\n\n- Use Basic Syntax ✅\n- Manipulate Containers ✅\n- Iterate on Containers \n- Call Functions\n- Control Flow\n\n## Learning More\n\nSee [Section 3.1](https://wesmckinney.com/book/python-builtin#tut_data_structures) of *Python for Data Science*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}