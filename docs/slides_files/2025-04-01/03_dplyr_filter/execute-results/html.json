{
  "hash": "2a6cff09c1ef0736ee374c63732f4b85",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntopic: \"Tidy Row Selection\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n# {{< meta topic >}}\n\n## Where are We?\n\n::: {style=\"font-size: 85%;\"}\n- `R` Basics\n- Data Visualization\n- `R` Programming\n- [Tidy Data Manipulation]{color=\"blue\"}\n  - [Selecting Rows and Columns]{color=\"blue\"}\n  - Computing Groupwise Summaries\n  - Joining Tables\n  - Reshaping Tables\n- `python` Basics\n- Web Scraping with `python`\n\n:::\n\n\n## Goals for this Video\n\nIn this video: \n\n::: incremental\n\n- `filter` out rows in a tidy way\n- Apply Boolean operators\n- `slice` and dice to find maxima and minima\n\n:::\n\n## filter\n\nWhile `select` is used for column selection, `filter` is used for row selection\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40)\n```\n:::\n\n\n\n. . . \n\nSimilar syntax to `select`: \n\n- No need to quote column names\n- Data is first (piped) argument\n- Later arguments specify action\n\n. . . \n\nInstead of names, provide logical tests (filters)\n\n## filter\n\nContrast\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40)\n```\n:::\n\n\n\nwith \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins[penguins$bill_length_mm > 40, ]\n```\n:::\n\n\n\n## filter\n\nMultiple filters give the _intersection_:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40, sex == \"female\")\n```\n:::\n\n\n\n. . . \n\nUse logical operators to get the _union_: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40 | sex == \"female\")\n```\n:::\n\n\n\n. . . \n\n![](https://r4ds.hadley.nz/diagrams/transform.png){width=\"60%\"}\n\n## filter\n\nPipes are very useful for multi-step operations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(bill_length_mm > 40) |> select(species)\n```\n:::\n\n\n\n. . . \n\nCompare to \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(filter(penguins, bill_length_mm > 40), species)\n```\n:::\n\n\n\nPiped form reads left to right instead of inside out\n\n## filter\n\nCan use more complex comparisons in `filter`: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(body_mass_g > mean(body_mass_g, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 149 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.2          19.6               195        4675\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           34.6          21.1               198        4400\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Dream               39.8          19.1               184        4650\n 6 Adelie  Dream               44.1          19.7               196        4400\n 7 Adelie  Dream               39.6          18.8               190        4600\n 8 Adelie  Biscoe              40.1          18.9               188        4300\n 9 Adelie  Biscoe              41.3          21.1               195        4400\n10 Adelie  Torgersen           41.8          19.4               198        4450\n# ℹ 139 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nWhat would happen without `na.rm=TRUE`? Why?\n\n## filter\n\nCommon mistake - using only a single equals sign for equality\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(sex = \"female\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `filter()`:\n! We detected a named input.\nℹ This usually means that you've used `=` instead of `==`.\nℹ Did you mean `sex == \"female\"`?\n```\n\n\n:::\n:::\n\n\n\n## slice functions\n\nThe `slice_*` family extend `filter`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> slice_max(body_mass_g, n=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n1 Gentoo  Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nEquivalent to: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(body_mass_g == max(body_mass_g, na.rm=TRUE))\n```\n:::\n\n\n\n## slice functions\n\nStandard slices: \n\n- `slice_min`\n- `slice_max`\n- `slice_head`\n- `slice_tail`\n\n. . . \n\nSpecify one of: \n\n- `n=` to get top/bottom $n$\n- `prop=` to select a fraction\n\n## slice functions\n\n`slice_sample`: random subset of your data \n\n- Useful if exploring a large data set\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> slice_sample(n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>     <fct>             <dbl>         <dbl>             <int>       <int>\n 1 Chinstrap Dream              40.9          16.6               187        3200\n 2 Chinstrap Dream              46.5          17.9               192        3500\n 3 Adelie    Dream              36.3          19.5               190        3800\n 4 Adelie    Dream              36            17.1               187        3700\n 5 Adelie    Torgers…           37.8          17.3               180        3700\n 6 Adelie    Torgers…           37.7          19.8               198        3500\n 7 Chinstrap Dream              49.7          18.6               195        3600\n 8 Gentoo    Biscoe             41.7          14.7               210        4700\n 9 Gentoo    Biscoe             44            13.6               208        4350\n10 Chinstrap Dream              52.7          19.8               197        3725\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n## Looking Ahead\n\n\n- Selecting Columns ✅ \n- Selecting Rows ✅ \n- Transforming Columns\n\n## Learning More\n\nFor more, check out \n[Chapter 3 - \"Data Transformation\"](https://r4ds.hadley.nz/data-transform#rows) of *`R` for Data Science*\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}