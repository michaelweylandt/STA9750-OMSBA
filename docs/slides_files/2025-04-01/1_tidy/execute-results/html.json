{
  "hash": "1b07b4197ef080aa161d832594507f83",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntopic: \"Tidy Data\"\n---\n\n\n\n# {{< meta topic >}}\n\n## Where are We? \n\n::: {style=\"font-size: 85%;\"}\n\n- [`R` Basics]{color=\"#0000FF\"}\n  - Variables and \"Calculator Math\"\n  - Vectors\n  - [Data Frames]{color=\"#000FF\"}\n- Data Visualization\n- `R` Programming\n- Data Manipulation\n- `Python` Basics\n- Web Scraping with `Python`\n\n:::\n\n## Goals for this Video\n\nIn this video: \n\n::: incremental\n\n- Introduce the concept of Tidy Data\n- Identify Key Aspects of Tidy Data\n- Learn to Diagnose Non-Tidy Data\n\n:::\n\n## Data Frames in R\n\n`data.frame` - `R`'s _tabular_ data storage\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   <NA> 2007\n5 female 2007\n6   male 2007\n```\n\n\n:::\n:::\n\n\n\n## Data Frames in R\n\n`palmerpenguins`\n\n::: incremental\n- 344 penguins observed on the Palmer Islands (Antarctica)\n- 3 species, 3 islands, 3 years\n- 4 numeric variables\n- One categorial (`factor`) variable (`sex`)\n:::\n\n[![](https://allisonhorst.github.io/palmerpenguins/logo.png){width=10%}](https://allisonhorst.github.io/palmerpenguins/)\n\n## Data Frames in R\n\nKey features: \n\n::: incremental\n\n- Tabular (rows and columns) structure\n- Entries in the same column are all of the same type\n- Columns may be different types\n\n::: \n\n## Data Frames in R\n\nCan be manipulated using standard `R` syntax: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(penguins[penguins$bill_length_mm > 40, \"species\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   Adelie Chinstrap    Gentoo \n       51        68       123 \n```\n\n\n:::\n:::\n\n\n\n::: incremental \n\n- `$` extracts a column as a vector\n- `df[row index, column index]`\n  - Logical row indexing to select rows where `bill_length_mm` > 40\n  - Column indexing by name to select a single column\n  \n:::\n\n\n# Tidy Data\n\n## What is Tidy Data?\n\n\"Tidy Data\": \n\n- Principles to make data manipulation *safe* and *easy*\n- Decrease chance of errors\n- Increase productivity\n\n. . . \n\nWhat does it mean to be tidy? \n\n::: incremental\n\n- **Everything in its proper place**\n\n::: \n\n## Tidy Data\n\nRecall our penguins: \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  species bill_length_mm flipper_length_mm body_mass_g    sex\n1  Adelie           39.1               181        3750   male\n2  Adelie           39.5               186        3800 female\n3  Adelie           40.3               195        3250 female\n4  Adelie             NA                NA          NA   <NA>\n5  Adelie           36.7               193        3450 female\n6  Adelie           39.3               190        3650   male\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nKey features: \n\n::: incremental\n\n- Each row is one observation (üêß)\n- Each column has _one and only one_ fact\n- All values are in the table \n  - Not hiding in row and column names\n\n:::\n\n## Tidy Data\n\n[![](https://r4ds.had.co.nz/images/tidy-1.png)](https://r4ds.hadley.nz/data-tidy.html)\n\n> Figure from [*`R` for Data Science*](https://r4ds.hadley.nz/) by H. Wickham\n\n\n<!-- Not sure why this is needed, but without it image above doesn't render -->\n\n![](https://allisonhorst.github.io/palmerpenguins/logo.png){width=00%}\n\n## Tidy - Why? \n\nWhy emphasize tidy data? \n\n. . . \n\nMinimize distractions: \n\n- Free to focus on _analysis_ not _code_ \n\n. . . \n\nOnce data is \"tidy\", you can focus on the real questions\n\n. . . \n\nFirst goal for data pre-processing (\"tidying up\")\n\n## Tidy - Who (and When)?\n\nThe name and principles of \"tidy data\" were popularized by H. Wickham (2014)\n\n. . . \n\nCore ideas are much older, dating back to (at least) Codd's *Relational Model*\nin the 1970s, now ubiquitous in relational databases (SQL)\n\n. . . \n\nNow found in: \n\n- Python (`pandas`)\n- Julia (`DataFrames`)\n- Rust (`polars`) \n- and more\n\n## Tidy - How (and Where)?\n\n`tidyverse` - Packages for Manipulating Tidy Data: \n\n::: incremental\n\n- `ggplot2`: Visualization\n- `dplyr`: `SQL`-like operations\n- `tidyr`: Reshaping and cleaning data\n- `readr`: Ingest tidy data into `R`\n- Tidy manipulation of different data types: \n  - `stringr`, `forcats`, `lubridate`\n\n:::\n\n. . . \n\nMore helpers in the background (`tibble`, `vctrs`, ...)\n\n## Aside: tibbles\n\nYou will sometimes see `tibble` (`tbl_df`) as a synonym for `data.frame`\n\n- Minor differences in output formatting\n- Fewer edge cases\n\n\n## Some Untidy Examples\n\nBaruch college business core enrollment:\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 4\n  Semester Course     Enrollment   Cap\n  <chr>    <chr>           <dbl> <dbl>\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nTidy! ‚úÖ \n\n. . . \n\n- Each row is one unit (a class) üëç\n- Columns are well-typed üëç\n- One piece of information per column üëç\n\n## Some Untidy Examples\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 3\n  Semester Course     Enrollment  \n  <chr>    <chr>      <chr>       \n1 Fall     Accounting \"200 of 250\"\n2 Fall     Law        \"100 of 125\"\n3 Fall     Statistics \"200 of 200\"\n4 Spring   Accounting \"300 of 350\"\n5 Spring   Law        \" 50 of 100\"\n6 Spring   Statistics \"400 of 400\"\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nUntidy! ‚ùå\n\n. . . \n\nMultiple pieces of information per cell (`Enrollment`)\n\n## Some Untidy Examples\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 √ó 4\n   Semester Course     Number Type      \n   <chr>    <chr>       <dbl> <chr>     \n 1 Fall     Accounting    200 Enrollment\n 2 Fall     Accounting    250 Cap       \n 3 Fall     Law           100 Enrollment\n 4 Fall     Law           125 Cap       \n 5 Fall     Statistics    200 Enrollment\n 6 Fall     Statistics    200 Cap       \n 7 Spring   Accounting    300 Enrollment\n 8 Spring   Accounting    350 Cap       \n 9 Spring   Law            50 Enrollment\n10 Spring   Law           100 Cap       \n11 Spring   Statistics    400 Enrollment\n12 Spring   Statistics    400 Cap       \n```\n\n\n:::\n:::\n\n\n\n. . . \n\nUntidy! ‚ùå\n\n. . . \n\nMixing two pieces of information (Enrollments and Caps)\n\n*Tip*: When one unit spans multiple rows, likely untidy\n\n## Some Untidy Examples\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 3\n  Semester Course     Enrollment\n  <chr>    <chr>           <dbl>\n1 Fall     Accounting        200\n2 Fall     Law               100\n3 Fall     Statistics        200\n# ‚Ñπ 3 more rows\n```\n\n\n:::\n:::\n\n\n\nand \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 3\n  Semester Course       Cap\n  <chr>    <chr>      <dbl>\n1 Fall     Accounting   250\n2 Fall     Law          125\n3 Fall     Statistics   200\n# ‚Ñπ 3 more rows\n```\n\n\n:::\n:::\n\n\n\n\n. . . \n\nUntidy! ‚ùå\n\n. . . \n\nData spread across multiple columns\n\n# Wrap-Up\n\n## Looking Ahead\n\nFor now, we'll provide you with *tidy* data\n\n. . . \n\nUpcoming topics: \n\n::: incremental \n\n- Visualizing Tidy Data (Week 3)\n- Statistical Models of Tidy Data (Week 4)\n- Manipulating Tidy Data (Week 5)\n- Taking Untidy Web Data and Making it Tidy (Week 7)\n\n::: \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}