{
  "hash": "7e53f4ae036cb06de6c393efd215409c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntopic: \"Tidy Column Manipulation\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n# {{< meta topic >}}\n\n## Where are We?\n\n::: {style=\"font-size: 85%;\"}\n- `R` Basics\n- Data Visualization\n- `R` Programming\n- [Tidy Data Manipulation]{color=\"blue\"}\n  - [Selecting Rows and Columns]{color=\"blue\"}\n  - Computing Groupwise Summaries\n  - Joining Tables\n  - Reshaping Tables\n- `Python` Basics\n- Web Scraping with `Python`\n\n:::\n\n\n## Goals for this Video\n\nIn this video: \n\n::: incremental\n\n- `mutate` rows to safely transform data\n- Perform conditional transformations\n- Compute running and cumulative statistics\n- Apply simple aggregation and window functions\n\n:::\n\n\n## mutate\n\nSo far we have only subsetted our data. Can we create _new_ columns? \n\n. . . \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    mutate(body_mass_lb = body_mass_g / 453) |>\n    select(contains(\"body\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   body_mass_g body_mass_lb\n         <int>        <dbl>\n 1        3750         8.28\n 2        3800         8.39\n 3        3250         7.17\n 4          NA        NA   \n 5        3450         7.62\n 6        3650         8.06\n 7        3625         8.00\n 8        4675        10.3 \n 9        3475         7.67\n10        4250         9.38\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n## mutate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    mutate(body_mass_lb = body_mass_g / 453) |>\n    select(contains(\"body\"))\n```\n:::\n\n\n\nSimilar syntax to `select` and `filter`\n\n. . . \n\nPut name on the left of the `=`\n\nIf you omit a name, unhelpful default: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> mutate(body_mass_g / 453) |> select(contains(\"body\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n  body_mass_g `body_mass_g/453`\n        <int>             <dbl>\n1        3750              8.28\n2        3800              8.39\n3        3250              7.17\n# ℹ 341 more rows\n```\n\n\n:::\n:::\n\n\n\n## mutate\n\nCan change columns \"in place\" by careful renaming: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    select(where(is.character) | where(is.factor)) |>\n    mutate(species = toupper(species)) |>\n    slice_head(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  species island    sex   \n  <chr>   <fct>     <fct> \n1 ADELIE  Torgersen male  \n2 ADELIE  Torgersen female\n3 ADELIE  Torgersen female\n4 ADELIE  Torgersen <NA>  \n5 ADELIE  Torgersen female\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nUse this sparingly - destroys 'original' values\n\n\n## mutate\n\nCan do arbitrary vectorized operations and access recently\ncreated columns:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    select(where(is.numeric)) |>\n    mutate(weight_kg = body_mass_g / 1000,\n           height_m = body_height_mm / 1000, \n           bmi = weight_kg / height_m^2)\n```\n:::\n\n\n\n(Sadly, don't actually have height data)\n\n## mutate helpers\n\n`?mutate` lists several helpful functions: \n\n- `if_else`, `case_when`\n- `cumsum`, `cummean`\n- `lead`, `lag`\n- `min_rank`, `dense_rank`\n\n## Complex Transforms\n\nUse `case_when` for transforms that depend on other values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(cuteness_level = \n    case_when(\n        species == \"Adelie\" ~ \"Exceptionally\", \n        species == \"Gentoo\" ~ \"Remarkably\",\n        species == \"Chinstrap\" ~ \"Stunningly\"\n    )) |>\n  select(species, cuteness_level, body_mass_g) |> \n  slice_head(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  species cuteness_level body_mass_g\n  <fct>   <chr>                <int>\n1 Adelie  Exceptionally         3750\n2 Adelie  Exceptionally         3800\n3 Adelie  Exceptionally         3250\n4 Adelie  Exceptionally           NA\n5 Adelie  Exceptionally         3450\n```\n\n\n:::\n:::\n\n\n\n\n## Complex Transforms\n\n`case_when` specifies a _series_ of tests. First one passed is used: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncase_when(\n    test1 ~ value1, \n    test2 ~ value2\n    ...\n)\n```\n:::\n\n\n\nUse `TRUE` for default values\n\n## Cumulative Stats\n\nThe `cum*` family of functions compute cumulative values\n\n- `cummean`\n- `cummax`, `cummin`\n- `cumsum`, `cumprod`\n\n. . . \n\nThese depend on the order of the data\n\nYou may want to use `arrange` to order data first\n\n\n## Cumulative Stats\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n    arrange(body_mass_g) |> # Defaults to increasing; use desc() to reverse\n    mutate(average_mass = cummean(body_mass_g), \n           number_of_penguins = row_number()) |>\n    select(species, \n           body_mass_g,\n           average_mass,  \n           number_of_penguins) |>\n    slice_head(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  species   body_mass_g average_mass number_of_penguins\n  <fct>           <int>        <dbl>              <int>\n1 Chinstrap        2700         2700                  1\n2 Adelie           2850         2775                  2\n3 Adelie           2850         2800                  3\n4 Adelie           2900         2825                  4\n5 Adelie           2900         2840                  5\n```\n\n\n:::\n:::\n\n\n\n_Rolling_ statistics are a bit trickier - look into `RcppRoll`\n\n## Ranking\n\nTo assign ranks, use the `*_rank` functions: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n    mutate(body_mass_rank = min_rank(body_mass_g)) |>\n    select(contains(\"body_mass\")) |>\n    slice_head(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  body_mass_g body_mass_rank\n        <int>          <int>\n1        3750            121\n2        3800            130\n3        3250             29\n4          NA             NA\n5        3450             61\n```\n\n\n:::\n:::\n\n\n\n- `min_rank` and `dense_rank` differ in treatment of ties\n\n## Ranking\n\n`percent_rank` and `cume_dist` for CDF-type ranking\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n    mutate(body_mass_pct_rank = round(percent_rank(body_mass_g), 2),\n           body_mass_cdf      = round(cume_dist(body_mass_g), 2)) |>\n    select(contains(\"body_mass\")) |>\n    slice_head(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  body_mass_g body_mass_pct_rank body_mass_cdf\n        <int>              <dbl>         <dbl>\n1        3750               0.35          0.37\n2        3800               0.38          0.41\n3        3250               0.08          0.1 \n4          NA              NA            NA   \n5        3450               0.18          0.2 \n```\n\n\n:::\n:::\n\n\n\nCDF: `cume_dist` $\\leq$  vs `percent_rank` $<$\n\n## Ranking\n\nUse `ntile` to split data into quartiles, deciles, *etc.*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n    mutate(body_mass_decile = ntile(body_mass_g, 10)) |>\n    select(contains(\"body_mass\")) |>\n    slice_head(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  body_mass_g body_mass_decile\n        <int>            <int>\n1        3750                4\n2        3800                4\n3        3250                1\n4          NA               NA\n5        3450                2\n```\n\n\n:::\n:::\n\n\n\n## Looking Ahead\n\n- Selecting Columns ✅ \n- Selecting Rows ✅ \n- Transforming Columns ✅ \n\n. . . \n\nNow it's your turn!\n\nTime to apply these tools to flights leaving NYC\n\n## Learning More\n\nFor more, check out \n[Chapter 3 - \"Data Transformation\"](https://r4ds.hadley.nz/data-transform#sec-mutate) \nof *`R` for Data Science*\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}