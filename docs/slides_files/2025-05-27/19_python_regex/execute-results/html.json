{
  "hash": "ad5a5df7d63d263beb139f9d5a9fe529",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"</br></br></br></br></br>Software Tools for Data Analysis</br>STA 9750</br>Michael Weylandt\"\ntopic: \"HTML: Structured Text for the Web\"\n---\n\n\n# {{< meta topic >}}\n\n## Where are We?\n\n::: {style=\"font-size: 75%;\"}\n- `R` Basics\n- Data Visualization\n- `R` Programming\n- Tidy Data Manipulation\n- `python` Basics\n- Web Scraping with `python`\n  - Basics of HTTP\n  - Making HTTP Requests with `Python`\n  - Structure of HTML\n  - Parsing HTML with `Python`\n  - [String Manipulation in `Python`]{color=\"blue\"}\n\n:::\n\n\n## Goals for this Video\n\nIn this video: \n\n::: {.incremental}\n\n- Regular Expressions\n- Quantifiers\n- Character Classes\n- Capture Groups\n- Using Regex to Clean Text\n\n:::\n\n## Regular Expressions\n\nOften, we aren't looking for a particular string, but strings of a 'type': \n\n- Pull all phone numbers from a long text\n- Identify all error messages in a log file\n- Find all emails on a web page to spam ðŸ˜ˆ \n\n. . . \n\nRather than hard coding _every_ possible phone number, specify a pattern\n\n. . . \n\n> Phone Number: 3 digits  + '-' + 3 digits + '-' + 4 digits\n\n## Regular Expressions\n\nRegular expressions define pattern matching *rules* to be applied to strings\n\n. . . \n\nThe simplest regular expression is just a literal string: \n\n::: {#a596d0c7 .cell execution_count=1}\n``` {.python .cell-code}\nimport re\nx = \"I bought 3 bananas, 2 apples, and 10 carrots\"\nre.findall(\"banana\", x) # Find y in x\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n['banana']\n```\n:::\n:::\n\n\n## Regular Expressions\n\nUse `[]` to mean anything in this set\n\n::: {#b9577f7d .cell execution_count=2}\n``` {.python .cell-code}\nx = \"I bought 3 bananas, 2 apples, and 10 carrots\"\nre.findall(\"[0123456789]\", x) # Find all numbers\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n['3', '2', '1', '0']\n```\n:::\n:::\n\n\n## Regular Expressions\n\nCan use \"character classes\" for common sets (digits, letters, *etc.*)\n\n::: {#4d201845 .cell execution_count=3}\n``` {.python .cell-code}\nx = \"I bought 3 bananas, 2 apples, and 10 carrots\"\nre.findall(r\"\\d\", x) \n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['3', '2', '1', '0']\n```\n:::\n:::\n\n\n- Digits: `\\d`\n- Spaces: `\\s`\n- Letters: `\\w`\n\nNote use of `r`-string since we have a `\\`\n\n## Regular Expressions\n\n\"Quantifiers\" capture the idea of repeatable values: \n\n::: {.incremental}\n\n- `a{n}`: `a` repeated `n` times\n- `a{m, n}`: Between `m` and `n` copies of `a` \n- `a{, n}`: No more than `n` copies\n- `a{m, }`: At least `n` copies\n\n:::\n\n\n## Regular Expressions\n\n\"Quantifiers\" capture the idea of repeatable values: \n\n::: {.incremental}\n\n- `a?` is the same as `a{0, 1}` - optional `a`\n- `a+` is the same as `a{1, }` - at least one `a`\n- `a*` is the same as `a{0, }` - unlimited `a` (if any)\n\n:::\n\n## Regular Expressions\n\n\"Quantifiers\" capture the idea of repeatable values: \n\n::: {#ee6208b5 .cell execution_count=4}\n``` {.python .cell-code}\nx = \"I bought 3 bananas, 2 apples, and 10 carrots\"\nre.findall(r\"\\d+\", x) \n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n['3', '2', '10']\n```\n:::\n:::\n\n\n## Regular Expressions\n\nCharacter sets can be 'inverted' by starting with a `^`: \n\n::: {#6b48373b .cell execution_count=5}\n``` {.python .cell-code}\nx = \"I bought 3 bananas, 2 apples, and 10 carrots\"\nre.findall(r\"[^\\s]+\", x) \n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n['I', 'bought', '3', 'bananas,', '2', 'apples,', 'and', '10', 'carrots']\n```\n:::\n:::\n\n\nOne or more items that is **not** a space (`\\s`)\n\n. . .\n\n::: {#7f7c5711 .cell execution_count=6}\n``` {.python .cell-code}\nx = \"I bought 3 bananas, 2 apples, and 10 carrots\"\nre.findall(r\"[^\\s\\d]+\", x) \n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n['I', 'bought', 'bananas,', 'apples,', 'and', 'carrots']\n```\n:::\n:::\n\n\n## Capture Groups\n\nOften, we want to pull out part of a string that matches a regex:\n\n- Capture groups (parentheses) can be used for this: \n\n::: {#4fd7365d .cell execution_count=7}\n``` {.python .cell-code}\nre.findall(r\"\\d+ ([a-z]+)\", x)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n['bananas', 'apples', 'carrots']\n```\n:::\n:::\n\n\nHere we pull *only* those elements (words) inside the parentheses\n\n## Regex in action\n\nRegex can be used to pull out values from long blocks of text\n\n::: {#2cc026f3 .cell execution_count=8}\n``` {.python .cell-code}\nx = \"\"\"According to a survey of 1,000 teenagers, \nthe best possible phone number is 123-456-7890, followed\nby 555-555-5555. This contradicts a survey of 9000\nadults, who much prefered the phone number 867-5309.\"\"\"\n\nre.findall(r\"\\d{3}-\\d{3}-\\d{4}\", x)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n['123-456-7890', '555-555-5555']\n```\n:::\n:::\n\n\n## Looking Ahead\n\nIn the exercises, you will now apply regex processing to \nclean up data extracted from a website. \n\n## Learning More\n\n- Testing Regular Expressions Interactively: [regex101.com/](https://regex101.com/)\n- Alternative [regexr.com/](https://regexr.com/)\n- Automated Regular Expression Builder: [regex-generator](https://regex-generator.olafneumann.org) \n- AI Regexp Builder: [hregexgo.com/](https://www.regexgo.com/)\n\n",
    "supporting": [
      "19_python_regex_files"
    ],
    "filters": [],
    "includes": {}
  }
}