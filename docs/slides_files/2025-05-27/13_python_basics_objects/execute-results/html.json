{
  "hash": "5480ffe253572e9ba53e03dd87eb1fa2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntopic: \"`python` Basics: Objects\"\n---\n\n\n# {{< meta topic >}}\n\n## Where are We?\n\n::: {style=\"font-size: 85%;\"}\n- `R` Basics\n- Data Visualization\n- `R` Programming\n- Tidy Data Manipulation\n- [`python` Basics]{color=\"blue\"}\n  - Installing `python`\n  - Basic Syntax and Control Flow\n  - [`python` Objects]{color=\"blue\"}\n  - Using Packages\n- Web Scraping with `python`\n\n:::\n\n\n## Goals for this Video\n\nIn this video: \n\n::: {.incremental}\n\n- The `python` object model\n- Methods vs Functions\n- Mutating vs Non-Mutating Methods\n\n:::\n\n## Objects\n\n**Everything** in `Python` is an **object**\n\n. . . \n\nWhat does this mean? What is an object? \n\n. . . \n\nIn CS, an `object` is \n\n- A \"package\" of values ('state') and behaviors ('methods')\n- An instance of a `class`\n\n## Value Storage\n\n\n\n`object`s can store values (and different objects have different values). \n\n::: {#7a96e55a .cell execution_count=2}\n``` {.python .cell-code}\ngus = Dog(name='Gus', owner='Michael')\n\ngus\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nDog(name='Gus', owner='Michael')\n```\n:::\n:::\n\n\n## Value Storage\n\nAccess `object` values using the `dot` operator\n\n::: {#7d0ab9b7 .cell execution_count=3}\n``` {.python .cell-code}\ngus.owner\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'Michael'\n```\n:::\n:::\n\n\nThe dot looks _inside_ the object for an attribute called `owner`. \n\n. . . \n\nNot all names work: \n\n::: {#dfa44473 .cell execution_count=4}\n``` {.python .cell-code}\ngus.breed\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AttributeError</span>                            Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[4]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">1</span> <span class=\"ansi-yellow-bg\">gus</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">breed</span>\n\n<span class=\"ansi-red-fg\">AttributeError</span>: 'Dog' object has no attribute 'breed'</pre>\n```\n:::\n\n:::\n:::\n\n\n## Value Storage\n\nTechnically, you can inspect any attribute of an object this way\n\n. . . \n\nBy convention, attributes starting with a `_` should not be used directly. \n\n. . . \n\nSee all attributes with `dir`\n\n::: {#1538b11d .cell execution_count=5}\n``` {.python .cell-code}\ndir(gus)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'bark',\n 'name',\n 'owner']\n```\n:::\n:::\n\n\n## Methods\n\nIn addition to storing _values_, objects can contain _functions_. \n\n. . . \n\n::: {#dc91274d .cell execution_count=6}\n``` {.python .cell-code}\nobj.func(arg1, arg2)\n```\n:::\n\n\nis transformed to \n\n::: {#381f2498 .cell execution_count=7}\n``` {.python .cell-code}\nfunc(obj, arg1, arg2)\n```\n:::\n\n\n. . . \n\nFor example\n\n::: {#53842fad .cell execution_count=8}\n``` {.python .cell-code}\ngus.bark()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'Woof!'\n```\n:::\n:::\n\n\nand \n\n::: {#64bc93ea .cell execution_count=9}\n``` {.python .cell-code}\ngus.bark(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'Woof!Woof!Woof!'\n```\n:::\n:::\n\n\n## Methods\n\n(Basically) _Everything_ is a method under the hood: \n\n::: {#b1d5f5f9 .cell execution_count=10}\n``` {.python .cell-code}\n# 2 + 2\nx = 2\nx.__add__(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n4\n```\n:::\n:::\n\n\nMagic double-underscore (\"dunder\") methods should not be used directly, but are implicitly called by most operations\n\n## Classes\n\nA `class` is a \"category\" that defines a set of behaviors and provides space for values to be stored\n\n. . . \n\n> `object` template\n\n. . . \n\nBecause everything in `python` is an `object`, \nthe behavior of objects is controlled by their `class`\n\n. . . \n\n::: {#65043719 .cell execution_count=11}\n``` {.python .cell-code}\ngus.bark()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'Woof!'\n```\n:::\n:::\n\n\n`gus` (object) has no special `bark`, so fallback\nto `Dog` class which defines a `bark` method\n\n## Defining Classes\n\nYou can define a class with a `class` statement: \n\n::: {#0d265adc .cell execution_count=12}\n``` {.python .cell-code}\nclass Dog:\n    def __init__(self, name, owner):\n        self.name = name\n        self.owner = owner\n        \n    def __repr__(self):\n        return f\"Dog(name='{self.name}', owner='{self.owner}')\"\n    \n    def bark(self, n=1):\n        return \"Woof!\" * n\n```\n:::\n\n\nTwo 'magic' methods\n\n- `__init__`: What happens when we *initialize* a new instance? \n  - Value attributes set here\n- `__repr__`: Default print method of object\n\n## Defining Classes\n\nYou can define a class with a `class` statement: \n\n::: {#7ccc6c55 .cell execution_count=13}\n``` {.python .cell-code}\nclass Dog:\n    def __init__(self, name, owner):\n        self.name = name\n        self.owner = owner\n        \n    def __repr__(self):\n        return f\"Dog(name='{self.name}', owner='{self.owner}')\"\n    \n    def bark(self, n=1):\n        return \"Woof!\" * n\n```\n:::\n\n\nOne regular method (`bark`)\n\n- All methods take `self` as the first object\n\n## Subclasses\n\nSubclasses are hierarchical refinements of classes\n\n> `X` is a subclass of `Y` if all instances of `X` are also `Y` but not *vice versa*\n\nFor example: dog breeds\n\n- Basset Hound: dog that howls instead of barking\n- Basenji: dog that doesn't bark\n- Collie: dog with a regular bark\n\n## Subclasses\n\n::: {#52bf335b .cell execution_count=14}\n``` {.python .cell-code}\nclass BassetHound(Dog):\n    breed = \"Basset Hound\"\n    \n    def bark(self, n=1): \n        return \"Arooo!\" * n\n    \nclass Basenji(Dog):\n    breed = \"Basenji\"\n    \n    def bark(self, n=1):\n        return \"\"\n    \nclass Collie(Dog):\n    breed = \"Collie\"\n```\n:::\n\n\n## Subclasses\n\n::: {#7cecb720 .cell execution_count=15}\n``` {.python .cell-code}\nnora = BassetHound(name=\"Nora\", owner=\"Michael\")\nnora # Default Dog __repr__ used to print\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nDog(name='Nora', owner='Michael')\n```\n:::\n:::\n\n\n. . . \n\nSubclass uses specialized methods first: \n\n::: {#1c6dcfdc .cell execution_count=16}\n``` {.python .cell-code}\nnora.bark()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'Arooo!'\n```\n:::\n:::\n\n\n. . . \n\nIf no method found, fall back to default\n\n::: {#5f4bbe23 .cell execution_count=17}\n``` {.python .cell-code}\nrex = Collie(name=\"Rex\", owner=\"Bernard\")\nrex.bark()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'Woof!'\n```\n:::\n:::\n\n\n## Subclasses\n\nSubclasses can add attributes that don't exist in parent class: \n\n::: {#974ec682 .cell execution_count=18}\n``` {.python .cell-code}\nnora.breed\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'Basset Hound'\n```\n:::\n:::\n\n\n*vs.*\n\n::: {#0f315fb1 .cell execution_count=19}\n``` {.python .cell-code}\ngus.breed\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AttributeError</span>                            Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[15]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">1</span> <span class=\"ansi-yellow-bg\">gus</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">breed</span>\n\n<span class=\"ansi-red-fg\">AttributeError</span>: 'Dog' object has no attribute 'breed'</pre>\n```\n:::\n\n:::\n:::\n\n\n## Subclasses\n\nAll objects are ultimately instances of `object`\ntype (\"universal parent\") and inherit many methods\nautomatically\n\n::: {#92526073 .cell execution_count=20}\n``` {.python .cell-code}\ndir(nora)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'bark',\n 'breed',\n 'name',\n 'owner']\n```\n:::\n:::\n\n\n## Methods vs Functions\n\nWhy use methods instead of functions? \n\n::: {.incremental}\n\n- Avoid name collisions: \n  - We don't need `basset_bark()`, `basenji_bark()`, *etc*\n- Keep definitions 'inside' classes\n- Make _mutating_ intent clear\n\n::: \n\n## Methods vs Functions\n\nUnlike `R`, `python` objects can be changed \"in place\": \n\n::: {#f405bc87 .cell execution_count=21}\n``` {.python .cell-code}\nclass BankAccount:\n    def __init__(self, initial_balance=0):\n        self._balance = initial_balance\n    \n    def deposit(self, deposit_amount):\n        self._balance += deposit_amount\n        \n    def withdraw(self, withdraw_amount):\n        self._balance -= withdraw_amount\n        \n    def balance(self):\n        return self._balance\n        \n    def __repr__(self):\n        return f\"BankAccount({self._balance})\"\n```\n:::\n\n\n## Methods vs Functions\n\n::: {#ad9a169a .cell execution_count=22}\n``` {.python .cell-code}\nmy_account = BankAccount(100)\nmy_account\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nBankAccount(100)\n```\n:::\n:::\n\n\n. . . \n\nMake a new deposit:\n\n::: {#46b00d37 .cell execution_count=23}\n``` {.python .cell-code}\nmy_account.deposit(50)\nmy_account\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nBankAccount(150)\n```\n:::\n:::\n\n\n. . . \n\nMake a withdrawal: \n\n::: {#ec34ca23 .cell execution_count=24}\n``` {.python .cell-code}\nmy_account.withdraw(150)\nmy_account.balance()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n0\n```\n:::\n:::\n\n\n## Mutating Methods\n\nMethods which change an object 'in place' \n_usually_ don't return any value\n\n::: {#d6e867ab .cell execution_count=25}\n``` {.python .cell-code}\nx = [4, 1, 2]\nx.sort()\n```\n:::\n\n\nNo value returned, but afterwards: \n\n::: {#212094b4 .cell execution_count=26}\n``` {.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n[1, 2, 4]\n```\n:::\n:::\n\n\n## Danger - Multiple References\n\nBecause `python` objects can be changed in place, \nwe need to understand _references_\n\n. . . \n\nTwo names can refer to same object: \n\n- \"Prof. Weylandt\" (to you) => Me\n- \"Michael\" (to my dept. chair) => Me\n- \"Honey\" (to my wife) => Me\n\nIf \"Michael\" catches a cold, so does \"Prof. Weylandt\" and \"Honey\"\n\n## Danger - Multiple References\n\n::: {#347ef975 .cell execution_count=27}\n``` {.python .cell-code}\nx = [3, 1, 2]\ny = x\nprint(y)\n\n## Lots of code here...\nx.sort()\n\n## More code ...\n\n## Finally\nprint(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3, 1, 2]\n[1, 2, 3]\n```\n:::\n:::\n\n\n`y` got changed because same _object_ as `x`, even though we never touched `y`:  \n\n::: {#c0ae7d13 .cell execution_count=28}\n``` {.python .cell-code}\nx is y\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nTrue\n```\n:::\n:::\n\n\n## Danger - Multiple References\n\nThe `copy` method makes an independent copy: \n\n::: {#aa56d382 .cell execution_count=29}\n``` {.python .cell-code}\nx is y\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#06128399 .cell execution_count=30}\n``` {.python .cell-code}\ny = x.copy()\nprint(x is y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n:::\n\n\n. . . \n\nNow changes to `x` don't impact `y`: \n\n::: {#23a58cb6 .cell execution_count=31}\n``` {.python .cell-code}\nx.append(4)\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n::: {#23eff817 .cell execution_count=32}\n``` {.python .cell-code}\ny # No 4!\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n[1, 2, 3]\n```\n:::\n:::\n\n\n## Looking Ahead\n\nWe are now ready to start digging into important libraries\n\n. . . \n\nUpcoming\n\n- `pandas` for pythonic Data Frames\n- `requests` for web access\n- `BeautifulSoup` for reading web pages\n\n## Learning More\n\nThe [`python` docs](https://docs.python.org/3/reference/datamodel.html) give full technical details of objects and methods\n\n. . . \n\nFor now, 'go with the flow' and get used to using methods and objects - details not super important until you start writing your own libraries\n\n",
    "supporting": [
      "13_python_basics_objects_files"
    ],
    "filters": [],
    "includes": {}
  }
}