{
  "hash": "004dff0f0c9940cc79ff805351e1f228",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntopic: \"HTML: Structured Text for the Web\"\n---\n\n\n\n\n\n\n# {{< meta topic >}}\n\n## Where are We?\n\n::: {style=\"font-size: 85%;\"}\n- `R` Basics\n- Data Visualization\n- `R` Programming\n- Tidy Data Manipulation\n- `python` Basics\n- Web Scraping with `python`\n  - Basics of HTTP\n  - Making HTTP Requests with `Python`\n  - Structure of HTML\n  - Parsing HTML with `Python`\n  - [String Manipulation in `Python`]{color=\"blue\"}\n\n:::\n\n\n## Goals for this Video\n\nIn this video: \n\n::: {.incremental}\n\n- Strings, Bytes, and Unicode\n- Basic String Manipulation\n\n:::\n\n## Strings\n\nLike `R`, `python` strings are used to capture text data\n\n. . . \n\nUnlike `R`, `python` needs you to know a bit about the way computers handle\ntext\n\n## Text Representations\n\nThe first computers used 7 bits to represent characters: \n\n- 52 letters (upper and lower)\n- Various punctuation marks\n- Control characters (tab, newline, *etc*)\n\nAnd all was well. Until...\n\n## Text Representations\n\nComputers spread to Spain and to France\n\n- Needed accented characters\n- Added an 8th bit (128 $\\to$ 256 characters)\n\nAnd all was well. Until...\n\n## Text Representations\n\nComputers spread to Greece and Russia\n\n- Needed two whole new alphabets\n- No one wanted to add another bit, so *encodings*\n  - Rules saying \"interpret as Greek\" or \"interpret as Latin\"\n\nAnd all was well. Until...\n\n\n## Text Representations\n\nComputers spread to China and Japan\n\n- Entirely different language model\n\n...\n\n## Unicode\n\nAfter a few more iterations of this cycle, the `Unicode` standard\nwas born\n\n. . . \n\nMassive list of characters, codepoints (numbers), and rules for \nstandard text operations (case folding, combining accents, *etc*)\n\n## Unicode\n\nUnicode has everything: \n\n- Modern languages\n- Emoji\n- Symbols from math, music, astrology, *etc.*\n- Ancient languages\n- Fake languages\n\nand room for more\n\n\n## Unicode\n\nDeciding what goes in Unicode is politically and socially tricky: \n\n. . . \n\nTaco Bell Saga: \n\n- Taco Emoji [History](https://www.huffpost.com/entry/taco-bell-emoji-petition_n_6416798)\n- Taco Emoji [Controversy](https://www.vice.com/en/article/the-brief-history-of-the-taco-emoji-now-has-a-happy-ending/)\n\n## Unicode for You\n\nModern `python` implements unicode natively and things generally \"just work\"\n\n::: {#5d9bd33a .cell execution_count=1}\n``` {.python .cell-code}\nx = \"H\"\ny = \"Η\"\n```\n:::\n\n\n. . . \n\n::: {#fea4eda9 .cell execution_count=2}\n``` {.python .cell-code}\nx.lower()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'h'\n```\n:::\n:::\n\n\n::: {#8aca15a4 .cell execution_count=3}\n``` {.python .cell-code}\ny.lower()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'η'\n```\n:::\n:::\n\n\n## Unicode for You\n\nModern `python` implements unicode natively and things generally \"just work\"\n\n::: {#ee5f7dd4 .cell execution_count=4}\n``` {.python .cell-code}\nx = \"H\"\ny = \"Η\"\n```\n:::\n\n\n. . . \n\n::: {#8299a7f5 .cell execution_count=5}\n``` {.python .cell-code}\nfrom unicodedata import name\nname(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'LATIN CAPITAL LETTER H'\n```\n:::\n:::\n\n\n::: {#7a3ce628 .cell execution_count=6}\n``` {.python .cell-code}\nname(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'GREEK CAPITAL LETTER ETA'\n```\n:::\n:::\n\n\n## Unicode for You\n\nModern `python` implements unicode natively and things generally \"just work\"\n\nIf your source document is \"UTF-8\" encoded, all will be good\n\n- Most modern technologies are UTF-8\n- Legacy systems may be in older encoding\n\n## Working with Strings\n\nLike everything else, strings are objects with many useful methods\n\n::: {#0e85f6d8 .cell execution_count=7}\n``` {.python .cell-code}\nme = \"Michael Weylandt\"\nme.upper()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'MICHAEL WEYLANDT'\n```\n:::\n:::\n\n\n::: {#6a18dbe2 .cell execution_count=8}\n``` {.python .cell-code}\nme.lower()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'michael weylandt'\n```\n:::\n:::\n\n\n::: {#25422e9a .cell execution_count=9}\n``` {.python .cell-code}\nme.title() # Does nothing here\nme.swapcase()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'mICHAEL wEYLANDT'\n```\n:::\n:::\n\n\n## Working with Strings\n\nThe `strip` are particularly useful for cleaning HTML:\n\n::: {#d811efc9 .cell execution_count=10}\n``` {.python .cell-code}\nz = \" Baruch College CUNY   \" # Extra spaces\nz.strip() # Spaces removed\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'Baruch College CUNY'\n```\n:::\n:::\n\n\n::: {#bb19b1e2 .cell execution_count=11}\n``` {.python .cell-code}\nz.lstrip()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'Baruch College CUNY   '\n```\n:::\n:::\n\n\n::: {#2a386136 .cell execution_count=12}\n``` {.python .cell-code}\nz.rstrip()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n' Baruch College CUNY'\n```\n:::\n:::\n\n\n## Working with Strings\n\nMinor string edits are also supported\n\n::: {#275e3c3a .cell execution_count=13}\n``` {.python .cell-code}\nz.strip().removesuffix(\" CUNY\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'Baruch College'\n```\n:::\n:::\n\n\n::: {#5903e42e .cell execution_count=14}\n``` {.python .cell-code}\nz.replace(\"Baruch\", \"Hunter\")\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n' Hunter College CUNY   '\n```\n:::\n:::\n\n\n## Working with Strings\n\nFor long text, `split` is helpful: \n\n::: {#761ca437 .cell execution_count=15}\n``` {.python .cell-code}\nx = \"Hunter College, Baruch College, City College\"\nx.split(\", \")\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n['Hunter College', 'Baruch College', 'City College']\n```\n:::\n:::\n\n\n## f-Strings\n\nWhen building complex strings, the `f-string` is a powerful\nalternative to `R`-style `paste` operations: \n\n::: {#82e4b06d .cell execution_count=16}\n``` {.python .cell-code}\nx = 100\ny = \"SPY\"\nf = \"I bought ${x} worth of {y} and other ETFs today.\"\nf\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n'I bought ${x} worth of {y} and other ETFs today.'\n```\n:::\n:::\n\n\nAutomatic substitution of values inside `{}`\n\n. . . \n\nAdditional extensions provide for rounding, zero padding, *etc*. \n\n## Looking Ahead\n\nIn the next video, we will dive into more advanced \nstring processing using _regular expressions_\n\n## Learning More\n\nSee the official python docs: \n\n- [Unicode Tutorial](https://docs.python.org/3/howto/unicode.html)\n- [`str` Methods](https://docs.python.org/3/library/stdtypes.html#string-methods)\n\n. . . \n\n- Unicode Tables: [unicodeplus.com/](https://unicodeplus.com)\n\n",
    "supporting": [
      "18_python_strings_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}