{
  "hash": "6ef408c5ef35cadb628cd8d91aa22fcf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntopic: \"Groupwise Operations\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n# {{< meta topic >}}\n\n## Where are We?\n\n::: {style=\"font-size: 85%;\"}\n- `R` Basics\n- Data Visualization\n- `R` Programming\n- [Tidy Data Manipulation]{color=\"blue\"}\n  - Selecting Rows and Columns\n  - [Computing Groupwise Summaries]{color=\"blue\"}\n  - Joining Tables\n  - Reshaping Tables\n- `python` Basics\n- Web Scraping with `python`\n\n:::\n\n\n## Goals for this Video\n\nIn this video: \n\n::: incremental\n\n- Understand \"grouped\" `dplyr` operations\n- Use nested/compound group structures\n- Apply `rowwise()` operations\n\n:::\n\n## group_by \n\nSo far, we have applied _vectorized_ operations to `data.frame`s:\n\n- `select`: Keep and drop columns\n- `mutate`: Create new columns\n- `filter`: Keep and drop rows\n\n. . . \n\nFor each of these, we have operated on the _whole_ data set\n\nOften, we instead want to operate on _chunks_ of the data at a time\n\n## group_by\n\nRecall our penguins: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n  species bill_length_mm body_mass_g\n  <fct>            <dbl>       <int>\n1 Adelie            39.1        3750\n2 Adelie            39.5        3800\n3 Adelie            40.3        3250\n# ℹ 341 more rows\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nHeaviest penguin: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> slice_max(body_mass_g)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  species bill_length_mm body_mass_g\n  <fct>            <dbl>       <int>\n1 Gentoo            49.2        6300\n```\n\n\n:::\n:::\n\n\n\n\n## group_by\n\nHow can we get the _heaviest_ penguin _of each species_?\n\n. . . \n\nConceptually: \n\n- Split the data into three groups\n- Apply `slice_max` to each group separately\n- Combine the three rows back together\n\n. . . \n\nSometimes called the *split-apply-combine* paradigm\n\n## group_by\n\nImplemented using the `group_by` _adverb_\n\n- Doesn't do anything on its own\n- Changes the behavior of other functions\n\n. . . \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> group_by(species) |> slice_max(body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>     <fct>           <dbl>         <dbl>             <int>       <int>\n1 Adelie    Biscoe           43.2          19                 197        4775\n2 Chinstrap Dream            52            20.7               210        4800\n3 Gentoo    Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n## Looking Closer\n\nLet's take this step-by-step\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> group_by(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n# Groups:   species [3]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\nSame data as before, but here `# Groups: species[3]`\n\n## Effects of group_by\n\n`group_by` changes behavior of _aggregating_ functions: \n\n- `min()`, `max()`, `n()`, `sum()`, `prod()`, *etc.*\n\nMany other operations use these internally\n\n## Effects of group_by\n\nRecall\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> slice_max(body_mass_g)\n```\n:::\n\n\n\nis equivalent to: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> filter(body_mass_g == max(body_mass_g, na.rm=TRUE))\n```\n:::\n\n\n\nor even\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n    filter(body_mass_g == mass_max)\n```\n:::\n\n\n\n## Effects of group_by\n\nLooking at the first step\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n  species body_mass_g mass_max\n  <fct>         <int>    <int>\n1 Adelie         3750     6300\n2 Adelie         3800     6300\n3 Adelie         3250     6300\n# ℹ 341 more rows\n```\n\n\n:::\n:::\n\n\n\n## Effects of group_by\n\nWith `group_by`, a different `max` for each group\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species) |>\n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n# Groups:   species [3]\n  species body_mass_g mass_max\n  <fct>         <int>    <int>\n1 Adelie         3750     4775\n2 Adelie         3800     4775\n3 Adelie         3250     4775\n# ℹ 341 more rows\n```\n\n\n:::\n:::\n\n\n\n## Effects of group_by\n\nHence, \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species) |>\n    mutate(mass_max = max(body_mass_g, na.rm=TRUE))\n    filter(body_mass_g == mass_max)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> group_by(species) |> slice_max(body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>     <fct>           <dbl>         <dbl>             <int>       <int>\n1 Adelie    Biscoe           43.2          19                 197        4775\n2 Chinstrap Dream            52            20.7               210        4800\n3 Gentoo    Biscoe           49.2          15.2               221        6300\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\ngives a 3 row answer (one per group)\n\n## Effects of group_by\n\nOperations do not have to select only a single row like `slice_max`\n\n. . . \n\nTo get \"above average\" penguins for each species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species) |> \n    filter(body_mass_g > mean(body_mass_g, na.rm=TRUE))\n```\n:::\n\n\n\n## Compound Grouping\n\nCan apply `group_by` to create \"compound\" groups\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> group_by(species, year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n# Groups:   species, year [9]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n$9 = 3 \\times 3$ groups\n\n## Compound Grouping\n\nGrouped operations apply as before: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species, year) |> \n    slice_max(body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 8\n# Groups:   species, year [9]\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>     <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie    Torgersen           39.2          19.6               195        4675\n2 Adelie    Torgersen           42.9          17.6               196        4700\n3 Adelie    Biscoe              43.2          19                 197        4775\n4 Chinstrap Dream               49.2          18.2               195        4400\n5 Chinstrap Dream               52            20.7               210        4800\n6 Chinstrap Dream               50.8          18.5               201        4450\n7 Gentoo    Biscoe              49.2          15.2               221        6300\n8 Gentoo    Biscoe              51.1          16.3               220        6000\n9 Gentoo    Biscoe              48.8          16.2               222        6000\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n## Compound Grouping\n\nMissing 'combinations' automatically dropped: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species, island) \n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n# Groups:   species, island [5]\n   species island    body_mass_g sex   \n   <fct>   <fct>           <int> <fct> \n 1 Adelie  Torgersen        3750 male  \n 2 Adelie  Torgersen        3800 female\n 3 Adelie  Torgersen        3250 female\n 4 Adelie  Torgersen          NA <NA>  \n 5 Adelie  Torgersen        3450 female\n 6 Adelie  Torgersen        3650 male  \n 7 Adelie  Torgersen        3625 female\n 8 Adelie  Torgersen        4675 male  \n 9 Adelie  Torgersen        3475 <NA>  \n10 Adelie  Torgersen        4250 <NA>  \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n## Stopping groups\n\nOnce you are done with grouped operations, `ungroup`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species, island) |>\n    slice_max(body_mass_g) |>\n    ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>     <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie    Biscoe              43.2          19                 197        4775\n2 Adelie    Dream               39.8          19.1               184        4650\n3 Adelie    Torgersen           42.9          17.6               196        4700\n4 Chinstrap Dream               52            20.7               210        4800\n5 Gentoo    Biscoe              49.2          15.2               221        6300\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n## Numeric Variables\n\nIn general, grouping on continuous variables is a bad\nchoice: \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n# Groups:   body_mass_g [95]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n(Analogy: Checking _exact equality_ of continuous random variables)\n\n## Numeric Variables\n\nBetter choices: \n\n- Group on quantiles (`ntile`) or cut points (`cut`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n    mutate(mass_5ile = ntile(body_mass_g, 5)) |>\n    group_by(mass_5ile) |>\n    ...\n```\n:::\n\n\n\n## rowwise Operations\n\n_Rarely_, you may need to apply an operation to each row\nseparately without vectorization\n\n`rowwise` lets you do so - makes each row its own group\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> rowwise()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n# Rowwise: \n  sex    island    flipper_length_mm body_mass_g\n  <fct>  <fct>                 <int>       <int>\n1 male   Torgersen               181        3750\n2 female Torgersen               186        3800\n# ℹ 342 more rows\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nNote: This is a bit dangerous - vectorization is important for data integrity\n\n## Looking Ahead\n\n- Apply Grouped Operations ✅ \n- Summarize Across Multiple Rows\n- Join Multiple Tables\n- Reshape Tables with `pivot` Operations\n\n## Learning More\n\n\nFor more, check out \n[Sections 3.5-3.6 - \"Groups\"](https://r4ds.hadley.nz/data-transform.html#groups) \nof *`R` for Data Science*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}