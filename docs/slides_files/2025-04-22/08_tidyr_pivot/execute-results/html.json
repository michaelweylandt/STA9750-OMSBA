{
  "hash": "0ab6fc051fc84f5c398147052a366912",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntopic: \"Reshaping Tidy Data\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n# {{< meta topic >}}\n\n## Where are We?\n\n::: {style=\"font-size: 85%;\"}\n- `R` Basics\n- Data Visualization\n- `R` Programming\n- [Tidy Data Manipulation]{color=\"blue\"}\n  - Selecting Rows and Columns\n  - Computing Groupwise Summaries\n  - Joining Tables\n  - [Reshaping Tables]{color=\"blue\"}\n- `python` Basics\n- Web Scraping with `python`\n\n:::\n\n\n## Goals for this Video\n\nIn this video: \n\n::: incremental\n\n- Identify wide and long format data\n- Pivot data from wide to long format\n- Pivot data from long to wide format\n\n:::\n\n## Tidy Data\n\nRecall our Baruch enrollment example of tidy data ✅ \n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  <chr>    <chr>           <dbl> <dbl>\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400\n```\n\n\n:::\n:::\n\n\n\n## Tidy Data\n\nWe can plot this \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(D, aes(x=Semester, y=Enrollment, color=Course)) +\n    geom_jitter() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](08_tidyr_pivot_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n\n## Tidy Data\n\nNot easy to plot both `Enrollment` and `Cap` columns\n\n. . . \n\nNeed data in this \"untidy\" format\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   Semester Course     Number Type      \n   <chr>    <chr>       <dbl> <chr>     \n 1 Fall     Accounting    200 Enrollment\n 2 Fall     Accounting    250 Cap       \n 3 Fall     Law           100 Enrollment\n 4 Fall     Law           125 Cap       \n 5 Fall     Statistics    200 Enrollment\n 6 Fall     Statistics    200 Cap       \n 7 Spring   Accounting    300 Enrollment\n 8 Spring   Accounting    350 Cap       \n 9 Spring   Law            50 Enrollment\n10 Spring   Law           100 Cap       \n11 Spring   Statistics    400 Enrollment\n12 Spring   Statistics    400 Cap       \n```\n\n\n:::\n:::\n\n\n\n## Tidy Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(D2, aes(x=Semester, y=Number, shape=Type, color=Course)) +\n    geom_jitter() + theme_bw() + theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](08_tidyr_pivot_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n## Wide and Long Data\n\nWe switched from a \"wide\" format to a \"long\" format\n\n- Not absolute terms, relative to each other\n- Wide has more columns (tidier)\n- Long is easier for certain plots\n\n## Pivots\n\n`pivot` operations can be used to switch between formats\n\n- `pivot_longer` combine columns \n- `pivot_wider` split a column \n\nSyntax is hard to remember: \n\n- use `?pivot_wider` and `?pivot_longer` \n\n## Wide to Long\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_longer(D, \n             cols=c(Enrollment, Cap), \n             names_to=\"Type\",  # Quote since not a current column\n             values_to=\"Number\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n  Semester Course     Type       Number\n  <chr>    <chr>      <chr>       <dbl>\n1 Fall     Accounting Enrollment    200\n2 Fall     Accounting Cap           250\n3 Fall     Law        Enrollment    100\n# ℹ 9 more rows\n```\n\n\n:::\n:::\n\n\n\n- `cols` to pivot\n- `names_to`: column where to put (old) column name\n- `values_to`: column where to store old values\n\n## Long to Wide\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_wider(D2, \n            id_cols = c(Semester, Course), \n            values_from = Number, \n            names_from = Type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Semester Course     Enrollment   Cap\n  <chr>    <chr>           <dbl> <dbl>\n1 Fall     Accounting        200   250\n2 Fall     Law               100   125\n3 Fall     Statistics        200   200\n4 Spring   Accounting        300   350\n5 Spring   Law                50   100\n6 Spring   Statistics        400   400\n```\n\n\n:::\n:::\n\n\n\n- `id_cols`: columns kept in place\n- `names_from`: column where to get new column names\n- `values_from`: column where to get values\n\n## Looking Ahead\n\n- Apply Grouped Operations ✅ \n- Summarize Across Multiple Rows ✅ \n- Join Multiple Tables ✅ \n- Reshape Tables with `pivot` Operations ✅ \n\n. . . \n\nNow it's your turn!\n\n## Learning More\n\nFor more, check out \n[Chapter 5 - \"Tidying\"](https://r4ds.hadley.nz/data-tidy.html) \nof *`R` for Data Science*\n\n",
    "supporting": [
      "08_tidyr_pivot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}