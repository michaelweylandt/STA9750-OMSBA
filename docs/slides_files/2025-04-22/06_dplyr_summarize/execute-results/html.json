{
  "hash": "43c9fcd8bc8a16b25952565ed62419b9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntopic: \"Summarizing Group Statistics\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n# {{< meta topic >}}\n\n## Where are We?\n\n::: {style=\"font-size: 85%;\"}\n- `R` Basics\n- Data Visualization\n- `R` Programming\n- [Tidy Data Manipulation]{color=\"blue\"}\n  - Selecting Rows and Columns\n  - [Computing Groupwise Summaries]{color=\"blue\"}\n  - Joining Tables\n  - Reshaping Tables\n- `python` Basics\n- Web Scraping with `python`\n\n:::\n\n\n## Goals for this Video\n\nIn this video: \n\n::: incremental\n\n- Combine multiple rows using `summarize`\n- Compute overall and group-wise summary statistics\n\n:::\n\n## group_by\n\nYou have already seen `group_by` modify the operation of 'aggregation' functions: \n\n- `min`, `max`\n- `mean`, `sum`, \n- `ntile`\n\n*etc*\n\n. . . \n\nNo reduction in data complexity unless combined with `filter`\n\n## group_by + summarize\n\n`group_by` and `summarize` $\\implies$ _summary statistics_\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species) |> \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   avg_mass\n  <fct>        <dbl>\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n```\n\n\n:::\n:::\n\n\n\n. . . \n\nUnlike `filter`, these are _new rows_: \n\n- One row summarizing each group\n- Not a subset of old rows\n\n## group_by + summarize\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   avg_mass\n  <fct>        <dbl>\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n```\n\n\n:::\n:::\n\n\n\nWhat happened to other features (e.g., `flipper_length_mm`)? \n\n. . . \n\n`summarize` only keeps: \n\n1) Grouping variables (`species`)\n2) Created variables (`avg_mass`)\n\nAll other data is dropped\n\n## group_by + summarize\n\nCan perform multiple summaries at once:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species) |> \n    summarize(avg_mass = mean(body_mass_g, na.rm=TRUE), \n              sd_mass = sd(body_mass_g, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  species   avg_mass sd_mass\n  <fct>        <dbl>   <dbl>\n1 Adelie       3701.    459.\n2 Chinstrap    3733.    384.\n3 Gentoo       5076.    504.\n```\n\n\n:::\n:::\n\n\n\nImportant to do all summaries in one call\n\n## summarize helpers\n\nThe `n()` function will count the number of rows in a group\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species) |> \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE), \n              n = n(), \n              mass_se = mass_sd / sqrt(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  species   mass_avg mass_sd     n mass_se\n  <fct>        <dbl>   <dbl> <int>   <dbl>\n1 Adelie       3701.    459.   152    37.2\n2 Chinstrap    3733.    384.    68    46.6\n3 Gentoo       5076.    504.   124    45.3\n```\n\n\n:::\n:::\n\n\n\n## summarize helpers\n\n`cur_group()` returns the current group name\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species) |> \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE), \n              mass_sd = sd(body_mass_g, na.rm=TRUE), \n              n = n(), \n              mass_se = mass_sd / sqrt(n), \n              species_cap = toupper(cur_group()))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  species   mass_avg mass_sd     n mass_se species_cap\n  <fct>        <dbl>   <dbl> <int>   <dbl> <chr>      \n1 Adelie       3701.    459.   152    37.2 1          \n2 Chinstrap    3733.    384.    68    46.6 2          \n3 Gentoo       5076.    504.   124    45.3 3          \n```\n\n\n:::\n:::\n\n\n\nCan also use `species` directly\n\n## Removes grouping\n\n`summarize` removes the _last_ level of grouping\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species) |> \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   mass_avg\n  <fct>        <dbl>\n1 Adelie       3701.\n2 Chinstrap    3733.\n3 Gentoo       5076.\n```\n\n\n:::\n:::\n\n\n\nNo grouping remains\n\n\n## Removes grouping\n\n`summarize` removes the _last_ level of grouping\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species, sex) |> \n    summarize(mass_avg = mean(body_mass_g, na.rm=TRUE))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex    mass_avg\n  <fct>     <fct>     <dbl>\n1 Adelie    female    3369.\n2 Adelie    male      4043.\n3 Adelie    <NA>      3540 \n4 Chinstrap female    3527.\n5 Chinstrap male      3939.\n# ℹ 3 more rows\n```\n\n\n:::\n:::\n\n\n\nGrouping by `species` still active\n\n## Removes grouping\n\nAdvice: \n\n- `group_by` should be as close to `summarize` as possible\n- `ungroup` and re-`group_by` defensively\n\n## Column names\n\nLike `mutate`, give `summarize` column names\n\nDefaults are unhelpful: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    group_by(species) |>\n    summarize(sd(body_mass_g, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   `sd(body_mass_g, na.rm = TRUE)`\n  <fct>                               <dbl>\n1 Adelie                               459.\n2 Chinstrap                            384.\n3 Gentoo                               504.\n```\n\n\n:::\n:::\n\n\n\n## Multiple columns\n\nRemember the selection helpers from `select`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    select(where(is.numeric)) |>\n    print(n=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 5\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n           <dbl>         <dbl>             <int>       <int> <int>\n1           39.1          18.7               181        3750  2007\n2           39.5          17.4               186        3800  2007\n3           40.3          18                 195        3250  2007\n4           NA            NA                  NA          NA  2007\n# ℹ 340 more rows\n```\n\n\n:::\n:::\n\n\n\n## Multiple columns\n\nCan be used inside `summarize` as well\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsafe_mean <- function(x) mean(x, na.rm=TRUE)\npenguins |> \n    group_by(species) |>\n    summarize(across(where(is.numeric), safe_mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  species   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  <fct>              <dbl>         <dbl>             <dbl>       <dbl> <dbl>\n1 Adelie              38.8          18.3              190.       3701. 2008.\n2 Chinstrap           48.8          18.4              196.       3733. 2008.\n3 Gentoo              47.5          15.0              217.       5076. 2008.\n```\n\n\n:::\n:::\n\n\n\n## Without group_by\n\nWithout `group_by`, `summarize` takes summaries of the entire data set: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    summarize(n=n(), \n              across(where(is.numeric), safe_mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n      n bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  <dbl>          <dbl>         <dbl>             <dbl>       <dbl> <dbl>\n1   344           43.9          17.2              201.       4202. 2008.\n```\n\n\n:::\n:::\n\n\n\n## summarize and group_by\n\n`summarize` computes _summary statistics_ of a population\n\n- means, standard deviations, counts, *etc.*\n\n`group_by` changes these to _conditional summary statistics_\n\n- *E.g.*, mean of body mass, conditional on `adelie` species\n\n. . . \n\nMany steps of real data analysis fits this pattern\n\nIf you dive deeper into split-apply-combine, can determine\ngroup-wise models as well (e.g., different trends for\ndifferent groups)\n\n## Looking Ahead\n\n- Apply Grouped Operations ✅ \n- Summarize Across Multiple Rows ✅ \n- Join Multiple Tables\n- Reshape Tables with `pivot` Operations\n\n## Learning More\n\n\nFor more, check out \n[Sections 3.5-3.6 - \"Groups\"](https://r4ds.hadley.nz/data-transform.html#groups) \nof *`R` for Data Science*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}